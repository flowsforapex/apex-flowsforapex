/*
   Migration Script for Issue 581 - Add basic sendMessage and receiveMessage Support

  Created  RAllen   01 Mar 2023

  (c) Copyright Oracle Corporation and/or its affiliates.  2023.

*/


create table flow_message_subscriptions (
    msub_id                 number GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 ) NOT NULL, 
    msub_message_name	    varchar2(200 char),	
    msub_key_name	        varchar2(200 char),	
    msub_key_value	        varchar2(200 char),	
    msub_prcs_id	        number,	
    msub_sbfl_id	        number,	
    msub_step_key	        varchar2( 20 char),	
    msub_callback           varchar2(200 char),
    msub_callback_par       varchar2(200 char),
    msub_payload_var        varchar2(50 char),
    msub_created	        timestamp with time zone	
);

alter table flow_message_subscriptions
  add constraint flow_msub_pk primary key ( msub_id )
;

alter table flow_message_subscriptions
    add constraint flow_msub_prcs_fk FOREIGN KEY ( msub_prcs_id )
        references flow_processes (prcs_id)
            ON DELETE CASCADE;

alter table flow_message_subscriptions
    add constraint flow_msub_sbfl_fk FOREIGN KEY ( msub_sbfl_id )
        references flow_subflows (sbfl_id)
            ON DELETE CASCADE;

alter table flow_message_subscriptions
    add constraint flow_msub_uk UNIQUE (msub_message_name, msub_key_name, msub_key_value);

create index flow_msub_prcs_sbfl_ix on flow_message_subscriptions( msub_prcs_id, msub_sbfl_id );

create table flow_message_received_log
( lgrx_id              number generated always as identity (start with 1) not null
, lgrx_message_name	   varchar2(200 char)
, lgrx_key_name	       varchar2(200 char)
, lgrx_key_value	     varchar2(200 char)
, lgrx_payload         clob
, lgrx_prcs_id	       number
, lgrx_sbfl_id	       number
, lgrx_received_on     timestamp with time zone
, lgrx_was_correlated  varchar2(1 char)
, lgrx_comment         varchar2(200 char)
);

alter table flow_message_received_log
  add constraint flow_lgrx_pk primary key ( lgrx_id )
;

--- experimental code for timer callbacks
--- migration would require every open timer to be given a callback routine,
--- therefore differentiate between
--  -- start timer
--  -- boundary event timer
--  -- ICE timer

 alter table flow_timers
   add (
    timr_callback      VARCHAR2(200 CHAR),
    timr_callback_par  varchar2(200 CHAR)
   );

 alter table flow_subflows
  add (
    sbfl_is_following_ebg varchar2(1 char)
  );

ALTER TABLE flow_subflows ADD CONSTRAINT sbfl_ck_following_ebg_yn CHECK (sbfl_is_following_ebg in ('Y','N'));

update_flow_timers timr
set timr.timr_callback = 
        select cur_objt.objt_tag_name
          from flow_subflows sbfl
          join flow_objects cur_objt
            on sbfl.sbfl_current = cur_objt.objt_bpmn_id
           and sbfl.sbfl_dgrm_id = cur_objt.objt_dgrm_id
          where sbfl.sbfl_id = timr.timr_sbfl_id
;


-- in addition, know in flow_subflows if the current event follows on from a Event Based Gateway
 
update flow_subflows sbfl
set sbfl.sbfl_is_following_ebg = 'Y'
where sbfl.sbfl_current in (
             select cur_objt.objt_bpmn_id
               from flow_objects cur_objt
               join flow_diagrams dgrm
                 on dgrm.dgrm_id = cur_objt.objt_dgrm_id
               join flow_objects prev_objt 
                 on cur_objt.objt_dgrm_id = prev_objt.objt_dgrm_id
               join flow_connections conn
                 on conn.conn_dgrm_id = cur_objt.objt_dgrm_id
                and conn.conn_tgt_objt_id = cur_objt.objt_id
                and conn.conn_src_objt_id = prev_objt.objt_id
              where cur_objt.objt_tag_name = 'bpmn:intermediateCatchEvent'
                and prev_objt.objt_tag_name = 'bpmn:eventBasedGateway');
