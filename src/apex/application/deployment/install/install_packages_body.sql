prompt --application/deployment/install/install_packages_body
begin
--   Manifest
--     INSTALL: INSTALL-Packages Body
--   Manifest End
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.create_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_install_id=>wwv_flow_api.id(17031066408817192)
,p_name=>'Packages Body'
,p_sequence=>50
,p_script_type=>'INSTALL'
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'create or replace package body flow_process_vars',
'as',
'',
'  lock_timeout exception;',
'  pragma exception_init (lock_timeout, -3006);',
'',
'procedure set_var',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_vc2_value in flow_process_variables.prov_var_vc2%type',
', pi_sbfl_id in flow_subflows.sbfl_id%type default null',
', pi_objt_bpmn_id in flow_objects.objt_bpmn_id%type default null ',
', pi_expr_set in flow_object_expressions.expr_set%type default null',
')',
'is ',
'  l_action  varchar2(20);',
'begin',
'  begin',
'      insert into flow_process_variables ',
'      ( prov_prcs_id',
'      , prov_var_name',
'      , prov_var_type',
'      , prov_var_vc2',
'      ) values',
'      ( pi_prcs_id',
'      , pi_var_name',
'      , flow_constants_pkg.gc_prov_var_type_varchar2 ',
'      , pi_vc2_value',
'      );      ',
'  exception',
'    when dup_val_on_index then',
'      l_action := ''var-update-error'';',
'      update flow_process_variables prov ',
'         set prov.prov_var_vc2 = pi_vc2_value',
'       where prov.prov_prcs_id = pi_prcs_id',
'         and prov.prov_var_name = pi_var_name',
'         and prov.prov_var_type = flow_constants_pkg.gc_prov_var_type_varchar2 ',
'           ;',
'    when others',
'    then',
'      l_action := ''var-set-error'';',
'      raise;',
'  end;',
'  flow_logging.log_variable_event',
'  ( p_process_id        => pi_prcs_id',
'  , p_var_name          => pi_var_name',
'  , p_objt_bpmn_id      => pi_objt_bpmn_id',
'  , p_subflow_id        => pi_sbfl_id',
'  , p_expr_set          => pi_expr_set',
'  , p_var_type          => flow_constants_pkg.gc_prov_var_type_varchar2 ',
'  , p_var_vc2           => pi_vc2_value',
'  );',
'exception',
'  when others',
'  then',
'    flow_errors.handle_instance_error',
'    ( pi_prcs_id        => pi_prcs_id',
'    , pi_sbfl_id        => pi_sbfl_id',
'    , pi_message_key    => l_action',
'    , p0 => pi_var_name',
'    , p1 => pi_prcs_id',
'    );',
'    -- $F4AMESSAGE ''var-set-error'' || ''Error setting process variable %0 for process id %1.''',
'    -- $F4AMESSAGE ''var-update-error'' || ''Error updating process variable %0 for process id %1.''   ',
'end set_var;',
'',
'procedure set_var',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_num_value in flow_process_variables.prov_var_num%type',
', pi_sbfl_id in flow_subflows.sbfl_id%type default null',
', pi_objt_bpmn_id in flow_objects.objt_bpmn_id%type default null ',
', pi_expr_set in flow_object_expressions.expr_set%type default null',
')',
'is ',
'  l_action  varchar2(20);',
'begin ',
'  begin',
'      insert into flow_process_variables ',
'      ( prov_prcs_id',
'      , prov_var_name',
'      , prov_var_type',
'      , prov_var_num',
'      ) values',
'      ( pi_prcs_id',
'      , pi_var_name',
'      , flow_constants_pkg.gc_prov_var_type_number',
'      , pi_num_value',
'      );',
'  exception',
'    when dup_val_on_index then',
'      l_action := ''var-update-error'';',
'      update flow_process_variables prov ',
'         set prov.prov_var_num = pi_num_value',
'       where prov.prov_prcs_id = pi_prcs_id',
'         and prov.prov_var_name = pi_var_name',
'         and prov.prov_var_type = flow_constants_pkg.gc_prov_var_type_number',
'           ;',
'    when others',
'    then',
'      l_action := ''var-set-error'';',
'      raise;',
'  end;',
'  flow_logging.log_variable_event',
'  ( p_process_id        => pi_prcs_id',
'  , p_var_name          => pi_var_name',
'  , p_objt_bpmn_id      => pi_objt_bpmn_id',
'  , p_subflow_id        => pi_sbfl_id',
'  , p_expr_set          => pi_expr_set',
'  , p_var_type          => flow_constants_pkg.gc_prov_var_type_number',
'  , p_var_num           => pi_num_value',
'  );',
'exception',
'  when others',
'  then',
'    flow_errors.handle_instance_error',
'    ( pi_prcs_id        => pi_prcs_id',
'    , pi_sbfl_id        => pi_sbfl_id',
'    , pi_message_key    => l_action         ',
'    , p0 => pi_var_name',
'    , p1 => pi_prcs_id',
'    );',
'    -- $F4AMESSAGE ''var-set-error'' || ''Error setting process variable %0 for process id %1.''',
'    -- $F4AMESSAGE ''var-update-error'' || ''Error updating process variable %0 for process id %1.''   ',
'end set_var;',
'',
'procedure set_var',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_date_value in flow_process_variables.prov_var_date%type',
', pi_sbfl_id in flow_subflows.sbfl_id%type default null',
', pi_objt_bpmn_id in flow_objects.objt_bpmn_id%type default null ',
', pi_expr_set in flow_object_expressions.expr_set%type default null',
')',
'is ',
'  l_action  varchar2(20);',
'begin ',
'  begin',
'      insert into flow_process_variables ',
'      ( prov_prcs_id',
'      , prov_var_name',
'      , prov_var_type',
'      , prov_var_date',
'      ) values',
'      ( pi_prcs_id',
'      , pi_var_name',
'      , flow_constants_pkg.gc_prov_var_type_date',
'      , pi_date_value',
'      );',
'  exception',
'    when dup_val_on_index then',
'      l_action := ''var-update-error'';',
'      update flow_process_variables prov ',
'         set prov.prov_var_date = pi_date_value',
'       where prov.prov_prcs_id = pi_prcs_id',
'         and prov.prov_var_name = pi_var_name',
'         and prov.prov_var_type = flow_constants_pkg.gc_prov_var_type_date',
'           ;',
'    when others',
'    then',
'      l_action := ''var-set-error'';',
'      raise;',
'  end;',
'  flow_logging.log_variable_event',
'  ( p_process_id        => pi_prcs_id',
'  , p_var_name          => pi_var_name',
'  , p_objt_bpmn_id      => pi_objt_bpmn_id',
'  , p_subflow_id        => pi_sbfl_id',
'  , p_expr_set          => pi_expr_set',
'  , p_var_type          => flow_constants_pkg.gc_prov_var_type_date ',
'  , p_var_date          => pi_date_value',
'  );',
'exception',
'  when others',
'  then',
'    flow_errors.handle_instance_error',
'    ( pi_prcs_id        => pi_prcs_id',
'    , pi_sbfl_id        => pi_sbfl_id',
'    , pi_message_key    => l_action         ',
'    , p0 => pi_var_name',
'    , p1 => pi_prcs_id',
'    );',
'    -- $F4AMESSAGE ''var-set-error'' || ''Error setting process variable %0 for process id %1.''',
'    -- $F4AMESSAGE ''var-update-error'' || ''Error updating process variable %0 for process id %1.''   ',
'end set_var;',
'',
'procedure set_var',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_clob_value in flow_process_variables.prov_var_clob%type',
', pi_sbfl_id in flow_subflows.sbfl_id%type default null',
', pi_objt_bpmn_id in flow_objects.objt_bpmn_id%type default null ',
', pi_expr_set in flow_object_expressions.expr_set%type default null',
')',
'is ',
'  l_action  varchar2(20);',
'begin ',
'  begin',
'      insert into flow_process_variables ',
'      ( prov_prcs_id',
'      , prov_var_name',
'      , prov_var_type',
'      , prov_var_clob',
'      ) values',
'      ( pi_prcs_id',
'      , pi_var_name',
'      , flow_constants_pkg.gc_prov_var_type_clob',
'      , pi_clob_value',
'      );',
'  exception',
'    when dup_val_on_index then',
'      update flow_process_variables prov ',
'         set prov.prov_var_clob = pi_clob_value',
'       where prov.prov_prcs_id = pi_prcs_id',
'         and prov.prov_var_name = pi_var_name',
'         and prov.prov_var_type = flow_constants_pkg.gc_prov_var_type_clob',
'           ;',
'    when others',
'    then',
'      l_action := ''var-set-error'';',
'      raise;',
'  end;',
'  flow_logging.log_variable_event',
'  ( p_process_id        => pi_prcs_id',
'  , p_var_name          => pi_var_name',
'  , p_objt_bpmn_id      => pi_objt_bpmn_id',
'  , p_subflow_id        => pi_sbfl_id',
'  , p_expr_set          => pi_expr_set',
'  , p_var_type          => flow_constants_pkg.gc_prov_var_type_clob ',
'  , p_var_clob           => pi_clob_value',
'  );',
'exception',
'  when others',
'  then',
'    flow_errors.handle_instance_error',
'    ( pi_prcs_id        => pi_prcs_id',
'    , pi_sbfl_id        => pi_sbfl_id',
'    , pi_message_key    => l_action         ',
'    , p0 => pi_var_name',
'    , p1 => pi_prcs_id',
'    );',
'    -- $F4AMESSAGE ''var-set-error'' || ''Error setting process variable %0 for process id %1.''',
'end set_var;',
'',
'-- getters return',
'',
'function get_var_vc2',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_exception_on_null in boolean default false',
') return flow_process_variables.prov_var_vc2%type',
'is ',
'   po_vc2_value  flow_process_variables.prov_var_vc2%type;',
'begin ',
'   select prov.prov_var_vc2',
'     into po_vc2_value',
'     from flow_process_variables prov',
'    where prov.prov_prcs_id = pi_prcs_id',
'      and prov.prov_var_name = pi_var_name',
'        ;',
'   return po_vc2_value;',
'exception',
'  when no_data_found then',
'    if pi_exception_on_null then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_message_key    => ''var-get-error''      ',
'      , p0 => pi_var_name',
'      , p1 => pi_prcs_id',
'      );',
'    -- $F4AMESSAGE ''var-get-error'' || ''Error getting process variable %0 for process id %1.''',
'    else',
'      return null;',
'    end if;',
'end get_var_vc2;',
'',
'function get_var_num',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_exception_on_null in boolean default false',
') return flow_process_variables.prov_var_num%type',
'is ',
'   po_num_value  flow_process_variables.prov_var_num%type;',
'begin ',
'   select prov.prov_var_num',
'     into po_num_value',
'     from flow_process_variables prov',
'    where prov.prov_prcs_id = pi_prcs_id',
'      and prov.prov_var_name = pi_var_name',
'        ;',
'   return po_num_value;',
'exception',
'  when no_data_found then',
'    if pi_exception_on_null then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_message_key    => ''var-get-error''      ',
'      , p0 => pi_var_name',
'      , p1 => pi_prcs_id',
'      );',
'      -- $F4AMESSAGE ''var-get-error'' || ''Error getting process variable %0 for process id %1.''',
'    else',
'      return null;',
'    end if;',
'end get_var_num;',
'',
'function get_var_date',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_exception_on_null in boolean default false',
') return flow_process_variables.prov_var_date%type',
'is ',
'   po_date_value  flow_process_variables.prov_var_date%type;',
'begin ',
'   select prov.prov_var_date',
'     into po_date_value',
'     from flow_process_variables prov',
'    where prov.prov_prcs_id = pi_prcs_id',
'      and prov.prov_var_name = pi_var_name',
'        ;',
'   return po_date_value;',
'exception',
'  when no_data_found then',
'    if pi_exception_on_null then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_message_key    => ''var-get-error''      ',
'      , p0 => pi_var_name',
'      , p1 => pi_prcs_id',
'      );',
'      -- $F4AMESSAGE ''var-get-error'' || ''Error getting process variable %0 for process id %1.''',
'    else',
'      return null;',
'    end if;',
'end get_var_date;',
'',
'function get_var_clob',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_exception_on_null in boolean default false',
') return flow_process_variables.prov_var_clob%type',
'is ',
'   po_clob_value  flow_process_variables.prov_var_clob%type;',
'begin ',
'   select prov.prov_var_clob',
'     into po_clob_value',
'     from flow_process_variables prov',
'    where prov.prov_prcs_id = pi_prcs_id',
'      and prov.prov_var_name = pi_var_name',
'        ;',
'   return po_clob_value;',
'exception',
'  when no_data_found then',
'    if pi_exception_on_null then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_message_key    => ''var-get-error''      ',
'      , p0 => pi_var_name',
'      , p1 => pi_prcs_id',
'      );',
'      -- $F4AMESSAGE ''var-get-error'' || ''Error getting process variable %0 for process id %1.''',
'    else',
'      return null;',
'    end if;',
'end get_var_clob;',
'',
'-- get type of a variable',
'',
'function get_var_type',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
', pi_exception_on_null in boolean default false',
') return flow_process_variables.prov_var_type%type',
'is ',
'   l_var_type  flow_process_variables.prov_var_clob%type;',
'begin ',
'   select prov.prov_var_type',
'     into l_var_type',
'     from flow_process_variables prov',
'    where prov.prov_prcs_id = pi_prcs_id',
'      and prov.prov_var_name = pi_var_name',
'        ;',
'   return l_var_type;',
'exception',
'  when no_data_found then',
'    if pi_exception_on_null then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_message_key    => ''var-get-error''      ',
'      , p0 => pi_var_name',
'      , p1 => pi_prcs_id',
'      );',
'      -- $F4AMESSAGE ''var-get-error'' || ''Error getting process variable %0 for process id %1.''',
'    else',
'      return null;',
'    end if;',
'end get_var_type;',
'',
'-- delete a variable',
'',
'procedure delete_var ',
'( pi_prcs_id in flow_processes.prcs_id%type',
', pi_var_name in flow_process_variables.prov_var_name%type',
')',
'is',
'  l_var_type   flow_process_variables.prov_var_type%type;',
'begin ',
'  select prov_var_type',
'    into l_var_type',
'    from flow_process_variables prov',
'   where prov.prov_prcs_id = pi_prcs_id',
'     and prov.prov_var_name = pi_var_name',
'     for update wait 2;',
'',
'  delete ',
'    from flow_process_variables prov',
'   where prov.prov_prcs_id = pi_prcs_id',
'     and prov.prov_var_name = pi_var_name',
'  ;',
'  flow_logging.log_variable_event',
'  ( p_process_id        => pi_prcs_id',
'  , p_var_name          => pi_var_name',
'  , p_var_type          => l_var_type',
'  );',
'exception',
'  when  no_data_found then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_message_key    => ''var-delete-error''        ',
'      , p0 => pi_var_name',
'      , p1 => pi_prcs_id',
'      );',
'      -- $F4AMESSAGE ''var-delete-error'' || ''Error deleting process variable %0 for process id %1.''',
'  when lock_timeout then',
'    flow_errors.handle_instance_error',
'    ( pi_prcs_id        => pi_prcs_id',
'    , pi_message_key    => ''var-lock-error''       ',
'    , p0 => pi_var_name',
'    , p1 => pi_prcs_id',
'    );',
'    -- $F4AMESSAGE ''var-lock-error'' || ''Error locking process variable %0 for process id %1.''',
'end delete_var;',
'',
'-- special cases / built-in standard variables',
'',
'  procedure set_business_ref',
'  ( pi_prcs_id in flow_processes.prcs_id%type',
'  , pi_vc2_value in flow_process_variables.prov_var_vc2%type',
'  , pi_sbfl_id in flow_subflows.sbfl_id%type default null',
'  , pi_objt_bpmn_id in flow_objects.objt_bpmn_id%type default null ',
'  , pi_expr_set in flow_object_expressions.expr_set%type default null',
'  )',
'  is',
'  begin',
'    set_var',
'    ( pi_prcs_id      => pi_prcs_id',
'    , pi_var_name     => flow_constants_pkg.gc_prov_builtin_business_ref',
'    , pi_vc2_value    => pi_vc2_value',
'    , pi_sbfl_id      => pi_sbfl_id',
'    , pi_objt_bpmn_id => pi_objt_bpmn_id',
'    , pi_expr_set     => pi_expr_set',
'    );',
'  end set_business_ref;',
'',
'  function get_business_ref',
'  ( pi_prcs_id in flow_processes.prcs_id%type',
'  )',
'  return flow_process_variables.prov_var_vc2%type',
'  is ',
'  begin',
'    return get_var_vc2 ',
'           ( pi_prcs_id => pi_prcs_id',
'           , pi_var_name => flow_constants_pkg.gc_prov_builtin_business_ref',
'           );',
'  end get_business_ref;',
'',
'-- group delete for all vars in a process (used at process deletion, process reset)',
'',
'  procedure delete_all_for_process',
'  ( pi_prcs_id in flow_processes.prcs_id%type',
'  , pi_retain_builtins in boolean default false',
'  )',
'  is',
'  begin',
'    if pi_retain_builtins then ',
'      delete from flow_process_variables prov',
'      where prov.prov_prcs_id = pi_prcs_id',
'        and prov.prov_var_name not in ( flow_constants_pkg.gc_prov_builtin_business_ref )',
'      ;',
'    else',
'      delete from flow_process_variables prov',
'      where prov.prov_prcs_id = pi_prcs_id;',
'    end if;',
'  end delete_all_for_process;',
'',
'  procedure do_substitution',
'  (',
'    pi_prcs_id  in flow_processes.prcs_id%type',
'  , pi_sbfl_id  in flow_subflows.sbfl_id%type',
'  , pi_step_key in flow_subflows.sbfl_step_key%type default null',
'  , pio_string  in out nocopy varchar2',
'  )',
'  as',
'    l_f4a_substitutions apex_t_varchar2;',
'    l_replacement_value flow_types_pkg.t_bpmn_attribute_vc2;',
'  ',
'    function get_replacement_pattern',
'    (',
'      pi_substitution_variable in varchar2',
'    ) return varchar2',
'    as',
'    begin',
'      return',
'        flow_constants_pkg.gc_substitution_prefix || flow_constants_pkg.gc_substitution_flow_identifier || ',
'        pi_substitution_variable || flow_constants_pkg.gc_substitution_postfix',
'      ;',
'    end get_replacement_pattern;',
'  begin',
'    l_f4a_substitutions :=',
'      apex_string.grep',
'      (',
'        p_str           => pio_string',
'      , p_pattern       => flow_constants_pkg.gc_substitution_pattern',
'      , p_modifier      => ''i''',
'      , p_subexpression => ''1''',
'      )',
'    ;',
'    if l_f4a_substitutions is not null then',
'      for i in 1..l_f4a_substitutions.count',
'      loop',
'        case upper(l_f4a_substitutions(i))',
'          when flow_constants_pkg.gc_substitution_process_id then',
'            pio_string := replace( pio_string, get_replacement_pattern( l_f4a_substitutions(i) ), pi_prcs_id );',
'          when flow_constants_pkg.gc_substitution_subflow_id then',
'            pio_string := replace( pio_string, get_replacement_pattern( l_f4a_substitutions(i) ), pi_sbfl_id );',
'          when flow_constants_pkg.gc_substitution_step_key then',
'            pio_string := replace( pio_string, get_replacement_pattern( l_f4a_substitutions(i) ), pi_step_key );',
'          else',
'            -- own implementation of get_vc_var',
'            -- Reason:',
'            -- The general implementation immediately adds to APEX error stack',
'            begin',
'              select prov.prov_var_vc2',
'                into l_replacement_value',
'                from flow_process_variables prov',
'               where prov.prov_prcs_id  = pi_prcs_id',
'                 and upper(prov.prov_var_name) = upper(l_f4a_substitutions(i))',
'              ;',
'              pio_string := replace( pio_string, get_replacement_pattern( l_f4a_substitutions(i) ), l_replacement_value );',
'            exception',
'              when no_data_found then',
'                -- no data found will be ignored',
'                -- do like APEX and leave original in place',
'                null;',
'            end;',
'        end case;',
'      end loop;',
'    end if;',
'  end do_substitution;',
'',
'  procedure do_substitution',
'  (',
'    pi_prcs_id  in flow_processes.prcs_id%type',
'  , pi_sbfl_id  in flow_subflows.sbfl_id%type',
'  , pi_step_key in flow_subflows.sbfl_step_key%type default null',
'  , pio_string  in out nocopy clob',
'  )',
'  as',
'    l_f4a_substitutions apex_t_varchar2;',
'    l_replacement_value flow_types_pkg.t_bpmn_attribute_vc2;',
'  ',
'    function get_replacement_pattern',
'    (',
'      pi_substitution_variable in varchar2',
'    ) return varchar2',
'    as',
'    begin',
'      return',
'        flow_constants_pkg.gc_substitution_prefix || flow_constants_pkg.gc_substitution_flow_identifier || ',
'        pi_substitution_variable || flow_constants_pkg.gc_substitution_postfix',
'      ;',
'    end get_replacement_pattern;',
'  begin',
'    l_f4a_substitutions :=',
'      apex_string.grep',
'      (',
'        p_str            => pio_string',
'      , p_pattern       => flow_constants_pkg.gc_substitution_pattern',
'      , p_modifier      => ''i''',
'      , p_subexpression => ''1''',
'      )',
'    ;',
'    if l_f4a_substitutions is not null then',
'      for i in 1..l_f4a_substitutions.count',
'      loop',
'        case upper(l_f4a_substitutions(i))',
'          when flow_constants_pkg.gc_substitution_process_id then',
'            pio_string := replace( pio_string, get_replacement_pattern( l_f4a_substitutions(i) ), pi_prcs_id );',
'          when flow_constants_pkg.gc_substitution_subflow_id then',
'            pio_string := replace( pio_string, get_replacement_pattern( l_f4a_substitutions(i) ), pi_sbfl_id );',
'          when flow_constants_pkg.gc_substitution_step_key then',
'            pio_string := replace( pio_string, get_replacement_pattern( l_f4a_substitutions(i) ), pi_step_key );',
'          else',
'            -- own implementation of get_vc_var',
'            -- Reason:',
'            -- The general implementation immediately adds to APEX error stack',
'            begin',
'              select prov.prov_var_vc2',
'                into l_replacement_value',
'                from flow_process_variables prov',
'               where prov.prov_prcs_id  = pi_prcs_id',
'                 and upper(prov.prov_var_name) = upper(l_f4a_substitutions(i))',
'              ;',
'              pio_string := replace( pio_string, get_replacement_pattern( l_f4a_substitutions(i) ), l_replacement_value );',
'            exception',
'              when no_data_found then',
'                -- no data found will be ignored',
'                -- do like APEX and leave original in place',
'                null;',
'            end;',
'        end case;',
'      end loop;',
'    end if;',
'  end do_substitution;',
'',
'end flow_process_vars;',
'/',
'',
'create or replace package body flow_expressions',
'as ',
'  ',
'  type t_expr_rec is record',
'  ( expr_id             flow_object_expressions.expr_id%type',
'  , expr_objt_id        flow_object_expressions.expr_objt_id%type',
'  , expr_set            flow_object_expressions.expr_set%type',
'  , expr_order          flow_object_expressions.expr_order%type',
'  , expr_var_name       flow_object_expressions.expr_var_name%type',
'  , expr_var_type       flow_object_expressions.expr_var_type%type',
'  , expr_type           flow_object_expressions.expr_type%type',
'  , expr_expression     flow_object_expressions.expr_expression%type',
'  , expr_objt_bpmn_id   flow_objects.objt_bpmn_id%type',
'  );',
'',
'  type t_expr_set is table of t_expr_rec;',
'',
'',
'  function get_expression_set',
'  ( pi_objt_id      flow_objects.objt_id%type',
'  , pi_set          flow_object_expressions.expr_set%type',
'  ) return t_expr_set',
'  as',
'    l_expressions   t_expr_set;',
'  begin',
'    select expr.expr_id',
'         , expr.expr_objt_id',
'         , expr.expr_set',
'         , expr.expr_order',
'         , expr.expr_var_name',
'         , expr.expr_var_type',
'         , expr.expr_type',
'         , expr.expr_expression',
'         , objt.objt_bpmn_id as expr_objt_bpmn_id',
'    bulk collect into l_expressions',
'      from flow_object_expressions expr',
'      join flow_objects objt',
'        on objt.objt_id = expr.expr_objt_id',
'     where expr.expr_objt_id = pi_objt_id',
'       and expr.expr_set = pi_set',
'     order by expr.expr_order asc',
'    ;',
'    return l_expressions;',
'  end get_expression_set;',
'',
'  /**********************************************************************',
'  **',
'  ** Process various expression types',
'  **',
'  ***********************************************************************',
'  */',
'',
'  procedure set_static',
'  ( pi_prcs_id      flow_processes.prcs_id%type',
'  , pi_sbfl_id      flow_subflows.sbfl_id%type',
'  , pi_expression   t_expr_rec',
'  )',
'  as ',
'    l_expression_text   flow_object_expressions.expr_expression%type;',
'  begin',
'    apex_debug.enter',
'    ( ''flow_expressions.set_static''',
'    , ''expr_var_name'', pi_expression.expr_var_name',
'    , ''pi_expression.expr_var_type'', pi_expression.expr_var_type',
'    , ''pi_expression.expr_expression'' , pi_expression.expr_expression',
'    );',
'',
'    l_expression_text := pi_expression.expr_expression;',
'    -- substitute any F4A Process Variables',
'    flow_process_vars.do_substitution',
'    ( pi_prcs_id => pi_prcs_id',
'    , pi_sbfl_id => pi_sbfl_id',
'    , pio_string => l_expression_text',
'    );',
'    case pi_expression.expr_var_type ',
'    when flow_constants_pkg.gc_prov_var_type_varchar2 then',
'        flow_process_vars.set_var ',
'        ( pi_prcs_id        => pi_prcs_id',
'        , pi_var_name       => pi_expression.expr_var_name',
'        , pi_vc2_value      => l_expression_text',
'        , pi_sbfl_id        => pi_sbfl_id',
'        , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'        , pi_expr_set       => pi_expression.expr_set',
'        );',
'    when flow_constants_pkg.gc_prov_var_type_number then',
'        flow_process_vars.set_var ',
'        ( pi_prcs_id        => pi_prcs_id',
'        , pi_var_name       => pi_expression.expr_var_name',
'        , pi_num_value      => l_expression_text',
'        , pi_sbfl_id        => pi_sbfl_id',
'        , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'        , pi_expr_set       => pi_expression.expr_set',
'        );',
'    when flow_constants_pkg.gc_prov_var_type_date then',
'        -- test date is in our required format',
'        begin',
'          if l_expression_text != to_char  ( to_date ( l_expression_text',
'                                                    , flow_constants_pkg.gc_prov_default_date_format )',
'                                          , flow_constants_pkg.gc_prov_default_date_format ) then ',
'          raise e_var_exp_date_format_error;',
'          end if;',
'        exception',
'          when others then',
'            raise e_var_exp_date_format_error;',
'        end;',
'',
'        flow_process_vars.set_var ',
'        ( pi_prcs_id        => pi_prcs_id',
'        , pi_var_name       => pi_expression.expr_var_name',
'        , pi_date_value     => to_date(l_expression_text, flow_constants_pkg.gc_prov_default_date_format)',
'        , pi_sbfl_id        => pi_sbfl_id',
'        , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'        , pi_expr_set       => pi_expression.expr_set',
'        ); ',
'    end case;',
'  exception',
'    when e_var_exp_date_format_error then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_message_key    => ''var_exp_date_format''',
'      , p0 => pi_sbfl_id',
'      , p1 => pi_expression.expr_var_name',
'      , p2 => pi_expression.expr_set',
'      );',
'      -- $F4AMESSAGE ''var_exp_date_format'' || ''Error setting Process Variable %1: Incorrect Date Format (Subflow: %0, Set: %3.)''      ',
'    when others then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_message_key    => ''var_exp_static_general''',
'      , p0 => pi_prcs_id',
'      , p1 => pi_expression.expr_var_name',
'      , p2 => pi_expression.expr_set',
'      );',
'      -- $F4AMESSAGE ''var_exp_static_general'' || ''Error setting %2 process variable %1 in process id %0.  See error in event log.''',
'',
'  end set_static;',
'',
'  procedure set_proc_var',
'  ( pi_prcs_id      flow_processes.prcs_id%type',
'  , pi_sbfl_id      flow_subflows.sbfl_id%type',
'  , pi_expression   t_expr_rec',
'  )',
'  as ',
'  begin',
'    apex_debug.enter',
'    ( ''flow_expressions.set_proc_var''',
'    , ''expr_var_name'', pi_expression.expr_var_name',
'    , ''proc var'' , pi_expression.expr_expression',
'    );',
'    case pi_expression.expr_var_type ',
'    when flow_constants_pkg.gc_prov_var_type_varchar2 then',
'        flow_process_vars.set_var ',
'        ( pi_prcs_id   => pi_prcs_id',
'        , pi_var_name  => pi_expression.expr_var_name',
'        , pi_vc2_value => flow_process_vars.get_var_vc2 ',
'                          ( pi_prcs_id => pi_prcs_id',
'                          , pi_var_name => pi_expression.expr_expression',
'                          )',
'        , pi_sbfl_id        => pi_sbfl_id',
'        , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'        , pi_expr_set       => pi_expression.expr_set',
'        );      ',
'    when flow_constants_pkg.gc_prov_var_type_date then',
'        flow_process_vars.set_var ',
'        ( pi_prcs_id    => pi_prcs_id',
'        , pi_var_name   => pi_expression.expr_var_name',
'        , pi_date_value => flow_process_vars.get_var_date ',
'                           ( pi_prcs_id  => pi_prcs_id',
'                           , pi_var_name => pi_expression.expr_expression',
'                           )',
'        , pi_sbfl_id        => pi_sbfl_id',
'        , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'        , pi_expr_set       => pi_expression.expr_set',
'        );     ',
'    when flow_constants_pkg.gc_prov_var_type_number then',
'        flow_process_vars.set_var ',
'        ( pi_prcs_id      => pi_prcs_id',
'        , pi_var_name     => pi_expression.expr_var_name',
'        , pi_num_value    => flow_process_vars.get_var_num',
'                             ( pi_prcs_id  => pi_prcs_id',
'                             , pi_var_name => pi_expression.expr_expression',
'                             )',
'        , pi_sbfl_id        => pi_sbfl_id',
'        , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'        , pi_expr_set       => pi_expression.expr_set',
'        );    ',
'    when flow_constants_pkg.gc_prov_var_type_clob then',
'        flow_process_vars.set_var ',
'        ( pi_prcs_id    => pi_prcs_id',
'        , pi_var_name   => pi_expression.expr_var_name',
'        , pi_clob_value => flow_process_vars.get_var_clob ',
'                          ( pi_prcs_id  => pi_prcs_id',
'                          , pi_var_name => pi_expression.expr_expression',
'                          )',
'        , pi_sbfl_id        => pi_sbfl_id',
'        , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'        , pi_expr_set       => pi_expression.expr_set',
'        );    ',
'    end case; ',
'  exception',
'    when others then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_message_key    => ''var_exp_static_general''',
'      , p0 => pi_prcs_id',
'      , p1 => pi_expression.expr_var_name',
'      , p2 => pi_expression.expr_set',
'      );',
'      -- $F4AMESSAGE ''var_exp_static_general'' || ''Error setting %2 process variable %1 in process id %0.  See error in event log.''',
'        ',
'  end set_proc_var;',
'',
'  procedure set_sql',
'  ( pi_prcs_id      flow_processes.prcs_id%type',
'  , pi_expression   t_expr_rec',
'  , pi_sbfl_id      flow_subflows.sbfl_id%type',
'  )',
'  as ',
'    l_sql_text      flow_object_expressions.expr_expression%type;',
'    l_result_vc2    flow_process_variables.prov_var_vc2%type;',
'    l_result_date   flow_process_variables.prov_var_date%type;',
'    l_result_num    flow_process_variables.prov_var_num%type;',
'  begin',
'      apex_debug.enter',
'    ( ''flow_expressions.set_sql''',
'    , ''expr_var_name'', pi_expression.expr_var_name',
'    , ''sql text'' , pi_expression.expr_expression',
'    );',
'',
'    l_sql_text := pi_expression.expr_expression;',
'    -- substitute any F4A Process Variables',
'    flow_process_vars.do_substitution',
'    ( pi_prcs_id => pi_prcs_id',
'    , pi_sbfl_id => null',
'    , pio_string => l_sql_text',
'    );',
'    case pi_expression.expr_var_type ',
'    when flow_constants_pkg.gc_prov_var_type_varchar2 then',
'        begin',
'        execute immediate l_sql_text ',
'                    into l_result_vc2;',
'        exception',
'        when no_data_found then',
'          l_result_vc2 := null;',
'        when too_many_rows then',
'            flow_errors.handle_instance_error',
'            ( pi_prcs_id        => pi_prcs_id',
'            , pi_sbfl_id        => pi_sbfl_id',
'            , pi_message_key    => ''var_exp_sql_too_many_rows''',
'            , p0 => pi_prcs_id',
'            , p1 => pi_expression.expr_var_name',
'            ,'))
);
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
' p2 => pi_expression.expr_set',
'            );',
'            -- $F4AMESSAGE ''var_exp_sql_too_many_rows'' || ''Error setting %2 process variable %1 in process id %0.  Query returns multiple rows.''            ',
'        when others then',
'            apex_debug.error',
'            ( p_message => ''Error setting process variable %s for process id %s. SQLERRM: %s''',
'            , p0        => pi_expression.expr_var_name',
'            , p1        => pi_prcs_id',
'            , p2        => sqlerrm',
'            );',
'',
'            flow_errors.handle_instance_error',
'            ( pi_prcs_id        => pi_prcs_id',
'            , pi_sbfl_id        => pi_sbfl_id',
'            , pi_message_key    => ''var_exp_sql_other''',
'            , p0 => pi_prcs_id',
'            , p1 => pi_expression.expr_var_name',
'            , p2 => pi_expression.expr_set',
'            );',
'            -- $F4AMESSAGE ''var_exp_sql_other'' || ''Error setting %2 process variable %1 in process id %0.  SQL error shown in event log.''               ',
'        end;',
'        flow_process_vars.set_var ',
'        ( pi_prcs_id        => pi_prcs_id',
'        , pi_var_name       => pi_expression.expr_var_name',
'        , pi_vc2_value      => l_result_vc2',
'        , pi_sbfl_id        => pi_sbfl_id',
'        , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'        , pi_expr_set       => pi_expression.expr_set',
'        );',
'    when flow_constants_pkg.gc_prov_var_type_date then',
'        begin',
'        execute immediate l_sql_text ',
'                    into l_result_date;',
'        exception',
'        when no_data_found then',
'            l_result_date := null;',
'        when too_many_rows then',
'            flow_errors.handle_instance_error',
'            ( pi_prcs_id        => pi_prcs_id',
'            , pi_sbfl_id        => pi_sbfl_id',
'            , pi_message_key    => ''var_exp_sql_too_many_rows''',
'            , p0 => pi_prcs_id',
'            , p1 => pi_expression.expr_var_name',
'            , p2 => pi_expression.expr_set',
'            );',
'            -- $F4AMESSAGE ''var_exp_sql_too_many_rows'' || ''Error setting %2 process variable %1 in process id %0.  Query returns multiple rows.''            ',
'        when others then',
'            apex_debug.error',
'            ( p_message => ''Error setting process variable %s for process id %s. SQLERRM: %s''',
'            , p0        => pi_expression.expr_var_name',
'            , p1        => pi_prcs_id',
'            , p2        => sqlerrm',
'            );',
'',
'            flow_errors.handle_instance_error',
'            ( pi_prcs_id        => pi_prcs_id',
'            , pi_sbfl_id        => pi_sbfl_id',
'            , pi_message_key    => ''var_exp_sql_other''',
'            , p0 => pi_prcs_id',
'            , p1 => pi_expression.expr_var_name',
'            , p2 => pi_expression.expr_set',
'            );',
'            -- $F4AMESSAGE ''var_exp_sql_other'' || ''Error setting %2 process variable %1 in process id %0.  SQL error shown in event log.''   ',
'        end;',
'        flow_process_vars.set_var ',
'        ( pi_prcs_id        => pi_prcs_id',
'        , pi_var_name       => pi_expression.expr_var_name',
'        , pi_date_value     => l_result_date',
'        , pi_sbfl_id        => pi_sbfl_id',
'        , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'        , pi_expr_set       => pi_expression.expr_set',
'        );',
'    when flow_constants_pkg.gc_prov_var_type_number then',
'        begin',
'        execute immediate l_sql_text ',
'                    into l_result_num;',
'        exception',
'        when no_data_found then',
'            l_result_num := null;',
'        when too_many_rows then',
'            flow_errors.handle_instance_error',
'            ( pi_prcs_id        => pi_prcs_id',
'            , pi_sbfl_id        => pi_sbfl_id',
'            , pi_message_key    => ''var_exp_sql_too_many_rows''',
'            , p0 => pi_prcs_id',
'            , p1 => pi_expression.expr_var_name',
'            , p2 => pi_expression.expr_set',
'            );',
'            -- $F4AMESSAGE ''var_exp_sql_too_many_rows'' || ''Error setting %2 process variable %1 in process id %0.  Query returns multiple rows.''  ',
'        when others then',
'            apex_debug.error',
'            ( p_message => ''Error setting process variable %0 for process id %1. SQLERRM: %2''',
'            , p0        => pi_expression.expr_var_name',
'            , p1        => pi_prcs_id',
'            , p2        => sqlerrm',
'            );',
'',
'            flow_errors.handle_instance_error',
'            ( pi_prcs_id        => pi_prcs_id',
'            , pi_sbfl_id        => pi_sbfl_id',
'            , pi_message_key    => ''var_exp_sql_other''',
'            , p0 => pi_prcs_id',
'            , p1 => pi_expression.expr_var_name',
'            , p2 => pi_expression.expr_set',
'            );',
'            -- $F4AMESSAGE ''var_exp_sql_other'' || ''Error setting %2 process variable %1 in process id %0.  SQL error shown in event log.''   ',
'        end;',
'        flow_process_vars.set_var ',
'        ( pi_prcs_id        => pi_prcs_id',
'        , pi_var_name       => pi_expression.expr_var_name',
'        , pi_num_value      => l_result_num',
'        , pi_sbfl_id        => pi_sbfl_id',
'        , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'        , pi_expr_set       => pi_expression.expr_set',
'        );',
'    end case;',
'  end set_sql;',
'',
'  procedure set_sql_delimited',
'  ( pi_prcs_id      flow_processes.prcs_id%type',
'  , pi_expression   t_expr_rec',
'  , pi_sbfl_id      flow_subflows.sbfl_id%type',
'  )',
'  as ',
'    l_sql_text        flow_object_expressions.expr_expression%type;',
'    l_result_set_vc2  apex_t_varchar2;',
'    l_result          flow_process_variables.prov_var_vc2%type;',
'  begin',
'      apex_debug.enter',
'    ( ''flow_expressions.set_sql_delimited''',
'    , ''expr_var_name'', pi_expression.expr_var_name',
'    , ''sql text'' , pi_expression.expr_expression',
'    );',
'    l_sql_text := pi_expression.expr_expression;',
'    -- substitute any F4A Process Variables',
'    flow_process_vars.do_substitution',
'    ( pi_prcs_id => pi_prcs_id',
'    , pi_sbfl_id => pi_sbfl_id',
'    , pio_string => l_sql_text',
'    );',
'    begin',
'        execute immediate l_sql_text ',
'        bulk collect into  l_result_set_vc2;',
'    exception',
'    when no_data_found then',
'          l_result_set_vc2 := null;',
'    when others then',
'        apex_debug.error',
'        ( p_message => ''Error setting process variable %s for process id %s. SQLERRM: %s''',
'        , p0        => pi_expression.expr_var_name',
'        , p1        => pi_prcs_id',
'        , p2        => sqlerrm',
'        );',
'        flow_errors.handle_instance_error',
'        ( pi_prcs_id        => pi_prcs_id',
'        , pi_sbfl_id        => pi_sbfl_id',
'        , pi_message_key    => ''var_exp_sql_other''',
'        , p0 => pi_prcs_id',
'        , p1 => pi_expression.expr_var_name',
'        , p2 => pi_expression.expr_set',
'        );',
'        -- $F4AMESSAGE ''var_exp_sql_other'' || ''Error setting %2 process variable %1 in process id %0.  SQL error shown in event log.''   ',
'    end;',
'    -- create delimited string output',
'    begin ',
'        l_result := apex_string.join',
'        ( p_table => l_result_set_vc2',
'        , p_sep => '':''',
'        );',
'    exception',
'    when others then',
'        apex_debug.error',
'        ( p_message => ''Error setting process variable %s for process id %s. SQLERRM: %s''',
'        , p0        => pi_expression.expr_var_name',
'        , p1        => pi_prcs_id',
'        , p2        => sqlerrm',
'        );',
'        flow_errors.handle_instance_error',
'        ( pi_prcs_id        => pi_prcs_id',
'        , pi_sbfl_id        => pi_sbfl_id',
'        , pi_message_key    => ''var_exp_sql_other''',
'        , p0 => pi_sbfl_id',
'        , p1 => pi_expression.expr_var_name',
'        , p2 => pi_expression.expr_set',
'        );',
'        -- $F4AMESSAGE ''var_exp_sql_other'' || ''Error setting %2 process variable %1 in process id %0.  SQL error shown in event log.''',
'    end;',
'    apex_debug.message(p_message => ''Delimited String created %s'', p0 => l_result, p_level => 3);',
'    -- set proc variable',
'    flow_process_vars.set_var ',
'    ( pi_prcs_id        => pi_prcs_id',
'    , pi_var_name       => pi_expression.expr_var_name',
'    , pi_vc2_value      => l_result',
'    , pi_sbfl_id        => pi_sbfl_id',
'    , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'    , pi_expr_set       => pi_expression.expr_set    ',
'    );',
'  end set_sql_delimited;',
'',
'  procedure set_plsql_expression         ',
'  ( pi_prcs_id      flow_processes.prcs_id%type',
'  , pi_expression   t_expr_rec',
'  , pi_sbfl_id      flow_subflows.sbfl_id%type',
'  )',
'  as ',
'    l_result_vc2    flow_process_variables.prov_var_vc2%type;',
'    l_result_date   flow_process_variables.prov_var_date%type;',
'    l_result_num    flow_process_variables.prov_var_num%type;',
'  begin',
'    apex_debug.enter',
'    ( ''flow_expressions.set_plsql_expression''',
'    , ''expr_var_name'', pi_expression.expr_var_name',
'    , ''plsql expression'' , pi_expression.expr_expression',
'    );',
'    -- evaluate the expression',
'    l_result_vc2 := apex_plugin_util.get_plsql_expression_result ',
'                    ( p_plsql_expression => pi_expression.expr_expression',
'                    );',
'    case pi_expression.expr_var_type ',
'    when flow_constants_pkg.gc_prov_var_type_varchar2 then',
'',
'      flow_process_vars.set_var ',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_var_name       => pi_expression.expr_var_name',
'      , pi_vc2_value      => l_result_vc2',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'      , pi_expr_set       => pi_expression.expr_set',
'      );',
'    when flow_constants_pkg.gc_prov_var_type_date then',
'      -- test date value returned using our specified format',
'      if l_result_vc2 != to_char  ( to_date ( l_result_vc2 ',
'                                            , flow_constants_pkg.gc_prov_default_date_format )',
'                                  , flow_constants_pkg.gc_prov_default_date_format ) then ',
'         raise e_var_exp_date_format_error;',
'      end if;',
'      flow_process_vars.set_var ',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_var_name       => pi_expression.expr_var_name',
'      , pi_date_value     => to_date(l_result_vc2,flow_constants_pkg.gc_prov_default_date_format)',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'      , pi_expr_set       => pi_expression.expr_set',
'      );',
'    when flow_constants_pkg.gc_prov_var_type_number then',
'      flow_process_vars.set_var ',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_var_name       => pi_expression.expr_var_name',
'      , pi_num_value      => to_number(l_result_vc2)',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'      , pi_expr_set       => pi_expression.expr_set',
'      ); ',
'    else',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_message_key    => ''var_exp_datatype''',
'      , p0 => pi_expression.expr_var_name',
'      );',
'      -- $F4AMESSAGE ''var_exp_datatype'' || ''Error setting process variable.  Incorrect datatype for variable %0.  SQL error shown in debug output.''  ',
'    end case;',
'  exception',
'    when e_var_exp_date_format_error then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_message_key    => ''var_exp_date_format''',
'      , p0 => pi_sbfl_id',
'      , p1 => pi_expression.expr_var_name',
'      , p2 => pi_expression.expr_set',
'      );',
'      -- $F4AMESSAGE ''var_exp_date_format'' || ''Error setting Process Variable %1: Incorrect Date Format (Subflow: %0, Set: %3.)''      ',
'    when others then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_message_key    => ''var_exp_plsql_error''',
'      , p0 => pi_sbfl_id',
'      , p1 => pi_expression.expr_var_name',
'      , p2 => pi_expression.expr_set',
'      );',
'      -- $F4AMESSAGE ''var_exp_plsql_error'' || ''Subflow : %0 Error in %2 expression for Variable : %1''',
'  end set_plsql_expression;  ',
'',
'  procedure set_plsql_function        ',
'  ( pi_prcs_id      flow_processes.prcs_id%type',
'  , pi_expression   t_expr_rec',
'  , pi_sbfl_id      flow_subflows.sbfl_id%type',
'  )',
'  as ',
'    l_result_vc2    flow_process_variables.prov_var_vc2%type;',
'    l_result_date   flow_process_variables.prov_var_date%type;',
'    l_result_num    flow_process_variables.prov_var_num%type;',
'  begin',
'    apex_debug.enter',
'    ( ''flow_expressions.set_plsql_function''',
'    , ''expr_var_name'', pi_expression.expr_var_name',
'    , ''plsql function body'' , pi_expression.expr_expression',
'    );',
'',
'    -- evaluate the function',
'    l_result_vc2 := apex_plugin_util.get_plsql_function_result ',
'                      ( p_plsql_function => pi_expression.expr_expression',
'                      );',
'    case pi_expression.expr_var_type ',
'    when flow_constants_pkg.gc_prov_var_type_varchar2 then',
'      flow_process_vars.set_var ',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_var_name       => pi_expression.expr_var_name',
'      , pi_vc2_value      => l_result_vc2',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'      , pi_expr_set       => pi_expression.expr_set',
'      );',
'    when flow_constants_pkg.gc_prov_var_type_date then',
'      -- a date value must be returned using our specified format',
'      -- add a test that format is good?',
'      begin',
'        if l_result_vc2 != to_char  ( to_date ( l_result_vc2 ',
'                                              , flow_constants_pkg.gc_prov_default_date_format )',
'                                    , flow_constants_pkg.gc_prov_default_date_format ) then ',
'        raise e_var_exp_date_format_error;',
'        end if;',
'      exception',
'        when others then',
'          raise e_var_exp_date_format_error;',
'      end;',
'',
'      flow_process_vars.set_var ',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_var_name       => pi_expression.expr_var_name',
'      , pi_date_value     => to_date(l_result_vc2, flow_constants_pkg.gc_prov_default_date_format)',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'      , pi_expr_set       => pi_expression.expr_set',
'      );',
'    when flow_constants_pkg.gc_prov_var_type_number then',
'      flow_process_vars.set_var ',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_var_name       => pi_expression.expr_var_name',
'      , pi_num_value      => to_number(l_result_vc2)',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_objt_bpmn_id   => pi_expression.expr_objt_bpmn_id',
'      , pi_expr_set       => pi_expression.expr_set ',
'      ); ',
'    else',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_message_key    => ''var_exp_datatype''',
'      , p0 => pi_expression.expr_var_name',
'      );',
'      -- $F4AMESSAGE ''var_exp_datatype'' || ''Error setting process variable.  Incorrect datatype for variable %0.  SQL error shown in debug output.''  ',
'    end case;',
'  exception',
'    when e_var_exp_date_format_error then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_message_key    => ''var_exp_date_format''',
'      , p0 => pi_sbfl_id',
'      , p1 => pi_expression.expr_var_name',
'      , p2 => pi_expression.expr_set',
'      );',
'      -- $F4AMESSAGE ''var_exp_date_format'' || ''Error setting Process Variable %1: Incorrect Date Format (Subflow: %0, Set: %3.)''    ',
'    when others then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_message_key    => ''var_exp_plsql_error''',
'      , p0 => pi_sbfl_id',
'      , p1 => pi_expression.expr_var_name',
'      , p2 => pi_expression.expr_set',
'      );',
'      -- $F4AMESSAGE ''var_exp_plsql_error'' || ''Subflow : %0 Error in %2 expression for Variable : %1''',
'  end set_plsql_function;',
'',
'  /**********************************************************************',
'  **',
'  ** Main Procedure',
'  **',
'  ***********************************************************************',
'  */',
'',
'  procedure process_expressions',
'  ( pi_objt_id      flow_objects.objt_id%type',
'  , pi_set          flow_object_expressions.expr_set%type',
'  , pi_prcs_id      flow_processes.prcs_id%type',
'  , pi_sbfl_id      flow_subflows.sbfl_id%type',
'  )',
'  as',
'    l_expressions   t_expr_set;',
'  begin',
'    apex_debug.enter',
'    ( ''process_expressions''',
'    , ''pi_objt_id'', pi_objt_id',
'    , ''pi_set'' , pi_set',
'    );',
'',
'    l_expressions := get_expression_set',
'    ( pi_objt_id => pi_objt_id',
'    , pi_set     => pi_set',
'    );',
'    if l_expressions.count > 0 then ',
'      -- set context',
'      flow_globals.set_context',
'      ( pi_prcs_id => pi_prcs_id',
'      , pi_sbfl_id => pi_sbfl_id',
'      );',
'      apex_debug.trace ',
'      ( p_message => ''l_expressions.count: %0''',
'      , p0        => l_expressions.count',
'      );',
'      -- step through expressions',
'      for i in 1..l_expressions.count loop',
'        -- process expression',
'        case l_expressions(i).expr_type',
'          when flow_constants_pkg.gc_expr_type_static then',
'            set_static ',
'            ( pi_prcs_id      => pi_prcs_id',
'            , pi_sbfl_id      => pi_sbfl_id',
'            , pi_expression   => l_expressions(i)',
'            );',
'          when flow_constants_pkg.gc_expr_type_proc_var then',
'            set_proc_var',
'            ( pi_prcs_id    => pi_prcs_id',
'            , pi_sbfl_id    => pi_sbfl_id',
'            , pi_expression => l_expressions(i));',
'          when flow_constants_pkg.gc_expr_type_sql  then',
'            set_sql',
'            ( pi_prcs_id => pi_prcs_id',
'            , pi_expression => l_expressions(i)',
'            , pi_sbfl_id => pi_sbfl_id);',
'          when flow_constants_pkg.gc_expr_type_sql_delimited_list  then',
'            set_sql_delimited',
'            ( pi_prcs_id => pi_prcs_id',
'            , pi_expression => l_expressions(i)',
'            , pi_sbfl_id => pi_sbfl_id);     ',
'          when flow_constants_pkg.gc_expr_type_plsql_expression then',
'            set_plsql_expression',
'            ( pi_prcs_id => pi_prcs_id',
'            , pi_expression => l_expressions(i)',
'            , pi_sbfl_id => pi_sbfl_id); ',
'          when flow_constants_pkg.gc_expr_type_plsql_function_body then',
'            set_plsql_function',
'            ( pi_prcs_id => pi_prcs_id',
'            , pi_expression => l_expressions(i)',
'            , pi_sbfl_id => pi_sbfl_id);  ',
'          else',
'              null;',
'        end case;',
'      end loop;',
'    end if;',
'  end process_expressions;',
'',
'  -- overloaded process_expressions that accepts a objt_bpmn_id rather than an objt_id',
'  procedure process_expressions',
'  ( pi_objt_bpmn_id flow_objects.objt_bpmn_id%type',
'  , pi_set          flow_object_expressions.expr_set%type',
'  , pi_prcs_id      flow_processes.prcs_id%type',
'  , pi_sbfl_id      flow_subflows.sbfl_id%type',
'  )',
'  is ',
'    l_objt_id       flow_objects.objt_id%type;',
'  begin ',
'    apex_debug.enter',
'    ( ''process_expressions''',
'    , ''pi_objt_bpmn_id'', pi_objt_bpmn_id',
'    , ''pi_set'' , pi_set',
'    );',
'    -- look up the objt_id',
'    select objt.objt_id',
'      into l_objt_id',
'      from flow_objects objt',
'      join flow_subflows sbfl ',
'        on sbfl.sbfl_dgrm_id = objt.objt_dgrm_id',
'     where sbfl.sbfl_id = pi_sbfl_id',
'       and objt.objt_bpmn_id = pi_objt_bpmn_id',
'    ;',
'    process_expressions',
'    ( pi_objt_id      => l_objt_id',
'    , pi_set          => pi_set',
'    , pi_prcs_id      => pi_prcs_id',
'    , pi_sbfl_id      => pi_sbfl_id',
'    );',
'  exception',
'    when no_data_found then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_message_key    => ''var_exp_object_not_found''',
'      , p0 => pi_objt_bpmn_id',
'      );',
'      -- $F4AMESSAGE ''var_exp_object_not_found'' || ''Internal error looking up object %0 in process_expressions.  SQL error shown in debug output.''  ',
'  end process_expressions; ',
'  ',
'end flow_expressions;',
'/',
'',
'create or replace package body flow_reservations',
'as ',
'  lock_timeout exception;',
'  pragma exception_init (lock_timeout, -3006);',
'',
'  procedure reserve_step',
'    ( p_process_id         in flow_processes.prcs_id%type',
'    , p_subflow_id         in flow_subflows.sbfl_id%type',
'    , p_step_key           in flow_subflows.sbfl_step_key%type ',
'    , p_reservation        in flow_subflows.sbfl_reservation%type ',
'    , p_called_internally  in boolean default false',
'    )',
'  is',
'    l_existing_reservation  flow_subflows.sbfl_reservation%type;',
'    e_reserved_by_other     exception;',
'    e_reserved_by_same      exception;',
'    l_step_key_required     flow_subflows.sbfl_step_key%type;',
'  begin',
'    apex_debug.enter',
'    (''reserve_step''',
'    , ''Subflow '', p_subflow_id',
'    , ''Process '', p_process_id',
'    , ''Step Key'', p_step_key',
'    , ''Reservation'', p_reservation',
'    );',
'',
'    -- check step is not already reserved and lock the subflow',
'    select sbfl_reservation',
'         , sbfl_step_key',
'      into l_existing_reservation',
'         , l_step_key_required',
'      from flow_subflows sbfl ',
'     where sbfl.sbfl_id = p_subflow_id',
'       and sbfl.sbfl_prcs_id = p_process_id',
'       for update of sbfl_reservation wait 2',
'    ;',
'    -- first check the step key',
'    if flow_engine_util.step_key_valid( pi_prcs_id  => p_process_id',
'                                      , pi_sbfl_id  => p_subflow_id',
'                                      , pi_step_key_supplied  => p_step_key',
'                                      , pi_step_key_required => l_step_key_required',
'                                      ) ',
'    then ',
'      -- step key valid',
'      if l_existing_reservation is not null then',
'        if p_reservation = l_existing_reservation then ',
'          -- step already reserved by required reservation',
'          raise e_reserved_by_same;',
'        else ',
'          raise e_reserved_by_other;',
'        end if;',
'      end if;',
'      -- place the reservation',
'      update flow_subflows sbfl',
'         set sbfl_reservation = p_reservation',
'       where sbfl_prcs_id = p_process_id',
'         and sbfl_id = p_subflow_id',
'      ;',
'      -- commit reservation if this is an external call',
'      if not p_called_internally then ',
'        commit;',
'      end if;',
'    end if;',
'',
'  exception',
'    when no_data_found then',
'        flow_errors.handle_general_error',
'        ( pi_message_key    => ''reservation-failed-not-found''',
'        , p0 => p_subflow_id         ',
'	      , p1 => p_process_id',
'        , p2 => p_reservation',
'        );',
'        -- $F4AMESSAGE ''reservation-failed-not-found'' || ''Reservation for %2 unsuccessful.  Subflow %0 in Process %1 not found.''',
'    when e_reserved_by_other then',
'        flow_errors.handle_general_error',
'        ( pi_message_key    => ''reservation-by-other_user''',
'        , p0 => p_reservation',
'        , p1 => l_existing_reservation',
'        );',
'        -- $F4AMESSAGE ''reservation-by-other_user'' || ''Reservation for %0 unsuccessful.  Step already reserved by another user (%1).''           ',
'    when e_reserved_by_same then',
'        flow_errors.handle_general_error',
'        ( pi_message_key    => ''reservation-already-placed''',
'        );',
'        -- $F4AMESSAGE ''reservation-already-placed'' || ''Reservation already placed on next task for you.''',
'    when lock_timeout then',
'        flow_errors.handle_general_error',
'        ( pi_message_key    => ''reservation-lock-timeout''',
'        );',
'        -- $F4AMESSAGE ''reservation-lock-timeout'' || ''Subflow currently locked (not reserved) by another user.  Try your reservation again later.''     ',
'  end reserve_step;',
'',
'  procedure release_step',
'    ( p_process_id         in flow_processes.prcs_id%type',
'    , p_subflow_id         in flow_subflows.sbfl_id%type',
'    , p_step_key           in flow_subflows.sbfl_step_key%type default null',
'    , p_called_internally  in boolean default false',
'    )',
'  is',
'    l_existing_reservation      flow_subflows.sbfl_reservation%type;',
'    l_step_key_required         flow_subflows.sbfl_step_key%type;',
'    e_reserved_wrong_step_key   exception;',
'  begin',
'    apex_debug.enter',
'    ( ''release_step''',
'    , ''Subflow '', p_subflow_id',
'    , ''Process '', p_process_id ',
'    , ''Step Key'', p_step_key',
'    );',
'    -- subflow should already be locked when calling internally',
'    if not p_called_internally then ',
'      -- lock  subflow if called externally',
'      select sbfl_reservation',
'           , sbfl_step_key',
'        into l_existing_reservation',
'           , l_step_key_required ',
'        from flow_subflows sbfl ',
'       where sbfl.sbfl_id = p_subflow_id',
'         and sbfl.sbfl_prcs_id = p_process_id',
'         for update of sbfl_reservation wait 2',
'      ;',
'      -- check step key is valid (internal calls have already checked this so no need to check again)',
'      if not flow_engine_util.step_key_valid( pi_prcs_id  => p_process_id',
'                                            , pi_sbfl_id  => p_subflow_id',
'                                            , pi_step_key_supplied  => p_step_key',
'                                            , pi_step_key_required => l_step_key_required',
'                                            ) ',
'      then ',
'        raise e_reserved_wrong_step_key;',
'      end if;',
'',
'    end if;',
'    -- release the reservation',
'    update flow_subflows sbfl',
'      set sbfl_reservation = null',
'    where sbfl_prcs_id = p_process_id',
'      and sbfl_id = p_subflow_id',
'    ;',
'    -- commit reservation if this is an external call',
'    if not p_called_internally then ',
'      commit;',
'    end if;',
'',
'  exception',
'    when no_data_found then',
'      flow_errors.handle_general_error',
'      ( pi_message_key    => ''reservation-release-not-found''',
'      , p0 => p_subflow_id',
'      , p1 => p_process_id',
'      );',
'      -- $F4AMESSAGE ''reservation-release-not-found'' || ''Reservation release unsuccessful.  Subflow %0 in Process %1 not found.''',
'    when lock_timeout then',
'      flow_errors.handle_general_error',
'      ( pi_message_key    => ''reservation-lock-timeout''',
'      , p0 => p_subflow_id',
'      , p1 => p_process_id',
'      );',
'      -- $F4AMESSAGE ''reservation-lock-timeout'' || ''Subflow currently locked (not reserved) by another user.  Try your reservation again later.''',
'    when e_reserved_wrong_step_key then',
'      flow_errors.handle_general_error',
'      ( pi_message_key    => ''reservation-incorrect-step-key''',
'      , p0 => p_subflow_id',
'      , p1 => p_process_id',
'      );      ',
'      -- $F4AMESSAGE ''reservation-incorrect-step-key'' || ''Task is no longer current.  Please refresh your Inbox.''',
'  end release_step;',
'',
'end flow_reservations;',
'/',
'',
'create or replace package body flow_engine_util',
'as ',
'',
'  lock_timeout exception;',
'  pragma exception_init (lock_timeout, -3006);',
'',
'  g_step_keys_enforced    boolean;',
'',
'  function get_dgrm_id',
'  (',
'    p_prcs_id in flow_processes.prcs_id%type',
'  ) return flow_processes.prcs_dgrm_id%type',
'  as',
'    l_prcs_dgrm_id flow_processes.prcs_dgrm_id%type;',
'  begin',
'    ',
'    select prcs.prcs_dgrm_id',
'      into l_prcs_dgrm_id',
'      from flow_processes prcs',
'     where prcs.prcs_id = p_prcs_id',
'    ;',
'    ',
'    return l_prcs_dgrm_id;',
'    ',
'  end get_dgrm_id;',
'',
'  function get_config_value',
'  ( ',
'    p_config_key    in flow_configuration.cfig_key%type',
'  , p_default_value in flow_configuration.cfig_value%type',
'  ) return flow_configuration.cfig_value%type',
'  as  ',
'    l_config_value   flow_configuration.cfig_value%type;',
'  begin ',
'    select cfig.cfig_value',
'      into l_config_value',
'      from flow_configuration cfig',
'     where cfig.cfig_key = p_config_key',
'    ;',
'    return l_config_value;',
'  exception ',
'    when no_data_found then ',
'      return p_default_value;',
'  end get_config_value;',
'',
'  procedure set_config_value',
'  (',
'    p_config_key in flow_configuration.cfig_key%type',
'  , p_value      in flow_configuration.cfig_value%type)',
'  as',
'  begin',
'    update flow_configuration',
'       set cfig_value = p_value',
'     where cfig_key = p_config_key;',
'  end set_config_value;',
'',
'  function step_key',
'  ( pi_sbfl_id        in flow_subflows.sbfl_id%type',
'  , pi_current        in flow_subflows.sbfl_current%type',
'  , pi_became_current in flow_subflows.sbfl_became_current%type',
'  ) return flow_subflows.sbfl_step_key%type',
'  is',
'  begin',
'  /*  return substr( apex_util.get_hash ( apex_t_varchar2( pi_sbfl_id',
'                                                       , pi_current',
'                                                       , pi_became_current',
'                                                       ) ',
'                                      )',
'                  , 1 , 10 ',
'                  );*/',
'      -- alternate step_key generator which should be faster...',
'      return sys.dbms_random.string(''A'', 10);',
'  end step_key;',
'',
'  function step_key_valid',
'  ( pi_prcs_id              in flow_processes.prcs_id%type',
'  , pi_sbfl_id              in flow_subflows.sbfl_id%type',
'  , pi_step_key_supplied    in flow_subflows.sbfl_step_key%type',
'  , pi_step_key_required    in flow_subflows.sbfl_step_key%type default null',
'  ) return boolean',
'  is ',
'    l_step_key_required   flow_subflows.sbfl_step_key%type := pi_step_key_required;',
'  begin',
'    if pi_step_key_required is null then',
'',
'      select sbfl.sbfl_step_key',
'        into l_step_key_required',
'        from flow_subflows sbfl',
'       where sbfl.sbfl_id = pi_sbfl_id',
'         and sbfl.sbfl_prcs_id = pi_prcs_id',
'      ;',
'    end if;',
'',
'    apex_debug.info ',
'    ( p_message => ''Step Key Required: %0  Step Key Supplied: %1''',
'    , p0 => l_step_key_required',
'    , p1 => pi_step_key_supplied',
'    );',
'',
'    if pi_step_key_supplied = l_step_key_required then',
'      return true;',
'    elsif (pi_step_key_supplied is null ',
'           and not g_step_keys_enforced) then',
'      return true;',
'    else',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id     => pi_prcs_id',
'      , pi_sbfl_id     => pi_sbfl_id',
'      , pi_message_key => ''step-key-incorrect''',
'      , p0 => nvl(pi_step_key_supplied, ''"null"'')',
'      , p1 => l_step_key_required',
'      );',
'      -- $F4AMESSAGE ''step-key-incorrect'' || ''This Process Step has already occurred.  (Incorrect step key %0 supplied while exopecting step key %1).'' ',
'      return false;',
'    end if;',
'  end step_key_valid;',
'',
'  function check_subflow_exists',
'  ( ',
'    p_process_id in flow_processes.prcs_id%type',
'  , p_subflow_id in flow_subflows.sbfl_id%type',
'  ) return boolean',
'  is',
'    l_cnt number;',
'  begin',
'    select count(*)',
'      into l_cnt',
'      from flow_subflows sbfl',
'     where sbfl.sbfl_id = p_subflow_id',
'       and sbfl.sbfl_prcs_id = p_process_id',
'    ;',
'    return ( l_cnt = 1 );',
'  end check_subflow_exists'))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
';',
'',
'',
'function get_subprocess_parent_subflow',
'  ( p_process_id in flow_processes.prcs_id%type',
'  , p_subflow_id in flow_subflows.sbfl_id%type',
'  , p_current    in flow_objects.objt_bpmn_id%type -- an object in the subprocess',
'  ) return flow_types_pkg.t_subflow_context',
'  is',
'    l_parent_subflow          flow_types_pkg.t_subflow_context;',
'    l_parent_subproc_activity flow_objects.objt_bpmn_id%type;',
'    l_dgrm_id                 flow_diagrams.dgrm_id%type;',
'  begin',
'',
'    l_dgrm_id := flow_engine_util.get_dgrm_id( p_prcs_id => p_process_id );  ',
'',
'    -- get parent bpmn:subProcess object',
'    select par_objt.objt_bpmn_id',
'      into l_parent_subproc_activity',
'      from flow_objects objt',
'      join flow_objects par_objt',
'        on par_objt.objt_id = objt.objt_objt_id',
'     where objt.objt_bpmn_id = p_current',
'       and objt.objt_dgrm_id = l_dgrm_id',
'    ;',
'    -- try to get parent subflow',
'    begin',
'      select sbfl.sbfl_id',
'           , sbfl.sbfl_step_key',
'        into l_parent_subflow.sbfl_id',
'           , l_parent_subflow.step_key',
'        from flow_subflows sbfl',
'       where sbfl.sbfl_current = l_parent_subproc_activity',
'         and sbfl.sbfl_status =  flow_constants_pkg.gc_sbfl_status_in_subprocess',
'         and sbfl.sbfl_prcs_id = p_process_id',
'      ;',
'    exception',
'      when no_data_found then',
'        -- no subflow found running the parent process ',
'        l_parent_subflow := null;',
'    end;',
'    return l_parent_subflow;',
'  end get_subprocess_parent_subflow;',
'',
'procedure get_number_of_connections ',
'    ( pi_dgrm_id                  in flow_diagrams.dgrm_id%type',
'    , pi_target_objt_id           in flow_connections.conn_tgt_objt_id%type',
'    , pi_conn_type                in flow_connections.conn_tag_name%type  ',
'    , po_num_forward_connections  out number',
'    , po_num_back_connections     out number',
'    )',
'  is ',
'  begin   ',
'    select count(*)',
'      into po_num_back_connections',
'      from flow_connections conn ',
'     where conn.conn_tgt_objt_id = pi_target_objt_id',
'       and conn.conn_tag_name = pi_conn_type',
'       and conn.conn_dgrm_id = pi_dgrm_id',
'    ;',
'    select count(*)',
'      into po_num_forward_connections',
'      from flow_connections conn ',
'     where conn.conn_src_objt_id = pi_target_objt_id',
'       and conn.conn_tag_name = pi_conn_type',
'       and conn.conn_dgrm_id = pi_dgrm_id',
'    ;',
'  end get_number_of_connections;',
'',
'  function get_subflow_info',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_lock_subflow  in boolean default false',
'  , p_lock_process  in boolean default false',
'  ) return flow_subflows%rowtype',
'  is ',
'    l_sbfl_rec          flow_subflows%rowtype;',
'    l_prcs_check_id     flow_processes.prcs_id%type;',
'  begin',
'    begin ',
'      if p_lock_process then',
'        begin',
'          select prcs.prcs_id',
'            into l_prcs_check_id',
'            from flow_processes prcs',
'          where prcs.prcs_id = p_process_id',
'          ;',
'        exception',
'          when no_data_found then',
'            flow_errors.handle_instance_error',
'            ( pi_prcs_id     => p_process_id',
'            , pi_sbfl_id     => p_subflow_id',
'            , pi_message_key => ''engine-util-prcs-not-found''',
'            , p0 => p_process_id',
'            );',
'            -- $F4AMESSAGE ''engine-util-prcs-not-found'' || ''Application Error: Process ID %0 not found).''  ',
'        end;',
'      end if;',
'      if p_lock_subflow then ',
'        select *',
'        into l_sbfl_rec',
'        from flow_subflows sbfl',
'        where sbfl.sbfl_prcs_id = p_process_id',
'        and sbfl.sbfl_id = p_subflow_id',
'        for update wait 2',
'        ;',
'      else ',
'        select *',
'        into l_sbfl_rec',
'        from flow_subflows sbfl',
'        where sbfl.sbfl_prcs_id = p_process_id',
'        and sbfl.sbfl_id = p_subflow_id',
'        ;',
'      end if;',
'    exception',
'      when no_data_found then',
'        -- check if subflow valid in process',
'        select sbfl.sbfl_prcs_id',
'          into l_prcs_check_id',
'          from flow_subflows sbfl',
'         where sbfl.sbfl_id = p_subflow_id',
'         ;',
'        if l_prcs_check_id != p_process_id then',
'          flow_errors.handle_instance_error',
'          ( pi_prcs_id     => p_process_id',
'          , pi_sbfl_id     => p_subflow_id',
'          , pi_message_key => ''engine-util-sbfl-not-in-prcs''',
'          , p0 => p_subflow_id',
'          , p1 => p_process_id',
'          );',
'          -- $F4AMESSAGE ''engine-util-sbfl-not-in-prcs'' || ''Application Error: Subflow ID supplied ( %0 ) exists but is not child of Process ID Supplied ( %1 ).''  ',
'        end if;',
'      when lock_timeout then',
'        flow_errors.handle_instance_error',
'        ( pi_prcs_id     => p_process_id',
'        , pi_sbfl_id     => p_subflow_id',
'        , pi_message_key => ''timeout_locking_subflow''',
'        , p0 => p_subflow_id',
'        );',
'        -- $F4AMESSAGE ''timeout_locking_subflow'' || ''Unable to lock subflow %0 as currently locked by another user.  Retry your transaction later.''  ',
'    end;',
'    return l_sbfl_rec;',
'  exception',
'    when no_data_found then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id     => p_process_id',
'      , pi_sbfl_id     => p_subflow_id',
'      , pi_message_key => ''engine-util-sbfl-not-found''',
'      , p0 => p_subflow_id',
'      );',
'      return null;',
'      -- $F4AMESSAGE ''engine-util-sbfl-not-found'' || ''Subflow ID supplied ( %0 ) not found. Check for process events that changed process flow (timeouts, errors, escalations).''  ',
'  end get_subflow_info;',
'',
'  function subflow_start',
'    ( ',
'      p_process_id                in flow_processes.prcs_id%type',
'    , p_parent_subflow            in flow_subflows.sbfl_id%type',
'    , p_starting_object           in flow_objects.objt_bpmn_id%type',
'    , p_current_object            in flow_objects.objt_bpmn_id%type',
'    , p_route                     in flow_subflows.sbfl_route%type',
'    , p_last_completed            in flow_objects.objt_bpmn_id%type',
'    , p_status                    in flow_subflows.sbfl_status%type default flow_constants_pkg.gc_sbfl_status_running',
'    , p_parent_sbfl_proc_level    in flow_subflows.sbfl_process_level%type',
'    , p_new_proc_level            in boolean default false',
'    , p_dgrm_id                   in flow_diagrams.dgrm_id%type',
'    ) return flow_types_pkg.t_subflow_context',
'  is ',
'    l_timestamp           flow_subflows.sbfl_became_current%type;',
'    l_process_level       flow_subflows.sbfl_process_level%type := p_parent_sbfl_proc_level;',
'    l_new_subflow_context flow_types_pkg.t_subflow_context;',
'  begin',
'    apex_debug.enter ',
'    ( ''subflow_start''',
'    , ''Process'', p_process_id',
'    , ''Parent Subflow'', p_parent_subflow ',
'    );',
'    l_timestamp := systimestamp;',
'    insert',
'      into flow_subflows',
'         ( sbfl_prcs_id',
'         , sbfl_sbfl_id',
'         , sbfl_process_level',
'         , sbfl_starting_object',
'         , sbfl_route',
'         , sbfl_last_completed',
'         , sbfl_became_current',
'         , sbfl_current',
'         , sbfl_status',
'         , sbfl_last_update',
'         , sbfl_dgrm_id',
'         )',
'    values',
'         ( p_process_id',
'         , p_parent_subflow',
'         , p_parent_sbfl_proc_level',
'         , p_starting_object',
'         , p_route',
'         , p_last_completed',
'         , l_timestamp',
'         , p_current_object',
'         , p_status',
'         , l_timestamp',
'         , p_dgrm_id',
'         )',
'    returning sbfl_id into l_new_subflow_context.sbfl_id',
'    ;',
'',
'    if p_new_proc_level then',
'      -- starting new subprocess.  Reset sbfl_process_level to new sbfl_id',
'      l_process_level := l_new_subflow_context.sbfl_id;',
'    else',
'       l_process_level := p_parent_sbfl_proc_level;',
'    end if;',
'',
'    l_new_subflow_context.step_key := flow_engine_util.step_key',
'                                      ( pi_sbfl_id        => l_new_subflow_context.sbfl_id ',
'                                      , pi_current        => p_current_object  ',
'                                      , pi_became_current => l_timestamp ',
'                                      );',
'',
'    update flow_subflows',
'       set sbfl_process_level = l_process_level',
'         , sbfl_step_key      = l_new_subflow_context.step_key',
'     where sbfl_id = l_new_subflow_context.sbfl_id;',
'',
'    apex_debug.info',
'    ( p_message => ''New Subflow started.  Process: %0 Subflow: %1 Step Key: %2''',
'    , p0        => p_process_id',
'    , p1        => l_new_subflow_context.sbfl_id',
'    , p2        => l_new_subflow_context.step_key',
'    );',
'    return l_new_subflow_context;',
'  end subflow_start;',
'',
'  procedure terminate_level',
'    ( p_process_id    in flow_processes.prcs_id%type',
'    , p_process_level in flow_subflows.sbfl_process_level%type',
'    )',
'  is',
'  begin',
'    apex_debug.enter',
'    ( ''terminate_level''',
'    , ''Process'',  p_process_id',
'    , ''Process Level'', p_process_level',
'    );',
'    -- find any running subprocesses with parent at this level',
'    begin',
'      for child_proc_levels in (',
'        select distinct child_sbfl.sbfl_process_level',
'          from flow_subflows parent_sbfl',
'          join flow_subflows child_sbfl',
'            on parent_sbfl.sbfl_current = child_sbfl.sbfl_starting_object',
'         where parent_sbfl.sbfl_status =  flow_constants_pkg.gc_sbfl_status_in_subprocess',
'           and parent_sbfl.sbfl_process_level = p_process_level',
'      )',
'      loop',
'        terminate_level',
'        ( p_process_id     => p_process_id',
'        , p_process_level  => child_proc_levels.sbfl_process_level);',
'      end loop;',
'    end;',
'    -- end all subflows in the level',
'    delete from flow_subflows',
'    where sbfl_process_level = p_process_level ',
'      and sbfl_prcs_id = p_process_id',
'      ;',
'    apex_debug.info ',
'    ( p_message => ''Process %0 : All subflows at process level %1 terminated''',
'    , p0 => p_process_id',
'    , p1 => p_process_level',
'    );',
'  end terminate_level;',
'',
'  procedure subflow_complete',
'    ( p_process_id        in flow_processes.prcs_id%type',
'    , p_subflow_id        in flow_subflows.sbfl_id%type',
'    )',
'  is',
'    l_remaining_subflows              number;',
'    l_remaining_siblings              number;',
'    l_current_object                  flow_subflows.sbfl_current%type;',
'    l_current_subflow_status          flow_subflows.sbfl_status%type;',
'    l_parent_subflow_id               flow_subflows.sbfl_sbfl_id%type;',
'    l_parent_subflow_status           flow_subflows.sbfl_status%type;',
'    l_parent_subflow_last_completed   flow_subflows.sbfl_last_completed%type;',
'    l_parent_subflow_current          flow_subflows.sbfl_current%type;',
'  begin',
'    apex_debug.enter',
'    ( ''subflow_complete''',
'    , ''Subflow'' , p_subflow_id ',
'    );',
'    select sbfl.sbfl_sbfl_id',
'         , sbfl.sbfl_current',
'         , sbfl.sbfl_status',
'      into l_parent_subflow_id',
'         , l_current_object',
'         , l_current_subflow_status',
'      from flow_subflows sbfl',
'     where sbfl.sbfl_id = p_subflow_id',
'       and sbfl.sbfl_prcs_id = p_process_id',
'    ; ',
'    ',
'    if l_parent_subflow_id is not null then   ',
'      -- get parent subflow info',
'      select sbfl.sbfl_status',
'           , sbfl.sbfl_last_completed',
'           , sbfl.sbfl_current',
'        into l_parent_subflow_status',
'           , l_parent_subflow_last_completed',
'           , l_parent_subflow_current',
'        from flow_subflows sbfl',
'       where sbfl.sbfl_id = l_parent_subflow_id',
'         and sbfl.sbfl_prcs_id = p_process_id',
'      ;',
'    end if;',
'    -- delete the subflow',
'    delete from flow_subflows',
'     where sbfl_id = p_subflow_id',
'       and sbfl_prcs_id = p_process_id',
'    ;',
'',
'    -- handle parallel flows with their own end events.  Last one completing needs to clear up the parent ''split'' sbfl.',
'    -- if subflow has parent with   ',
'    -- a)  status ''split''  (flow_constants_pkg.gc_sbfl_status_split)',
'    -- b)  no other children, AND',
'    -- c)  is not a merging gateway',
'    -- then we have an ophan parent process to clean up (all opening gateway paths have run to conclusion)',
'    -- need to call this recursively in case you have nested open parallel gateways',
'',
'    if l_parent_subflow_id is not null then   ',
'        ',
'      select count(*)',
'        into l_remaining_siblings',
'        from flow_subflows sbfl',
'       where sbfl.sbfl_prcs_id = p_process_id',
'         and sbfl.sbfl_starting_object = l_parent_subflow_last_completed',
'      ;',
'      ',
'      if (   l_remaining_siblings = 0',
'         and l_parent_subflow_status =  flow_constants_pkg.gc_sbfl_status_split    ',
'         and l_current_subflow_status != flow_constants_pkg.gc_sbfl_status_waiting_gateway',
'         )',
'      then',
'        -- call subflow_complete again recursively in case it has orphan grandparent',
'        subflow_complete ( p_process_id => p_process_id',
'                         , p_subflow_id => l_parent_subflow_id',
'                         );',
'      end if;  ',
'    end if;',
'  end subflow_complete;',
'',
'  function lock_subflow',
'  ( p_subflow_id    in flow_subflows.sbfl_id%type',
'  ) return boolean',
'  is ',
'    l_sbfl_prcs_id   flow_subflows.sbfl_prcs_id%type;',
'  begin ',
'',
'    apex_debug.enter ',
'    ( ''lock_subflow''',
'    , ''Subflow'', p_subflow_id ',
'    );',
'',
'    select sbfl.sbfl_prcs_id',
'      into l_sbfl_prcs_id',
'      from flow_subflows sbfl',
'     where sbfl.sbfl_id = p_subflow_id',
'    for update wait 2',
'    ;',
'    return true;',
'  exception',
'    when no_data_found then',
'      return false;',
'    when lock_timeout then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id => l_sbfl_prcs_id',
'      , pi_sbfl_id => p_subflow_id',
'      , pi_message_key => ''timeout_locking_subflow''',
'      , p0 => p_subflow_id',
'      );',
'      -- $F4AMESSAGE ''timeout_locking_subflow'' || ''Unable to lock subflow %0 as currently locked by another user.  Try again later.''',
'      return false;',
'  end lock_subflow;',
'',
'  -- initialise step key enforcement parameter',
'',
'  begin',
'    g_step_keys_enforced :=  (  flow_engine_util.get_config_value',
'                                ( p_config_key => flow_constants_pkg.gc_config_dup_step_prevention',
'                                , p_default_value => flow_constants_pkg.gc_config_default_dup_step_prevention ',
'                                )',
'                                = flow_constants_pkg.gc_config_dup_step_prevention_strict',
'                             );',
'',
'end flow_engine_util;',
'/',
'',
'create or replace package body flow_gateways',
'as ',
'',
'  /*type t_new_sbfl_rec is record',
'  ( sbfl_id   flow_subflows.sbfl_id%type',
'  , step_key  flow_subflows.sbfl_step_key%type',
'  , route     flow_subflows.sbfl_route%type',
'  );*/',
'',
'  type t_new_sbfls is table of flow_types_pkg.t_subflow_context;',
'',
'  lock_timeout exception;',
'  pragma exception_init (lock_timeout, -3006);',
'',
'  function get_gateway_route',
'    ( pi_process_id     in flow_processes.prcs_id%type',
'    , pi_subflow_id     in flow_subflows.sbfl_id%type',
'    , pi_objt_bpmn_id   in flow_objects.objt_bpmn_id%type',
'    , pi_objt_tag       in flow_objects.objt_tag_name%type',
'    ) return varchar2',
'  is',
'    l_forward_route         varchar2(2000);  -- 1 route for exclusiveGateway, 1 or more for inclusive (:sep)',
'    l_bad_routes            apex_application_global.vc_arr2;',
'    l_bad_route_string      varchar2(2000) := '''';',
'    l_num_bad_routes        number := 0;',
'    l_num_routes            number := 0;',
'  begin',
'    -- check if route is in process variable',
'    l_forward_route := flow_process_vars.get_var_vc2(pi_process_id, pi_objt_bpmn_id||'':route'');',
'    if l_forward_route is not null',
'    then',
'      begin',
'        -- test routes are all valid connections before returning',
'        l_num_bad_routes := 0;',
'        for bad_routes in (',
'          select column_value as bad_route ',
'            from table(apex_string.split(l_forward_route,'':''))',
'          minus ',
'          select conn.conn_bpmn_id',
'            from flow_connections conn',
'            join flow_objects objt ',
'              on objt.objt_id = conn.conn_src_objt_id',
'             and conn.conn_dgrm_id = objt.objt_dgrm_id',
'            join flow_processes prcs',
'              on prcs.prcs_dgrm_id = conn.conn_dgrm_id',
'           where prcs.prcs_id = pi_process_id',
'             and objt.objt_bpmn_id = pi_objt_bpmn_id',
'            )',
'        loop',
'          l_num_bad_routes := l_num_bad_routes +1;',
'          l_bad_route_string := l_bad_route_string||bad_routes.bad_route||'', '';',
'        end loop;',
'',
'        if pi_objt_tag = flow_constants_pkg.gc_bpmn_gateway_exclusive then',
'          -- check only one route provided',
'          select count(*) ',
'            into l_num_routes  ',
'            from table(apex_string.split(l_forward_route,'':'')',
'          );',
'          if l_num_routes != 1 then',
'            l_bad_route_string := l_forward_route;',
'            raise flow_errors.e_gateway_invalid_route;',
'          end if;',
'        end if;',
'',
'        if l_num_bad_routes > 0 then',
'          raise flow_errors.e_gateway_invalid_route;',
'        end if;',
'      exception',
'        when flow_errors.e_gateway_invalid_route then',
'          flow_errors.handle_instance_error',
'          ( pi_prcs_id        => pi_process_id',
'          , pi_sbfl_id        => pi_subflow_id',
'          , pi_message_key    => ''gateway-invalid-route''',
'          , p0 => pi_objt_bpmn_id ',
'          , p1 => pi_objt_bpmn_id||'':route''',
'          , p2 => l_bad_route_string',
'          );',
'          -- $F4AMESSAGE ''gateway-invalid-route'' || ''Error at gateway %0. Supplied variable %1 contains invalid route: %2''  ',
'        when no_data_found then -- all routes good',
'          return l_forward_route',
'          ;',
'      end;',
'    else -- forward route is null -- look for default routing',
'      begin',
'        -- check default route ',
'        select conn_bpmn_id',
'          into l_forward_route',
'          from flow_connections conn',
'          join flow_objects objt ',
'            on objt.objt_id = conn.conn_src_objt_id',
'           and conn.conn_dgrm_id = objt.objt_dgrm_id',
'          join flow_processes prcs ',
'            on prcs.prcs_dgrm_id = conn.conn_dgrm_id',
'         where conn.conn_is_default = 1',
'           and objt.objt_bpmn_id = pi_objt_bpmn_id',
'           and prcs.prcs_id = pi_process_id',
'            ;',
'      exception',
'        when no_data_found then',
'          flow_errors.handle_instance_error',
'          ( pi_prcs_id        => pi_process_id',
'          , pi_sbfl_id        => pi_subflow_id',
'          , pi_message_key    => ''gateway-no-route''',
'          , p0 => pi_objt_bpmn_id||'':route''',
'          );',
'      -- $F4AMESSAGE ''gateway-no-route'' || ''No gateway routing instruction provided in variable %0 and model contains no default route.''  ',
'        when too_many_rows then',
'          flow_errors.handle_instance_error',
'          ( pi_prcs_id        => pi_process_id',
'          , pi_sbfl_id        => pi_subflow_id',
'          , pi_message_key    => ''gateway-too-many-defaults''',
'          , p0 => pi_objt_bpmn_id',
'          );',
'          -- $F4AMESSAGE ''gateway-too-many-defaults'' || ''More than one default route specified in model for Gateway %0.'' ',
'      end;',
'    end if; ',
'    return l_forward_route;',
'  end get_gateway_route;',
'',
'  function gateway_merge',
'    ( p_sbfl_info     in flow_subflows%rowtype',
'    , p_step_info     in flow_types_pkg.flow_step_info',
'    ) return varchar2 -- returns forward status ''wait'' or ''proceed''',
'  is ',
'    l_num_unfinished_subflows   number;',
'    l_gateway_forward_status    varchar2(10)  := ''wait'';',
'    l_subflow                   flow_subflows.sbfl_id%type;',
'  begin  ',
'    apex_debug.enter ',
'    ( ''gateway_merge''',
'    , ''p_sbfl_info.sbfl_current'' , p_sbfl_info.sbfl_current',
'    , ''p_step_info.target_objt_ref'' , p_step_info.target_objt_ref',
'    , ''p_sbfl_info.sbfl_last_completed'', p_sbfl_info.sbfl_last_completed',
'    );',
'    -- set current subflow to status waiting,       ',
'    update flow_subflows sbfl',
'        set sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_waiting_gateway',
'          , sbfl.sbfl_last_update = systimestamp ',
'          , sbfl.sbfl_current = p_step_info.target_objt_ref',
'      where sbfl.sbfl_id = p_sbfl_info.sbfl_id',
'        and sbfl.sbfl_prcs_id = p_sbfl_info.sbfl_prcs_id',
'    ;',
'    -- check if we are waiting for other flows or can proceed',
'    select count(*)',
'      into l_num_unfinished_subflows',
'      from flow_subflows sbfl',
'      where sbfl.sbfl_prcs_id = p_sbfl_info.sbfl_prcs_id',
'        and sbfl.sbfl_starting_object = p_sbfl_info.sbfl_starting_object',
'        and (  sbfl.sbfl_current != p_step_info.target_objt_ref',
'            or sbfl.sbfl_status != flow_constants_pkg.gc_sbfl_status_waiting_gateway',
'            )',
'    ;',
'    if l_num_unfinished_subflows = 0 then',
'      -- all task to be merged have completed.  So we do the merge... ',
'      -- lock parent subflow first',
'      if flow_engine_util.lock_subflow(p_sbfl_info.sbfl_sbfl_id) then',
'        begin',
'          -- proceed from gateway, locking child subflows',
'          for completed_subflows in ( select completed_sbfl.sbfl_id',
'                                        from flow_subflows completed_sbfl ',
'                                        where completed_sbfl.sbfl_prcs_id = p_sbfl_info.sbfl_prcs_id',
'                                          and completed_sbfl.sbfl_starting_object = p_sbfl_info.sbfl_starting_object',
'                                          and completed_sbfl.sbfl_current = p_step_info.target_objt_ref ',
'                                          and completed_sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_waiting_gateway',
'                                          for update wait 2',
'                                    )',
'          loop',
'            l_subflow := completed_subflows.sbfl_id;',
'            flow_engine_util.subflow_complete',
'            ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'            , p_subflow_id => completed_subflows.sbfl_id',
'            );',
'          end loop;',
'',
'          --mark parent split subflow ready to restart',
'          l_subflow := p_sbfl_info.sbfl_sbfl_id;',
'          update flow_subflows parent_sbfl',
'              set parent_sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_proceed_gateway',
'                , parent_sbfl.sbfl_current = p_step_info.target_objt_ref',
'                , parent_sbfl.sbfl_last_update = systimestamp',
'                , parent_sbfl.sbfl_last_completed = p_sbfl_info.sbfl_current  -- last step of final child sbfl pre-merge',
'            where parent_sbfl.sbfl_last_completed = p_sbfl_info.sbfl_starting_object',
'              and parent_sbfl.sbfl_status =  flow_constants_pkg.gc_sbfl_status_split  ',
'              and parent_sbfl.sbfl_id = p_sbfl_info.sbfl_sbfl_id',
'          ;',
'        exception',
'          when lock_timeout then',
'            flow_errors.handle_instance_error',
'            ( pi_prcs_id => p_sbfl_info.sbfl_prcs_id',
'            , pi_sbfl_id => l_subflow',
'            , pi_message_key => ''timeout_locking_subflow''',
'            , p0 => l_subflow',
'            );',
'          when others then',
'            flow_errors.handle_instance_error',
'            ( pi_prcs_id => p_sbfl_info.sbfl_prcs_id',
'            , pi_message_key => ''gateway-merge-error''',
'            , p0 => l_subflow',
'            );          ',
'            -- $F4AMESSAGE ''gateway-merge-error'' || ''Internal error processing merging gateway on subflow %0'' ',
'        end;',
'        -- test for any errors so far ',
'        if not flow_globals.get_step_error then ',
'          -- process any after-merge expression set',
'          flow_expressions.process_expressions',
'          ( pi_objt_id     => p_step_info.target_objt_id',
'          , pi_set         => flow_constants_pkg.gc_expr_set_after_merge',
'          , pi_prcs_id     => p_sbfl_info.sbfl_prcs_id',
'          , pi_sbfl_id     => p_sbfl_info.sbfl_sbfl_id',
'          );',
'          -- test again for any errors so far - if so, don''t commit',
'          if not flow_globals.get_step_error then ',
'            -- commit tx',
'            commit;',
'            -- start new tx by locking parent subflow',
'            if not flow_engine_util.lock_subflow(p_sbfl_info.sbfl_sbfl_id) then',
'              -- unable to lock parent ''split'' subflow.',
'              flow_errors.handle_instance_error',
'              ( pi_prcs_id => p_sbfl_info.sbfl_prcs_id',
'              , pi_sbfl_id => p_sbfl_info.sbfl_sbfl_id',
'              , pi_message_key => ''timeout_locking_subflow''',
'              , p0 => p_sbfl_info.sbfl_sbfl_id',
'              );',
'            end if;',
'            l_gateway_forward_status := ''proceed'';',
'          else',
'            -- has step errors from expressions',
'            flow_errors.set_error_status',
'            ( pi_prcs_id => p_sbfl_info.sbfl_prcs_id',
'            , pi_sbfl_id => p_sbfl_info.sbfl_sbfl_id',
'            );',
'          end if;  ',
'        else ',
'          -- has step errors from merge',
'          flow_errors.set_error_status',
'          ( pi_prcs_id => p_sbfl_info.sbfl_prcs_id',
'          , pi_sbfl_id => p_sbfl_info.sbfl_sbfl_id',
'          );',
'        end if;       ',
'      else ',
'        -- unable to lock parent ''split'' subflow.',
'        -- exception already handled in lock_subflow so no need to throw an error here.',
'        -- has step errors from locking',
'        flow_errors.set_error_status',
'        ( pi_prcs_id => p_sbfl_info.sbfl_prcs_id',
'        , pi_sbfl_id => p_sbfl_info.sbfl_sbfl_id',
'        );',
'      end if;',
'    end if; ',
'    return l_gateway_forward_status;',
'  end gateway_merge;',
'',
'  procedure gateway_split',
'    ( p_subflow_id     in flow_subflows.sbfl_id%type ',
'    , p_sbfl_info      in flow_subflows%rowtype',
'    , p_step_info      in flow_types_pkg.flow_step_info',
'    , p_gateway_routes in varchar2',
'    )',
'  is ',
'    l_new_subflows      t_new_sbfls := t_new_sbfls();',
'    l_new_subflow       flow_types_pkg.t_subflow_context;',
'  begin ',
'    apex_debug.enter ',
'    ( ''gateway_split''',
'    , ''p_sbfl_info.sbfl_current'' , p_sbfl_info.sbfl_current',
'    , ''p_step_info.target_objt_ref'' , p_step_info.target_objt_ref',
'    );',
'    -- note that p_subflow_id might be different to the subflow in p_sbfl_info.sbfl_id',
'    -- we have splitting gateway going forward',
'    -- Current Subflow into status split ',
'    update flow_subflows sbfl',
'        set sbfl.sbfl_last_completed = p_sbfl_info.sbfl_current',
'          , sbfl.sbfl_current = p_step_info.target_objt_ref',
'          , sbfl.sbfl_status =  flow_constants_pkg.gc_sbfl_status_split  ',
'          , sbfl.sbfl_last_update = systimestamp ',
'      where sbfl.sbfl_id = p_subflow_id',
'        and sbfl.sbfl_prcs_id = p_sbfl_info.sbfl_prcs_id',
'    ;',
'    -- get all forward parallel paths and create subflows for them',
'    -- these are paths forward of p_step_info.target_objt_ref as we are doing double step',
'    -- create subflows in one loop then step through them again in second loop',
'    -- to prevent some subflows getting to following merge gateway before all subflows are created (causes race condition)',
'',
'    for new_path in ( select conn.conn_bpmn_id route',
'                           , ultimate_tgt_objt.objt_bpmn_id target',
'                        from flow_connections conn',
'                        join flow_objects ultimate_tgt_objt -- first object in each child',
'                          on ultimate_tgt_objt.objt_id = conn.conn_tgt_objt_id',
'                         and conn.conn_dgrm_id = ultimate_tgt_objt.objt_dgrm_id',
'                        join flow_objects objt  -- gateway object',
'                          on objt.objt_id = conn.conn_src_objt_id',
'                         and conn.conn_dgrm_id = objt.objt_dgrm_id',
'                       where conn.conn_dgrm_id = p_step_info.dgrm_id',
'                         and conn.conn_src_objt_id = p_step_info.target_objt_id',
'                         and conn.conn_tag_name = flow_constants_pkg.gc_bpmn_sequence_flow',
'                         and ( objt.objt_tag_name = flow_constants_pkg.gc_bpmn_gateway_parallel',
'                             OR ',
'                             ( objt.objt_tag_name = flow_constants_pkg.gc_bpmn_gateway_inclusive',
'                             and ',
'                               conn.conn_bpmn_id member of apex_string.split( p_gateway_routes, '':'' )',
'                             ))',
'                    )',
'    loop',
'      -- path is included in list of chosen forward paths.',
'      apex_debug.info',
'      ( p_message => ''starting parallel flow for %0''',
'      , p0        => p_step_info.target_objt_tag',
'      );',
'',
'      l_new_subflow :=',
'        flow_engine_util.subflow_start',
'        ( p_process_id             => p_sbfl_info.sbfl_prcs_id         ',
'        , p_parent_subflow         => p_subflow_id       ',
'        , p_starting_object        => p_step_info.target_objt_ref         ',
'        , p_current_object         => p_step_info.target_objt_ref          ',
'        , p_route                  => new_path.route         ',
'        , p_last_completed         => p_sbfl_info.sbfl_current ',
'        , p_status                 => flow_constants_pkg.gc_sbfl_status_created',
'        , p_parent_sbfl_proc_level => p_sbfl_info.sbfl_process_level',
'        , p_new_proc_level         => false',
'        , p_dgrm_id                => p_sbfl_info.sbfl_dgrm_id',
'        )',
'      ;',
'      l_new_subflow.route   := new_path.route;',
'      l_new_subflows.extend;',
'      l_new_subflows (l_new_subflows.last) := l_new_subflow;',
'    end loop;',
'    -- log gateway as completed',
'    flow_logging.log_step_completion   ',
'    ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'    , p_subflow_id => p_subflow_id',
'    , p_completed_object => p_step_info.target_objt_ref ',
'    );',
'    -- update parent status now split and no current object',
'     update flow_subflows sbfl',
'        set sbfl.sbfl_current = null',
'          , sbfl.sbfl_last_completed = p_step_info.target_objt_ref',
'          , sbfl.sbfl_last_update = systimestamp ',
'      where sbfl.sbfl_id = p_subflow_id',
'        and sbfl.sbfl_prcs_id = p_sbfl_info.sbfl_prcs_id;',
'',
'    -- commit the transaction',
'    commit;',
'    ',
'    apex_debug.info ( p_message => ''New Subflow Creation Commited'');',
'    ',
'    for new_subflow in 1.. l_new_subflows.count',
'    loop',
'      -- reset step_had_error flag',
'      flow_globals.set_step_error ( p_has_error => false);',
'      -- check subflow still exists and lock it(in case earlier loop terminated everything in level)',
'      if flow_engine_util.lock_subflow',
'        ( p_subflow_id => l_new_subflows(new_subflow).sbfl_id',
'        )',
'      then',
'        -- step into first step on the new path',
'        flow_engine.flow_complete_step    ',
'        ( p_process_id        => p_sbfl_info.sbfl_prcs_id',
'        , p_subflow_id        => l_new_subflows(new_subflow).sbfl_id',
'        , p_step_key          => l_new_subflows(new_subflow).step_key',
'        , p_forward_route     => l_new_subflows(new_subflow).route',
'        , p_log_as_completed '))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
' => false',
'        );',
'      end if;',
'    end loop;',
'    -- reset step_had_error flag',
'    flow_globals.set_step_error ( p_has_error => false);',
'  end gateway_split;',
'',
'  procedure process_para_incl_Gateway',
'    ( p_sbfl_info     in flow_subflows%rowtype',
'    , p_step_info     in flow_types_pkg.flow_step_info',
'    )',
'  is',
'    l_gateway_forward_status    varchar2(10);',
'    l_sbfl_id                   flow_subflows.sbfl_id%type;',
'    l_sbfl_id_sub               flow_subflows.sbfl_id%type;',
'    l_sbfl_id_par               flow_subflows.sbfl_id%type; ',
'    l_num_back_connections      number;   -- number of connections leading into object',
'    l_num_forward_connections   number;   -- number of connections forward from object',
'    l_num_unfinished_subflows   number;',
'    l_forward_routes            varchar2(2000);',
'    l_step_key                  flow_subflows.sbfl_step_key%type;',
'/*    l_new_subflows              t_new_sbfls := t_new_sbfls();',
'    l_new_subflow               flow_types_pkg.t_subflow_context; */ -- think these not used',
'  begin',
'    apex_debug.enter ',
'    ( ''process_para_incl_Gateway''',
'    , ''p_step_info.target_objt_tag'' , p_step_info.target_objt_tag',
'    , ''p_step_info.target_objt_ref'' , p_step_info.target_objt_ref',
'    );',
'    -- get number of forward and backward connections',
'    flow_engine_util.get_number_of_connections',
'    ( pi_dgrm_id => p_step_info.dgrm_id',
'    , pi_target_objt_id => p_step_info.target_objt_id',
'    , pi_conn_type => flow_constants_pkg.gc_bpmn_sequence_flow',
'    , po_num_back_connections => l_num_back_connections',
'    , po_num_forward_connections => l_num_forward_connections',
'    );',
'',
'    l_gateway_forward_status := ''proceed'';',
'    l_sbfl_id  := p_sbfl_info.sbfl_id;',
'',
'    if l_num_back_connections > 1  then',
'      apex_debug.info',
'      ( p_message => ''%0 Gateway Merging %1''',
'      , p0        => p_step_info.target_objt_tag',
'      , p1        => p_step_info.target_objt_ref',
'      );  ',
'      -- we have merging gateway.  do the merge. returns ''wait'' if flow is waiting at gateway, ''proceed'' if merged',
'      l_gateway_forward_status := gateway_merge ( p_sbfl_info  => p_sbfl_info',
'                                                , p_step_info  => p_step_info',
'                                                );',
'      -- switch to parent subflow ',
'      l_sbfl_id := p_sbfl_info.sbfl_sbfl_id;',
'    end if;',
'    ',
'    -- now do forward path, if you have token to ''proceed''',
'    if l_gateway_forward_status = ''proceed'' then ',
'      if l_num_forward_connections > 1 then',
'        -- we have splitting gateway going forward',
'        apex_debug.info ',
'        ( p_message => ''%0 Gateway Splitting %1 - %2 forward paths''',
'        , p0 => p_step_info.target_objt_tag',
'        , p1 => p_step_info.target_objt_ref',
'        , p2 => l_num_forward_connections',
'        );       ',
'        -- process any before-split expression set',
'        flow_expressions.process_expressions',
'        ( pi_objt_id     => p_step_info.target_objt_id',
'        , pi_set         => flow_constants_pkg.gc_expr_set_before_split',
'        , pi_prcs_id     => p_sbfl_info.sbfl_prcs_id',
'        , pi_sbfl_id     => p_sbfl_info.sbfl_id',
'        );        ',
'        -- test for any errors so far - if so, skip finding a route',
'        if not flow_globals.get_step_error then ',
'          apex_debug.info ( p_message => ''process_para_incl_Gateway: step has no errors after evaluating expressions'');',
'',
'          case p_step_info.target_objt_tag',
'          when flow_constants_pkg.gc_bpmn_gateway_inclusive then ',
'            l_forward_routes := get_gateway_route',
'            ( pi_process_id     => p_sbfl_info.sbfl_prcs_id',
'            , pi_subflow_id     => p_sbfl_info.sbfl_id',
'            , pi_objt_bpmn_id   => p_step_info.target_objt_ref',
'            , pi_objt_tag       => p_step_info.target_objt_tag',
'            );',
'            apex_debug.info',
'            ( p_message => ''Forward routes for inclusiveGateway %0 : %1''',
'            , p0 => p_step_info.target_objt_ref',
'            , p1 => l_forward_routes',
'            );',
'          when flow_constants_pkg.gc_bpmn_gateway_parallel then ',
'            l_forward_routes := ''parallel'';  -- just needs to be some not null string',
'          end case;',
'          -- test for any errors again - if so, skip doing the split',
'          if not flow_globals.get_step_error then ',
'            apex_debug.info ( p_message => ''process_para_incl_Gateway: step has no errors after evaluating routes'');',
'            gateway_split',
'            ( p_subflow_id => l_sbfl_id',
'            , p_sbfl_info  => p_sbfl_info',
'            , p_step_info  => p_step_info',
'            , p_gateway_routes => l_forward_routes',
'            );',
'          else',
'            -- has step errors from evaluating route',
'            flow_errors.set_error_status',
'            ( pi_prcs_id => p_sbfl_info.sbfl_prcs_id',
'            , pi_sbfl_id => p_sbfl_info.sbfl_id',
'            );',
'          end if;',
'        else',
'          -- has step errors from expressions',
'          flow_errors.set_error_status',
'          ( pi_prcs_id => p_sbfl_info.sbfl_prcs_id',
'          , pi_sbfl_id => p_sbfl_info.sbfl_id',
'          );',
'        end if;',
'      elsif l_num_forward_connections = 1 then',
'        -- only single path going forward',
'        update  flow_subflows sbfl',
'            set sbfl.sbfl_last_completed = p_sbfl_info.sbfl_current',
'              , sbfl.sbfl_current = p_step_info.target_objt_ref',
'              , sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_running',
'              , sbfl.sbfl_last_update = systimestamp ',
'          where sbfl.sbfl_id = l_sbfl_id',
'            and sbfl.sbfl_prcs_id = p_sbfl_info.sbfl_prcs_id',
'        ;',
'        -- get step key from parent ',
'        select sbfl.sbfl_step_key',
'          into l_step_key',
'          from flow_subflows sbfl',
'         where sbfl.sbfl_id = l_sbfl_id; ',
'',
'        -- step into first step on the new path',
'        flow_engine.flow_complete_step   ',
'        ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'        , p_subflow_id => l_sbfl_id',
'        , p_step_key   => l_step_key',
'        , p_forward_route => null',
'        );',
'      end if;  -- single path',
'    end if;  -- forward token',
'  end process_para_incl_Gateway;',
'',
'  procedure process_exclusiveGateway',
'    ( p_sbfl_info     in flow_subflows%rowtype',
'    , p_step_info     in flow_types_pkg.flow_step_info',
'    )',
'  is ',
'    l_num_forward_connections   number;   -- number of connections forward from object',
'    l_num_back_connections      number;   -- number of connections back from object',
'    l_forward_route             varchar2(2000);',
'  begin',
'    -- handles opening and closing and closing and reopening',
'    apex_debug.enter ',
'    ( ''process_exclusiveGateway''',
'    , ''p_step_info.target_objt_tag'' , p_step_info.target_objt_tag',
'    );',
'    flow_engine_util.get_number_of_connections',
'    ( pi_dgrm_id => p_step_info.dgrm_id',
'    , pi_target_objt_id => p_step_info.target_objt_id',
'    , pi_conn_type => flow_constants_pkg.gc_bpmn_sequence_flow',
'    , po_num_back_connections => l_num_back_connections',
'    , po_num_forward_connections => l_num_forward_connections',
'    );',
'',
'    if l_num_forward_connections > 1 then',
'      -- opening gateway ',
'      -- process any before-split expression set before gateway chooses route',
'      flow_expressions.process_expressions',
'      ( pi_objt_id     => p_step_info.target_objt_id',
'      , pi_set         => flow_constants_pkg.gc_expr_set_before_split',
'      , pi_prcs_id     => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id     => p_sbfl_info.sbfl_id',
'      );',
'      -- test for any errors so far - if so, skip finding a route',
'      if not flow_globals.get_step_error then ',
'        -- get route choice',
'        l_forward_route := get_gateway_route',
'        ( pi_process_id     => p_sbfl_info.sbfl_prcs_id',
'        , pi_subflow_id     => p_sbfl_info.sbfl_id',
'        , pi_objt_bpmn_id   => p_step_info.target_objt_ref',
'        , pi_objt_tag       => p_step_info.target_objt_tag',
'        );',
'      end if;',
'    else ',
'      -- closing gateway ',
'      -- process any after-merge expression set',
'      flow_expressions.process_expressions',
'      ( pi_objt_id     => p_step_info.target_objt_id',
'      , pi_set         => flow_constants_pkg.gc_expr_set_after_merge',
'      , pi_prcs_id     => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id     => p_sbfl_info.sbfl_id',
'      );      ',
'      -- keep going',
'      l_forward_route := null;',
'    end if;  ',
'',
'    if not flow_globals.get_step_error then ',
'      -- all good so step forward',
'      update flow_subflows sbfl',
'         set sbfl.sbfl_current = p_step_info.target_objt_ref',
'           , sbfl.sbfl_last_completed = p_sbfl_info.sbfl_current',
'           , sbfl.sbfl_last_update = systimestamp',
'           , sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_running',
'       where sbfl.sbfl_id = p_sbfl_info.sbfl_id',
'         and sbfl.sbfl_prcs_id = p_sbfl_info.sbfl_prcs_id',
'      ;  ',
'      flow_engine.flow_complete_step   ',
'      ( p_process_id    => p_sbfl_info.sbfl_prcs_id',
'      , p_subflow_id    => p_sbfl_info.sbfl_id',
'      , p_step_key      => p_sbfl_info.sbfl_step_key',
'      , p_forward_route => l_forward_route',
'      );',
'    else        ',
'      -- has step errors from evaluating route',
'      flow_errors.set_error_status',
'      ( pi_prcs_id => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id => p_sbfl_info.sbfl_id',
'      );',
'    end if;',
'',
'  end process_exclusiveGateway; ',
'',
'  procedure process_eventBasedGateway',
'    ( p_sbfl_info  in flow_subflows%rowtype',
'    , p_step_info  in flow_types_pkg.flow_step_info',
'    )',
'  is ',
'    l_sbfl_context_sub flow_types_pkg.t_subflow_context;',
'  begin',
'    -- eventGateway can have multiple inputs and outputs, but there is no waiting, etc.',
'    -- incoming subflow continues on the first output path.',
'    -- additional output paths create new subflows',
'    apex_debug.enter',
'    (',
'      p_routine_name => ''process_EventBasedGateway''',
'    , p_name01       => ''p_step_info.target_objt_ref''',
'    , p_value01      => p_step_info.target_objt_ref',
'    );',
'    -- process any before-split expression set',
'    flow_expressions.process_expressions',
'    ( pi_objt_id     => p_step_info.target_objt_id',
'    , pi_set         => flow_constants_pkg.gc_expr_set_before_split',
'    , pi_prcs_id     => p_sbfl_info.sbfl_prcs_id',
'    , pi_sbfl_id     => p_sbfl_info.sbfl_id',
'    );',
'    -- mark parent flow as split',
'    update flow_subflows sbfl',
'       set sbfl.sbfl_last_completed = p_sbfl_info.sbfl_current',
'         , sbfl.sbfl_current = p_step_info.target_objt_ref',
'         , sbfl.sbfl_status =  flow_constants_pkg.gc_sbfl_status_split  ',
'         , sbfl.sbfl_last_update = systimestamp ',
'     where sbfl.sbfl_id = p_sbfl_info.sbfl_id',
'       and sbfl.sbfl_prcs_id = p_sbfl_info.sbfl_prcs_id',
'    ;',
'    -- log gateway as completed here so only logged once',
'    flow_logging.log_step_completion   ',
'    ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'    , p_subflow_id => p_sbfl_info.sbfl_id',
'    , p_completed_object => p_step_info.target_objt_ref ',
'    );',
'    -- get all forward parallel paths and create subflows for them',
'    -- these are paths forward of p_step_info.target_objt_ref as we are doing double step',
'    for new_path in ( select conn.conn_bpmn_id route',
'                           , objt.objt_bpmn_id target',
'                        from flow_connections conn',
'                        join flow_objects objt',
'                          on objt.objt_id = conn.conn_tgt_objt_id',
'                         and conn.conn_dgrm_id = objt.objt_dgrm_id',
'                       where conn.conn_dgrm_id = p_step_info.dgrm_id',
'                         and conn.conn_tag_name = flow_constants_pkg.gc_bpmn_sequence_flow',
'                         and conn.conn_src_objt_id = p_step_info.target_objt_id',
'                    )',
'    loop',
'      -- create new subflows for forward event paths starting here',
'      l_sbfl_context_sub :=',
'        flow_engine_util.subflow_start',
'        ( ',
'          p_process_id             => p_sbfl_info.sbfl_prcs_id        ',
'        , p_parent_subflow         => p_sbfl_info.sbfl_id       ',
'        , p_starting_object        => p_step_info.target_objt_ref         ',
'        , p_current_object         => p_step_info.target_objt_ref          ',
'        , p_route                  => new_path.route         ',
'        , p_last_completed         => p_step_info.target_objt_ref ',
'        , p_status                 => flow_constants_pkg.gc_sbfl_status_waiting_event   ',
'        , p_parent_sbfl_proc_level => p_sbfl_info.sbfl_process_level',
'        , p_new_proc_level         => false    ',
'        , p_dgrm_id                => p_sbfl_info.sbfl_dgrm_id',
'        )',
'      ;',
'      -- step into first step on the new path',
'      flow_engine.flow_complete_step   ',
'      (',
'        p_process_id        => p_sbfl_info.sbfl_prcs_id',
'      , p_subflow_id        => l_sbfl_context_sub.sbfl_id',
'      , p_step_key          => l_sbfl_context_sub.step_key',
'      , p_forward_route     => new_path.route',
'      , p_log_as_completed  => false',
'      );',
'    end loop;',
'  end process_eventBasedGateway;',
'',
'end flow_gateways;',
'/',
'',
'create or replace package body flow_boundary_events',
'is ',
'',
'  lock_timeout exception;',
'  pragma exception_init (lock_timeout, -3006);',
'',
'  procedure set_boundary_timers',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  )',
'  is ',
'    l_new_non_int_timer_sbfl  flow_types_pkg.t_subflow_context;',
'    l_parent_tag              varchar2(50);',
'  begin',
'    apex_debug.enter ',
'    ( ''set_boundary_timers''',
'    , ''subflow'', p_subflow_id',
'    );',
'    begin',
'      for boundary_timers in ',
'        (',
'        select objt.objt_bpmn_id as objt_bpmn_id ',
'             , objt.objt_interrupting as objt_interrupting',
'             , sbfl.sbfl_process_level as sbfl_process_level',
'             , sbfl.sbfl_dgrm_id as sbfl_dgrm_id',
'             , sbfl.sbfl_current as parent_current_object',
'             , objt.objt_id as objt_id',
'          from flow_objects objt',
'          join flow_subflows sbfl ',
'            on sbfl.sbfl_current = objt.objt_attached_to',
'          join flow_processes prcs ',
'            on prcs.prcs_id = sbfl.sbfl_prcs_id',
'           and prcs.prcs_dgrm_id = objt.objt_dgrm_id',
'         where objt.objt_tag_name = flow_constants_pkg.gc_bpmn_boundary_event  ',
'           and objt.objt_sub_tag_name = flow_constants_pkg.gc_bpmn_timer_event_definition',
'           and sbfl.sbfl_id = p_subflow_id',
'           and prcs.prcs_id = p_process_id',
'        )',
'      loop',
'        case boundary_timers.objt_interrupting',
'        when 1 then',
'          -- process any before-event variable expressions on the starting object',
'          flow_expressions.process_expressions',
'          ( pi_objt_id     => boundary_timers.objt_id ',
'          , pi_set         => flow_constants_pkg.gc_expr_set_before_event',
'          , pi_prcs_id     => p_process_id',
'          , pi_sbfl_id     => p_subflow_id',
'          );',
'          -- test for any step errors',
'          if not flow_globals.get_step_error then ',
'            -- interupting timer.  set timer on current object in current subflow',
'            flow_timers_pkg.start_timer',
'            ( pi_prcs_id => p_process_id',
'            , pi_sbfl_id => p_subflow_id',
'            );',
'            l_parent_tag := '':SIT'';  -- (Self, Interrupting, Timer)',
'          end if;',
'        when 0 then',
'          -- non-interupting timer.  create child subflow starting at boundary event and start timer',
'          l_new_non_int_timer_sbfl := flow_engine_util.subflow_start',
'          ( p_process_id => p_process_id',
'          , p_parent_subflow => p_subflow_id',
'          , p_starting_object => boundary_timers.objt_bpmn_id',
'          , p_current_object => boundary_timers.objt_bpmn_id',
'          , p_route => ''from boundary event - run 1''',
'          , p_last_completed => boundary_timers.parent_current_object ',
'          , p_status => flow_constants_pkg.gc_sbfl_status_waiting_timer',
'          , p_parent_sbfl_proc_level => boundary_timers.sbfl_process_level',
'          , p_new_proc_level => false',
'          , p_dgrm_id => boundary_timers.sbfl_dgrm_id',
'          );',
' ',
'          -- process any before-event variable expressions on the starting object',
'          flow_expressions.process_expressions',
'          ( pi_objt_id     => boundary_timers.objt_id',
'          , pi_set         => flow_constants_pkg.gc_expr_set_before_event',
'          , pi_prcs_id     => p_process_id',
'          , pi_sbfl_id     => l_new_non_int_timer_sbfl.sbfl_id',
'          );',
'          -- test for any step errors',
'          if not flow_globals.get_step_error then ',
'            flow_timers_pkg.start_timer',
'            ( pi_prcs_id  => p_process_id',
'            , pi_sbfl_id  => l_new_non_int_timer_sbfl.sbfl_id',
'            , pi_step_key => l_new_non_int_timer_sbfl.step_key',
'            );',
'            -- test again for any step errors',
'            if not flow_globals.get_step_error then ',
'              -- set timer flag on child (Self, Noninterrupting, Timer)',
'              update flow_subflows sbfl',
'                  set sbfl.sbfl_has_events = sbfl.sbfl_has_events||'':SNT''',
'                where sbfl.sbfl_id = l_new_non_int_timer_sbfl.sbfl_id',
'                  and sbfl.sbfl_prcs_id = p_process_id',
'              ;',
'              l_parent_tag := '':CNT'';  -- (Child, Noninterrupting, Timer)',
'            end if;',
'          end if;',
'        end case;',
'        --- set timer flag on parent (it can get more than 1)',
'        update flow_subflows sbfl',
'          set sbfl.sbfl_has_events = sbfl.sbfl_has_events||l_parent_tag',
'        where sbfl.sbfl_id = p_subflow_id',
'          and sbfl.sbfl_prcs_id = p_process_id',
'        ;',
'      end loop;',
'    exception',
'      when no_data_found then',
'        return;',
'    end;',
'  end set_boundary_timers;',
'',
'  procedure unset_boundary_timers',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  )',
'  is ',
'    l_non_int_timer_sbfl  flow_subflows.sbfl_id%type;',
'    l_return_code         number;',
'  begin',
'    apex_debug.enter ',
'    ( ''unset_boundary_timers''',
'    , ''subflow'', p_subflow_id',
'    );',
'    begin',
'      for boundary_timers in ',
'        (',
'        select objt.objt_bpmn_id as objt_bpmn_id ',
'             , objt.objt_interrupting as objt_interrupting',
'          from flow_objects objt',
'          join flow_subflows sbfl ',
'            on sbfl.sbfl_current = objt.objt_attached_to',
'          join flow_processes prcs ',
'            on prcs.prcs_id = sbfl.sbfl_prcs_id',
'           and prcs.prcs_dgrm_id = objt.objt_dgrm_id',
'         where objt.objt_tag_name = flow_constants_pkg.gc_bpmn_boundary_event  ',
'           and objt.objt_sub_tag_name = flow_constants_pkg.gc_bpmn_timer_event_definition',
'           and sbfl.sbfl_id = p_subflow_id',
'           and prcs.prcs_id = p_process_id',
'        )',
'      loop',
'        case boundary_timers.objt_interrupting',
'        when 1 then',
'          -- interupting timer.  terminate timer on current object in current subflow',
'          flow_timers_pkg.terminate_timer',
'          ( pi_prcs_id => p_process_id',
'          , pi_sbfl_id => p_subflow_id',
'          , po_return_code => l_return_code',
'          );',
'        when 0 then',
'          -- non-interupting timer.  find child subflow starting at boundary event and delete if not yet fired',
'          -- timer will delete cascade',
'          delete from flow_subflows',
'          where sbfl_starting_object = boundary_timers.objt_bpmn_id',
'          and sbfl_sbfl_id = p_subflow_id',
'          and sbfl_prcs_id = p_process_id',
'          and sbfl_status = flow_constants_pkg.gc_sbfl_status_waiting_timer',
'          ;',
'        end case;',
'      end loop;',
'      -- remove the event flags from the subflow',
'      update flow_subflows sbfl',
'         set sbfl_has_events = ''''',
'       where sbfl.sbfl_id = p_subflow_id',
'         and sbfl.sbfl_prcs_id = p_process_id',
'      ;',
'    exception',
'      when no_data_found then',
'        return;',
'    end;',
'  end unset_boundary_timers;',
'',
'  procedure lock_child_boundary_timers',
'  ( p_process_id          in flow_processes.prcs_id%type',
'  , p_subflow_id          in flow_subflows.sbfl_id%type',
'  , p_parent_objt_bpmn_id in flow_objects.objt_bpmn_id%type',
'  ) ',
'  is ',
'    cursor c is ',
'        select child_sbfl.sbfl_id, child_timr.timr_id',
'          from flow_subflows child_sbfl',
'          join flow_timers child_timr',
'            on child_timr.timr_prcs_id = child_sbfl.sbfl_prcs_id',
'           and child_timr.timr_sbfl_id = child_sbfl.sbfl_id',
'         where child_sbfl.sbfl_starting_object = p_parent_objt_bpmn_id ',
'           and child_sbfl.sbfl_current = p_parent_objt_bpmn_id ',
'           and child_sbfl.sbfl_prcs_id = p_process_id',
'           and child_sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_waiting_timer',
'         order by child_sbfl.sbfl_id',
'        for update of child_sbfl.sbfl_id, child_timr.timr_id wait 3;',
'  begin ',
'    open c;',
'    close c;',
'  exception ',
'    when lock_timeout then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id     => p_process_id',
'      , pi_sbfl_id     => p_subflow_id',
'      , pi_message_key => ''boundary-event-child-lock-to''',
'      , p0             => p_subflow_id',
'      );',
'      -- $F4AMESSAGE ''boundary-event-child-lock-to'' || ''Child Boundary Subflows or Timers of %0 currently locked by another user.  Retry your transaction later.''  ',
'  end lock_child_boundary_timers; ',
'',
'  procedure handle_interrupting_boundary_event',
'    ( p_process_id in flow_processes.prcs_id%type',
'    , p_subflow_id in flow_subflows.sbfl_id%type',
'    ) ',
'  is',
'    l_boundary_objt_bpmn_id  flow_objects.objt_bpmn_id%type;',
'    l_parent_objt_tag        flow_objects.objt_tag_name%type;',
'    l_parent_objt_bpmn_id    flow_objects.objt_bpmn_id%type;',
'    l_child_process_level    flow_subflows.sbfl_process_level%type;',
'    l_step_key               flow_subflows.sbfl_step_key%type;',
'    l_timestamp              flow_subflows.sbfl_became_current%type;',
'  begin',
'    apex_debug.enter ',
'    ( ''handle_interrupting_boundary_event''',
'    , ''subflow'', p_subflow_id',
'    );',
'',
'    select boundary_objt.objt_bpmn_id',
'         , main_objt.objt_tag_name',
'         , main_objt.objt_bpmn_id',
'      into l_boundary_objt_bpmn_id',
'         , l_parent_objt_tag',
'         , l_parent_objt_bpmn_id',
'      from flow_subflows sbfl',
'      join flow_processes prcs',
'        on prcs.prcs_id = sbfl.sbfl_prcs_id',
'      join flow_objects main_objt',
'        on main_objt.objt_bpmn_id = sbfl.sbfl_current',
'       and main_objt.objt_dgrm_id = prcs.prcs_dgrm_id',
'      join flow_objects boundary_objt',
'        on boundary_objt.objt_attached_to = main_objt.objt_bpmn_id',
'       and boundary_objt.objt_dgrm_id = prcs.prcs_dgrm_id',
'     where sbfl.sbfl_id = p_subflow_id',
'       and prcs.prcs_id = p_process_id',
'       and boundary_objt.objt_sub_tag_name = flow_constants_pkg.gc_bpmn_timer_event_definition',
'       and boundary_objt.objt_interrupting = 1',
'        ;',
'    if l_parent_objt_tag = flow_constants_pkg.gc_bpmn_subprocess',
'    then',
'       -- if the boundary event is on a subprocess (rather than a task type), terminate the subprocess level',
'       -- find the process level inside the subprocess and then stop all processing at that level and below',
'      select distinct sbfl.sbfl_process_level',
'        into l_child_process_level',
'        from flow_subflows sbfl',
'       where sbfl.sbfl_sbfl_id = p_subflow_id',
'       ;',
'       if l_child_process_level is not null ',
'       then ',
'          flow_engine_util.terminate_level',
'          ( p_process_id    => p_process_id',
'          , p_process_level => l_child_process_level',
'          );',
'       end if;',
'    end if;',
'    -- clean up any other boundary timers on the object',
'    flow_boundary_events.unset_boundary_timers ',
'    ( p_process_id => p_process_id',
'    , p_subflow_id => p_subflow_id',
'    );',
'    -- generate a step key & insert in the update...use later',
'    l_timestamp := systimestamp;',
'    l_step_key := flow_engine_util.step_key ( pi_sbfl_id   => p_subflow_id',
'                                            , pi_current => l_boundary_objt_bpmn_id',
'                                            , pi_became_current => l_timestamp ',
'                                            );',
'    -- switch processing onto boundaryEvent path and do next step',
'    update flow_subflows sbfl',
'       set sbfl.sbfl_current = l_boundary_objt_bpmn_id',
'         , sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_running',
'         , sbfl.sbfl_last_completed = l_parent_objt_bpmn_id',
'         , sbfl.sbfl_became_current = l_timestamp',
'         , sbfl.sbfl_step_key = l_step_key',
'         , sbfl.sbfl_last_update = l_timestamp ',
'     where sbfl.sbfl_id = p_subflow_id ',
'       and sbfl.sbfl_prcs_id = p_process_id',
'    ;',
'    -- process on-event variable expressions for the boundary event',
'    flow_expressions.process_expressions',
'    ( pi_objt_bpmn_id => l_boundary_objt_bpmn_id  ',
'    , pi_set          => flow_constants_pkg.gc_expr_set_on_event',
'    , pi_prcs_id      => p_process_id',
'    , pi_sbfl_id      => p_subflow_id',
'    );',
'    -- test for errors',
'    if flow_globals.get_step_error then ',
'      -- has step errors from expressions - set error status',
'      flow_errors.set_error_status',
'      ( pi_prcs_id => p_process_id',
'      , pi_sbfl_id => p_subflow_id',
'      );',
'    else',
'      -- If not, step off on new path...',
'      flow_engine.flow_complete_step ',
'      ( p_process_id => p_process_id',
'      , p_subflow_id => p_subflow_id ',
'      , p_step_key => l_step_key',
'      );',
'    end if;',
'',
'  end handle_interrupting_boundary_event;',
'',
'  procedure get_boundary_event',
'  ( pi_dgrm_id                  in  flow_diagrams.dgrm_id%type',
'  , pi_throw_objt_bpmn_id       in  flow_objects.objt_bpmn_id%type',
'  , pi_par_sbfl                 in  flow_subflows.sbfl_id%type',
'  , pi_sub_tag_name             in  flow_objects.objt_sub_tag_name%type ',
'  , po_boundary_objt            out flow_objects.objt_bpmn_id%type',
'  , po_interrupting             out flow_objects.objt_interrupting%type',
'  )',
'is ',
'  l_process_id    flow_processes.prcs_id%type;',
'begin',
'    -- in later release if named errors and escalations are supported, change this to look for specific event',
'    select boundary_objt.objt_bpmn_id',
'         , boundary_objt.objt_interrupting',
'         , parent_sbfl.sbfl_prcs_id',
'      into po_boundary_objt',
'         , po_interrupting',
'         , l_process_id',
'      from flow_objects boundary_objt',
'      join flow_subflows parent_sbfl',
'        on parent_sbfl.sbfl_current = boundary_objt.objt_attached_to',
'      join flow_processes prcs',
'        on prcs.prcs_id = parent_sbfl.sbfl_prcs_id',
'       and prcs.prcs_dgrm_id = boundary_objt.objt_dgrm_id',
'     where parent_sbfl.sbfl_id = pi_par_sbfl',
'       and boundary_objt.objt_sub_tag_name = pi_sub_tag_name',
'       and boundary_objt.objt_dgrm_id = pi_dgrm_id',
'        ;',
'exception',
'  when no_data_found then',
'      -- no boundary event found -- returned flow should continue from normal return',
'      po_boundary_objt := null;',
'      if pi_sub_tag_name in (flow_constants_pkg.gc_bpmn_error_event_definition) then',
'         po_interrupting := 1;',
'      else ',
'         po_interrupting := 0;',
'      end if;',
'  when too_many_rows then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id     => l_process_id',
'      , pi_sbfl_id     => pi_par_sbfl',
'      , pi_message_key => ''boundary-event-too-many''',
'      , p0 => pi_sub_tag_name',
'      );',
'      -- $F4AMESSAGE ''boundary-event-too-many'' || ''More than one %0 boundaryEvent found on sub process.''  ',
'end get_boundary_event;',
'',
'procedure process_boundary_event',
'  ( p_sbfl_info     in flow_subflows%rowtype',
'  , p_step_info     in flow_types_pkg.flow_step_info',
'  , p_par_sbfl      in flow_subflows.sbfl_id%type',
'  )',
'is ',
'  l_next_objt             flow_objects.objt_bpmn_id%type;',
'  l_interrupting          flow_objects.objt_interrupting%type;',
'  l_new_sbfl              flow_types_pkg.t_subflow_context;',
'  l_parent_processs_level flow_subflows.sbfl_process_level%type;',
'  l_parent_dgrm_id        flow_diagrams.dgrm_id%type;',
'  l_parent_step_key       flow_subflows.sbfl_step_key%type;',
'  l_timestamp             flow_subflows.sbfl_became_current%type;',
'  l_step_key              flow_subflows.sbfl_step_key%type;',
'begin ',
'  apex_debug.enter ',
'  ( ''process_boundary_event''',
'  , ''subflow'', p_sbfl_info.sbfl_id',
'  );',
'  -- set the throwing event to completed',
'  flow_logging.log_step_completion   ',
'  ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'  , p_subflow_id => p_sbfl_info.sbfl_id',
'  , p_completed_object => p_step_info.target_objt_ref',
'  );',
'  -- find matching boundary event of its type',
'  get_boundary_event',
'  ( pi_dgrm_id => p_step_info.dgrm_id',
'  , pi_throw_objt_bpmn_id => p_step_info.target_objt_ref',
'  , pi_par_sbfl => p_par_sbfl',
'  , pi_sub_tag_name => p_step_info.target_objt_subtag',
'  , po_boundary_objt => l_next_objt',
'  , po_interrupting => l_interrupting',
'  );',
'  if l_next_objt is null then',
'    flow_errors.handle_instance_error',
'    ( pi_prcs_id     => p_sbfl_info.sbfl_prcs_id',
'    , pi_sbfl_id     => p_sbfl_info.sbfl_id',
'    , pi_message_key => ''boundary-event-no-catch-found''',
'    , p0 => p_step_info.target_objt_subtag',
'    );',
'    -- $F4AMESSAGE ''boundary-event-no-catch-found'' || ''No boundaryEvent of type %0 found to catch event.''  ',
'  end if;',
'  if l_interrupting = 1 then',
'    -- first remove any non-interrupting timers that are on the parent event',
'    unset_boundary_timers (p_sbfl_info.sbfl_prcs_id, p_par_sbfl);',
'    -- stop processing in sub process and all child levels',
'    flow_engine_util.terminate_level',
'    ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'    , p_process_level => p_sbfl_info.sbfl_process_level',
'    );        ',
'    -- generate a step key & insert in the update...use later',
'    l_timestamp := systimestamp;',
'    l_step_key := flow_engine_util.step_key ( pi_sbfl_id   => l_next_objt',
'                                            , pi_current => l_next_objt',
'                                            , pi_became_current => l_timestamp ',
'                                            );',
'    -- set parent subflow to boundary event and do flow_complete_step',
'    update flow_subflows sbfl',
'        set sbfl.sbfl_current = l_next_objt',
'          , sbfl.sbfl_last_completed = p_step_info.target_objt_ref ',
'          , sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_running',
'          , sbfl.sbfl_became_current = l_timestamp',
'          , sbfl.sbfl_step_key = l_step_key',
'          , sbfl_last_update = l_timestamp',
'      where sbfl.sbfl_id = p_par_sbfl',
'        and sbfl.sbfl_prcs_id = p_sbfl_info.sbfl_prcs_id',
'    ;',
'    -- process on-ev'))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'ent expressions for boundary event',
'    flow_expressions.process_expressions',
'    ( pi_objt_bpmn_id => l_next_objt  ',
'    , pi_set          => flow_constants_pkg.gc_expr_set_on_event',
'    , pi_prcs_id      => p_sbfl_info.sbfl_prcs_id',
'    , pi_sbfl_id      => p_par_sbfl',
'    );',
'',
'    if p_step_info.target_objt_tag = flow_constants_pkg.gc_bpmn_intermediate_throw_event  ',
'    then ',
'      flow_engine.flow_complete_step',
'      ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'      , p_subflow_id => p_par_sbfl',
'      , p_step_key   => l_step_key',
'      ); ',
'    end if;',
'',
'  else ',
'      -- non interrupting.  ',
'      select par_sbfl.sbfl_process_level',
'           , par_sbfl.sbfl_dgrm_id',
'        into l_parent_processs_level ',
'           , l_parent_dgrm_id',
'        from flow_subflows par_sbfl',
'        where par_sbfl.sbfl_id = p_par_sbfl',
'          and par_sbfl.sbfl_prcs_id = p_sbfl_info.sbfl_prcs_id',
'          ;',
'',
'      -- fork first, then procced on main, then step off on child',
'',
'      -- start new subflow starting at the boundary event and step to next task',
'      l_new_sbfl := flow_engine_util.subflow_start',
'      ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'      , p_parent_subflow => p_par_sbfl',
'      , p_starting_object => l_next_objt',
'      , p_current_object => l_next_objt',
'      , p_route => ''from ''||l_next_objt',
'      , p_last_completed => p_step_info.target_objt_ref -- even thou it hasnt yet completed ',
'      , p_status => flow_constants_pkg.gc_sbfl_status_running',
'      , p_parent_sbfl_proc_level => l_parent_processs_level',
'      , p_new_proc_level => false',
'      , p_dgrm_id => l_parent_dgrm_id',
'      );',
'      ',
'      apex_debug.message',
'      (',
'        p_message => ''process_boundary_event.  target_objt_tag :''||p_step_info.target_objt_subtag',
'      , p_level => 3',
'      );',
'      -- process on-event expressions for boundary event',
'      flow_expressions.process_expressions',
'      ( pi_objt_bpmn_id => l_next_objt  ',
'      , pi_set          => flow_constants_pkg.gc_expr_set_on_event',
'      , pi_prcs_id      => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id      => l_new_sbfl.sbfl_id',
'      );     ',
'',
'      if not flow_globals.get_step_error then',
'',
'',
'        if p_step_info.target_objt_tag = flow_constants_pkg.gc_bpmn_intermediate_throw_event  ',
'        then ',
'            -- do next_step on triggering subflow if an ITE ',
'            flow_engine.flow_complete_step ',
'            ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'            , p_subflow_id => p_sbfl_info.sbfl_id ',
'            , p_step_key   => p_sbfl_info.sbfl_step_key',
'            );',
'        elsif p_step_info.target_objt_tag = flow_constants_pkg.gc_bpmn_end_event  ',
'        then',
'            -- normal end event',
'            flow_engine_util.subflow_complete',
'            ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'            , p_subflow_id => p_sbfl_info.sbfl_id',
'            );',
'        end if;',
'',
'        -- step forward from boundary event',
'        flow_engine.flow_complete_step ',
'        ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'        , p_subflow_id => l_new_sbfl.sbfl_id',
'        , p_step_key   => l_new_sbfl.step_key',
'        );',
'      else',
'        -- set errort status on instance and subflow',
'        flow_errors.set_error_status',
'        ( pi_prcs_id => p_sbfl_info.sbfl_prcs_id',
'        , pi_sbfl_id => p_sbfl_info.sbfl_id',
'        );',
'      end if;',
'    end if;',
'  end process_boundary_event;',
'',
'',
'end flow_boundary_events;',
'/',
'',
'create or replace package body flow_tasks',
'as ',
'',
'  -- example to get taskType info from object_attributes',
'  function get_task_type',
'  (',
'    pi_objt_id in flow_objects.objt_id%type',
'  )',
'    return flow_object_attributes.obat_vc_value%type',
'  as',
'    l_return flow_object_attributes.obat_vc_value%type;',
'  begin',
'',
'    select obat_vc_value',
'      into l_return',
'      from flow_object_attributes',
'     where obat_objt_id = pi_objt_id',
'       and obat_key = flow_constants_pkg.gc_task_type_key',
'    ;',
'',
'    return l_return;',
'  exception',
'    when no_data_found then',
'      apex_debug.warn',
'      (',
'        p_message => ''No task type found for object %s''',
'      , p0        =>  pi_objt_id',
'      );',
'      return null;',
'  end get_task_type;',
'',
'  procedure handle_script_error -- largely duplicates flow_errors.handle_instance_error',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_script_object in flow_objects.objt_bpmn_id%type ',
'  , p_error_type    in varchar2',
'  , p_error_stack   in varchar2 default null',
'  )',
'  is ',
'    l_prcs_id   flow_processes.prcs_id%type;',
'    l_sbfl_id   flow_subflows.sbfl_id%type;',
'  begin ',
'        apex_debug.enter ',
'      ( ''handle_script_error''',
'      , ''p_script_object: '', p_script_object',
'      , ''p_error_type '', p_error_type ',
'      );',
'       -- lock process and subflow',
'      select prcs.prcs_id, sbfl.sbfl_id',
'        into l_prcs_id, l_sbfl_id',
'        from flow_processes prcs',
'        join flow_subflows sbfl ',
'          on prcs.prcs_id = sbfl.sbfl_prcs_id',
'       where prcs.prcs_id = p_process_id',
'         and sbfl.sbfl_id = p_subflow_id',
'      for update wait 2;',
'      -- set subflow to error status',
'      update flow_subflows sbfl',
'         set sbfl.sbfl_current = p_script_object',
'           , sbfl.sbfl_last_update = systimestamp',
'           , sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_error',
'       where sbfl.sbfl_id = p_subflow_id',
'         and sbfl.sbfl_prcs_id = p_process_id',
'      ;',
'      -- set instance to error status',
'      update flow_processes prcs',
'         set prcs.prcs_status = flow_constants_pkg.gc_prcs_status_error',
'           , prcs.prcs_last_update = systimestamp',
'       where prcs.prcs_id = p_process_id',
'      ;',
'      -- log error as instance event',
'      flow_logging.log_instance_event',
'      ( p_process_id  => p_process_id ',
'      , p_objt_bpmn_id => p_script_object',
'      , p_event       => flow_constants_pkg.gc_prcs_event_error',
'      , p_comment     => case p_error_type',
'                         when ''failed''      then ''ScriptTask failed on object ''',
'                         when ''stop_engine'' then ''User Script Requested ScriptTask Stop on object ''',
'                         end ',
'                         || p_script_object|| '' error data....''||p_error_stack',
'      );',
'',
'      apex_debug.message ',
'      ( p_message => ''Script failed in ScriptTask.  Object: %0.''',
'      , p0        => p_script_object',
'      , p_level   => 2',
'      );',
'  end handle_script_error;',
'',
'',
'  procedure process_task',
'    ( p_sbfl_info     in flow_subflows%rowtype',
'    , p_step_info     in flow_types_pkg.flow_step_info',
'    )',
'  is',
'  begin',
'    apex_debug.enter ',
'    ( ''process_task''',
'    , ''object: '', p_step_info.target_objt_tag ',
'    );',
'    -- set boundaryEvent Timers, if any',
'    flow_boundary_events.set_boundary_timers',
'    ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'    , p_subflow_id => p_sbfl_info.sbfl_id',
'    );  ',
'  end process_task;',
'',
'  procedure process_userTask',
'    ( p_sbfl_info     in flow_subflows%rowtype',
'    , p_step_info     in flow_types_pkg.flow_step_info',
'    )',
'  is ',
'  begin',
'    -- current implementation is limited to one userTask type, which is to run a user defined APEX page',
'    -- future userTask types could include parameterised, standarised template pages , e.g., for approvals??  template scripts ??',
'    -- current implementation is implemented via the process inbox view.  ',
'    apex_debug.enter ',
'    ( ''process_userTask''',
'    , ''p_step_info.target_objt_tag'', p_step_info.target_objt_tag ',
'    );',
'    -- set boundaryEvent Timers, if any',
'    flow_boundary_events.set_boundary_timers ',
'    ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'    , p_subflow_id => p_sbfl_info.sbfl_id',
'    );  ',
'  end process_userTask;',
'',
'  procedure process_scriptTask',
'  ( p_sbfl_info     in flow_subflows%rowtype',
'  , p_step_info     in flow_types_pkg.flow_step_info',
'  )',
'  is ',
'  begin',
'    apex_debug.enter ',
'    ( ''process_scriptTask''',
'    , ''p_step_info.target_objt_tag'', p_step_info.target_objt_tag ',
'    );',
'    -- current implementation is limited to one scriptTask type, which is to run a user defined PL/SQL script',
'    -- future scriptTask types could include standarised template scripts ??',
'    -- current implementation is limited to synchronous script execution (i.e., script is run as part of Flows for APEX process)',
'    -- future implementations could include async scriptTasks, where script execution is queued.',
'  ',
'    -- set work started time',
'    flow_engine.start_step ',
'    ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'    , p_subflow_id => p_sbfl_info.sbfl_id',
'    , p_step_key   => p_sbfl_info.sbfl_step_key',
'    , p_called_internally => true',
'    );',
'    ',
'    flow_plsql_runner_pkg.run_task_script(',
'      pi_prcs_id  => p_sbfl_info.sbfl_prcs_id',
'    , pi_sbfl_id  => p_sbfl_info.sbfl_id',
'    , pi_objt_id  => p_step_info.target_objt_id',
'    , pi_step_key => p_sbfl_info.sbfl_step_key',
'    );',
'',
'    flow_engine.flow_complete_step ',
'    ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'    , p_subflow_id => p_sbfl_info.sbfl_id',
'    , p_step_key   => p_sbfl_info.sbfl_step_key',
'    );',
'',
'  exception',
'    when flow_plsql_runner_pkg.e_plsql_script_failed then',
'      rollback;',
'      apex_debug.info ',
'      ( p_message => ''Rollback initiated after script failed in plsql script runner''',
'      );',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id        => p_sbfl_info.sbfl_id',
'      , pi_message_key    => ''plsql_script_failed''',
'      , p0 => p_sbfl_info.sbfl_prcs_id',
'      , p1 => p_step_info.target_objt_ref',
'      );',
'      -- $F4AMESSAGE ''plsql_script_failed'' || ''Process %0: ScriptTask %1 failed due to PL/SQL error - see event log.''',
'    when flow_plsql_runner_pkg.e_plsql_script_requested_stop then',
'      rollback;',
'      apex_debug.info ',
'      ( p_message => ''Rollback initiated after script requested stop_engine in plsql script runner''',
'      ); ',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id        => p_sbfl_info.sbfl_id',
'      , pi_message_key    => ''plsql_script_requested_stop''',
'      , p0 => p_sbfl_info.sbfl_prcs_id',
'      , p1 => p_step_info.target_objt_ref',
'      );  ',
'      -- $F4AMESSAGE ''plsql_script_requested_stop'' || ''Process %0: ScriptTask %1 requested processing stop - see event log.''',
'  end process_scriptTask;',
'',
'  procedure process_serviceTask ',
'  ( p_sbfl_info     in flow_subflows%rowtype',
'  , p_step_info     in flow_types_pkg.flow_step_info',
'  )',
'  is ',
'  begin',
'    apex_debug.enter ',
'    ( ''process_serviceTask''',
'    , ''p_step_info.target_objt_tag'', p_step_info.target_objt_tag ',
'    );',
'  ',
'    -- future serviceTask types could include text message, tweet, AOP document via email, etc.',
'    -- current implementation is limited to synchronous email send (i.e., email sent as part of Flows for APEX process).',
'    -- future implementations could include async serviceTask, where message generation is queued, or non-email services',
'',
'    flow_engine.start_step ',
'    ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'    , p_subflow_id => p_sbfl_info.sbfl_id',
'    , p_step_key   => p_sbfl_info.sbfl_step_key',
'    , p_called_internally => true',
'    );',
'',
'    case get_task_type( p_step_info.target_objt_id )',
'      when flow_constants_pkg.gc_apex_task_execute_plsql then',
'        flow_plsql_runner_pkg.run_task_script',
'        ( pi_prcs_id  => p_sbfl_info.sbfl_prcs_id',
'        , pi_sbfl_id  => p_sbfl_info.sbfl_id',
'        , pi_objt_id  => p_step_info.target_objt_id',
'        , pi_step_key => p_sbfl_info.sbfl_step_key',
'        );',
'      when flow_constants_pkg.gc_apex_servicetask_send_mail then',
'        flow_services.send_email',
'        ( pi_prcs_id => p_sbfl_info.sbfl_prcs_id',
'        , pi_sbfl_id => p_sbfl_info.sbfl_id',
'        , pi_objt_id => p_step_info.target_objt_id',
'        );',
'      else',
'        null;',
'    end case;',
'',
'    flow_engine.flow_complete_step ',
'    ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'    , p_subflow_id => p_sbfl_info.sbfl_id ',
'    , p_step_key   => p_sbfl_info.sbfl_step_key',
'    );',
'',
'  exception',
'    when flow_services.e_wrong_default_workspace then',
'      rollback;',
'      apex_debug.info( p_message => ''Rollback initiated after default workspace not valid''',
'      );',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id        => p_sbfl_info.sbfl_id',
'      , pi_message_key    => ''wrong-default-workspace''',
'      , p0 => p_sbfl_info.sbfl_prcs_id',
'      , p1 => p_step_info.target_objt_ref',
'      );',
'    when flow_services.e_workspace_not_found then',
'      rollback;',
'      apex_debug.info( p_message => ''Rollback initiated after workspace not found''',
'      );',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id        => p_sbfl_info.sbfl_id',
'      , pi_message_key    => ''workspace-not-found''',
'      , p0 => p_sbfl_info.sbfl_prcs_id',
'      , p1 => p_step_info.target_objt_ref',
'      );',
'    when flow_services.e_email_no_from then ',
'      rollback;',
'      apex_debug.info ',
'      ( p_message => ''Rollback initiated after from attribute not found''',
'      );',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id        => p_sbfl_info.sbfl_id',
'      , pi_message_key    => ''email-no-from''',
'      , p0 => p_sbfl_info.sbfl_prcs_id',
'      , p1 => p_step_info.target_objt_ref',
'      );',
'    when flow_services.e_email_no_to then ',
'      rollback;',
'      apex_debug.info ',
'      ( p_message => ''Rollback initiated after to attribute not found''',
'      );',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id        => p_sbfl_info.sbfl_id',
'      , pi_message_key    => ''email-no-to''',
'      , p0 => p_sbfl_info.sbfl_prcs_id',
'      , p1 => p_step_info.target_objt_ref',
'      );',
'    when flow_services.e_email_no_template then',
'      rollback;',
'      apex_debug.info ',
'      ( p_message => ''Rollback initiated after template or app_alias attributes not found''',
'      );',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id        => p_sbfl_info.sbfl_id',
'      , pi_message_key    => ''email-no-template''',
'      , p0 => p_sbfl_info.sbfl_prcs_id',
'      , p1 => p_step_info.target_objt_ref',
'      ); ',
'    when flow_services.e_email_no_body then',
'      rollback;',
'      apex_debug.info ',
'      ( p_message => ''Rollback initiated after body attribute not found''',
'      );',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id        => p_sbfl_info.sbfl_id',
'      , pi_message_key    => ''email-no-body''',
'      , p0 => p_sbfl_info.sbfl_prcs_id',
'      , p1 => p_step_info.target_objt_ref',
'      );',
'    when flow_services.e_json_not_valid then',
'      rollback;',
'      apex_debug.info ',
'      ( p_message => ''Rollback initiated after placeholder JSON object not valid''',
'      );',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id        => p_sbfl_info.sbfl_id',
'      , pi_message_key    => ''email-placeholder-json-invalid''',
'      , p0 => p_sbfl_info.sbfl_prcs_id',
'      , p1 => p_step_info.target_objt_ref',
'      );',
'    when flow_services.e_email_failed then',
'      rollback;',
'      apex_debug.info ',
'      ( p_message => ''Rollback initiated after send_email failed in service task''',
'      );',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id        => p_sbfl_info.sbfl_id',
'      , pi_message_key    => ''email-failed''',
'      , p0 => p_sbfl_info.sbfl_prcs_id',
'      , p1 => p_step_info.target_objt_ref',
'      );',
'    when flow_plsql_runner_pkg.e_plsql_script_failed then',
'      rollback;',
'      apex_debug.info ',
'      ( p_message => ''Rollback initiated after script failed in plsql script runner''',
'      );',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id        => p_sbfl_info.sbfl_id',
'      , pi_message_key    => ''plsql_script_failed''',
'      , p0 => p_sbfl_info.sbfl_prcs_id',
'      , p1 => p_step_info.target_objt_ref',
'      );',
'      -- $F4AMESSAGE ''plsql_script_failed'' || ''Process %0: PLSQL Script %1 failed due to PL/SQL error - see event log.''',
'    when flow_plsql_runner_pkg.e_plsql_script_requested_stop then',
'      rollback;',
'      apex_debug.info ',
'      ( p_message => ''Rollback initiated after script requested stop_engine in plsql script runner''',
'      ); ',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id        => p_sbfl_info.sbfl_id',
'      , pi_message_key    => ''plsql_script_requested_stop''',
'      , p0 => p_sbfl_info.sbfl_prcs_id',
'      , p1 => p_step_info.target_objt_ref',
'      );  ',
'      -- $F4AMESSAGE ''plsql_script_requested_stop'' || ''Process %0: PL/SQL Script %1 requested processing stop - see event log.''',
'',
'  end process_serviceTask;',
'',
'  procedure process_manualTask',
'  ( p_sbfl_info     in flow_subflows%rowtype',
'  , p_step_info     in flow_types_pkg.flow_step_info',
'  )',
'  is ',
'  begin',
'    apex_debug.enter ',
'    (''process_manualTask''',
'    , ''p_step_info.target_objt_tag'', p_step_info.target_objt_tag ',
'    );',
'',
'    -- current implementation of manualTask performs exactly like a standard Task, without attached boundary timers',
'    -- future implementation could include auto-call of an APEX page telling you what the manual task is and providing information about it?',
'',
'    -- set boundaryEvent Timers, if any',
'    flow_boundary_events.set_boundary_timers ',
'    ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'    , p_subflow_id => p_sbfl_info.sbfl_id',
'    );  ',
'  end process_manualTask;',
'',
'    procedure process_businessRuleTask',
'  ( p_sbfl_info     in flow_subflows%rowtype',
'  , p_step_info     in flow_types_pkg.flow_step_info',
'  )',
'  is ',
'  begin',
'    apex_debug.enter ',
'    ( ''process_businessRuleTask''',
'    , ''p_step_info.target_objt_tag'', p_step_info.target_objt_tag ',
'    );',
'    -- current implementation is limited to one businessRuleTask type, ',
'    -- which is to run a user defined PL/SQL script',
'    -- future scriptTask types could include DMN or REST calls to other DecisionRule Engines',
'    -- current implementation is limited to synchronous script execution (i.e., script is run as part of Flows for APEX process)',
'    -- future implementations could include async scriptTasks, where script execution is queued.',
'  ',
'    -- set work started time',
'    flow_engine.start_step ',
'    ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'    , p_subflow_id => p_sbfl_info.sbfl_id',
'    , p_step_key   => p_sbfl_info.sbfl_step_key',
'    , p_called_internally => true',
'    );',
'    ',
'    case get_task_type( p_step_info.target_objt_id )',
'      when flow_constants_pkg.gc_apex_task_execute_plsql then',
'        flow_plsql_runner_pkg.run_task_script',
'        ( pi_prcs_id => p_sbfl_info.sbfl_prcs_id',
'        , pi_sbfl_id => p_sbfl_info.sbfl_id',
'        , pi_objt_id => p_step_info.target_objt_id',
'        );',
'      else',
'        null;',
'    end case;',
'    ',
'    flow_engine.flow_complete_step ',
'    ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'    , p_subflow_id => p_sbfl_info.sbfl_id',
'    , p_step_key   => p_sbfl_info.sbfl_step_key',
'    );',
'',
'  exception',
'    when flow_plsql_runner_pkg.e_plsql_script_failed then',
'      rollback;',
'      apex_debug.info ',
'      ( p_message => ''Rollback initiated after script failed in plsql script runner''',
'      );',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id        => p_sbfl_info.sbfl_id',
'      , pi_message_key    => ''plsql_script_failed''',
'      , p0 => p_sbfl_info.sbfl_prcs_id',
'      , p1 => p_step_info.target_objt_ref',
'      );',
'      -- $F4AMESSAGE ''plsql_script_failed'' || ''Process %0: PL/SQL Script %1 failed due to PL/SQL error - see event log.''',
'    when flow_plsql_runner_pkg.e_plsql_script_requested_stop then',
'      rollback;',
'      apex_debug.info ',
'      ( p_message => ''Rollback initiated after script requested stop_engine in plsql script runner''',
'      ); ',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id        => p_sbfl_info.sbfl_id',
'      , pi_message_key    => ''plsql_script_requested_stop''',
'      , p0 => p_sbfl_info.sbfl_prcs_id',
'      , p1 => p_step_info.target_objt_ref',
'      );  ',
'      -- $F4AMESSAGE ''plsql_script_requested_stop'' || ''Process %0: PL/SQL Script %1 requested processing stop - see event log.''',
'  end process_businessRuleTask;',
'',
'  ',
'end flow_tasks;',
'/',
'',
'create or replace package body flow_services',
'as',
'  g_workspace varchar2(100) := flow_engine_util.get_config_value(',
'                                   p_config_key    => ''default_workspace''',
'                                 , p_default_value => flow_constants_pkg.gc_config_default_default_workspace',
'                               );',
'',
'  g_email_sender varchar2(100) := flow_engine_util.get_config_value(',
'                                   p_config_key    => ''default_email_sender''',
'                                 , p_default_value => ''''  ',
'                               );',
'',
'  procedure set_workspace_id(',
'    p_workspace_name in varchar2',
'  )',
'  is',
'    l_workspace_id number;',
'  begin',
'    l_workspace_id := apex_util.find_security_group_id (p_workspace => p_workspace_name);',
'    if (l_workspace_id is null) then',
'      raise e_wrong_default_workspace;',
'    end if;',
'    apex_util.set_security_group_id (p_security_group_id => l_workspace_id);',
'  end set_workspace_id;',
'',
'  procedure send_email(',
'      pi_prcs_id in flow_processes.prcs_id%type',
'    , pi_sbfl_id in flow_subflows.sbfl_id%type',
'    , pi_objt_id in flow_objects.objt_id%type',
'   )',
'    is',
'      l_from             flow_object_attributes.obat_vc_value%type;',
'      l_to               flow_object_attributes.obat_vc_value%type;',
'      l_cc               flow_object_attributes.obat_vc_value%type;',
'      l_bcc              flow_object_attributes.obat_vc_value%type;',
'      l_reply_to         flow_object_attributes.obat_vc_value%type;',
'      l_use_template     boolean := false;',
'      l_template_id      flow_object_attributes.obat_vc_value%type;',
'      l_placeholders     flow_object_attributes.obat_clob_value%type;',
'      l_immediate        boolean := false;',
'      l_application_id   flow_object_attributes.obat_vc_value%type;',
'      l_subject          flow_object_attributes.obat_vc_value%type;',
'      l_body             flow_object_attributes.obat_clob_value%type;',
'      l_body_html        flow_object_attributes.obat_clob_value%type;',
'      l_attachment_query flow_object_attributes.obat_vc_value%type;',
'      l_mail_id          number;',
'      type t_attachment  is record (file_name varchar2(200), mime_type varchar2(200), blob_content blob );',
'      type t_attachments is table of t_attachment;',
'      l_attachments      t_attachments;',
'      l_workspace        varchar2(100);',
'      l_session          varchar2(20) := v(''APP_SESSION'');',
'      l_json_object      json_object_t;',
'    begin',
'      apex_debug.enter ',
'      ( ''send_email''',
'      , ''pi_objt_id'', pi_objt_id',
'      );',
'',
'      flow_globals.set_context ',
'      ( pi_prcs_id => pi_prcs_id',
'      , pi_sbfl_id => pi_sbfl_id ',
'      );',
'      ',
'      for rec in (',
'      select obat.obat_key',
'          , obat.obat_vc_value',
'          , obat.obat_clob_value',
'          from flow_object_attributes obat',
'      where obat.obat_objt_id = pi_objt_id',
'          and obat.obat_key in ( flow_constants_pkg.gc_apex_servicetask_email_from,',
'                                 flow_constants_pkg.gc_apex_servicetask_email_to,            ',
'                                 flow_constants_pkg.gc_apex_servicetask_email_cc,            ',
'                                 flow_constants_pkg.gc_apex_servicetask_email_bcc,     ',
'                                 flow_constants_pkg.gc_apex_servicetask_email_reply_to,      ',
'                                 flow_constants_pkg.gc_apex_servicetask_use_template,  ',
'                                 flow_constants_pkg.gc_apex_servicetask_application_id,',
'                                 flow_constants_pkg.gc_apex_servicetask_template_id,   ',
'                                 flow_constants_pkg.gc_apex_servicetask_placeholder,',
'                                 flow_constants_pkg.gc_apex_servicetask_immediately,',
'                                 flow_constants_pkg.gc_apex_servicetask_subject,',
'                                 flow_constants_pkg.gc_apex_servicetask_body_text,',
'                                 flow_constants_pkg.gc_apex_servicetask_body_html,',
'                                 flow_constants_pkg.gc_apex_servicetask_attachment',
'                              )',
'      )',
'      loop',
'        case rec.obat_key',
'          when flow_constants_pkg.gc_apex_servicetask_email_from then',
'            l_from := rec.obat_vc_value;',
'            flow_process_vars.do_substitution( pi_prcs_id => pi_prcs_id, pi_sbfl_id => pi_sbfl_id, pio_string => l_from );',
'          when flow_constants_pkg.gc_apex_servicetask_email_to then',
'            l_to := rec.obat_vc_value;',
'            flow_process_vars.do_substitution( pi_prcs_id => pi_prcs_id, pi_sbfl_id => pi_sbfl_id, pio_string => l_to );',
'          when flow_constants_pkg.gc_apex_servicetask_email_cc then',
'            l_cc := rec.obat_vc_value;',
'            flow_process_vars.do_substitution( pi_prcs_id => pi_prcs_id, pi_sbfl_id => pi_sbfl_id, pio_string => l_cc );',
'          when flow_constants_pkg.gc_apex_servicetask_email_bcc then',
'            l_bcc := rec.obat_vc_value;',
'            flow_process_vars.do_substitution( pi_prcs_id => pi_prcs_id, pi_sbfl_id => pi_sbfl_id, pio_string => l_bcc );',
'          when flow_constants_pkg.gc_apex_servicetask_email_reply_to then',
'            l_reply_to := rec.obat_vc_value;',
'            flow_process_vars.do_substitution( pi_prcs_id => pi_prcs_id, pi_sbfl_id => pi_sbfl_id, pio_string => l_reply_to );',
'          when flow_constants_pkg.gc_apex_servicetask_use_template then',
'            l_use_template := ( rec.obat_vc_value = flow_constants_pkg.gc_vcbool_true );',
'          when flow_constants_pkg.gc_apex_servicetask_application_id then',
'            l_application_id := rec.obat_vc_value;',
'            flow_process_vars.do_substitution( pi_prcs_id => pi_prcs_id, pi_sbfl_id => pi_sbfl_id, pio_string => l_application_id );',
'          when flow_constants_pkg.gc_apex_servicetask_template_id then',
'            l_template_id := rec.obat_vc_value;',
'            flow_process_vars.do_substitution( pi_prcs_id => pi_prcs_id, pi_sbfl_id => pi_sbfl_id, pio_string => l_template_id );',
'          when flow_constants_pkg.gc_apex_servicetask_placeholder then',
'            l_placeholders := rec.obat_clob_value;',
'            flow_process_vars.do_substitution( pi_prcs_id => pi_prcs_id, pi_sbfl_id => pi_sbfl_id, pio_string => l_placeholders );',
'          when flow_constants_pkg.gc_apex_servicetask_immediately then',
'            l_immediate := ( rec.obat_vc_value = flow_constants_pkg.gc_vcbool_true );',
'          when flow_constants_pkg.gc_apex_servicetask_subject then',
'            l_subject := rec.obat_vc_value;',
'            flow_process_vars.do_substitution( pi_prcs_id => pi_prcs_id, pi_sbfl_id => pi_sbfl_id, pio_string => l_subject );',
'          when flow_constants_pkg.gc_apex_servicetask_body_text then',
'            l_body := rec.obat_clob_value;',
'            flow_process_vars.do_substitution( pi_prcs_id => pi_prcs_id, pi_sbfl_id => pi_sbfl_id, pio_string => l_body );',
'          when flow_constants_pkg.gc_apex_servicetask_body_html then',
'            l_body_html := rec.obat_clob_value;',
'            flow_process_vars.do_substitution( pi_prcs_id => pi_prcs_id, pi_sbfl_id => pi_sbfl_id, pio_string => l_body_html );',
'          when flow_constants_pkg.gc_apex_servicetask_attachment then',
'            l_attachment_query := rec.obat_vc_value;',
'            flow_process_vars.do_substitution( pi_prcs_id => pi_prcs_id, pi_sbfl_id => pi_sbfl_id, pio_string => l_attachment_query );',
'        else',
'          null;',
'        end case;',
'      end loop;',
'',
'      if l_from is null then',
'        l_from := g_email_sender;',
'      end if;',
'',
'      -- Raise error if needed',
'      -- no sender',
'      if l_from is null then',
'          raise e_email_no_from;',
'      end if;',
'      --no recipient',
'      if l_to is null then',
'        raise e_email_no_to;',
'      end if;',
'',
'      -- Set the workspace if no session',
'      -- Useful for timers',
'      if ( l_session is null ) then',
'',
'        if ( l_use_template ) then',
'          begin',
'            select workspace ',
'            into l_workspace',
'            from apex_applications',
'            where application_id = l_application_id;',
'          exception when no_data_found then',
'            raise e_workspace_not_found;',
'          end;',
'        else',
'          l_workspace := g_workspace;         ',
'        end if;',
'',
'        set_workspace_id(p_workspace_name => l_workspace);',
'      end if;',
'',
'      if ( l_use_template ) then',
'        if l_application_id is null or l_template_id is null then',
'          raise e_email_no_template;',
'        end if;',
'',
'        apex_debug.message(''sys.dbms_lob.getlength(l_placeholders) '' ||sys.dbms_lob.getlength(l_placeholders));',
'        if sys.dbms_lob.getlength(l_placeholders) > 0  then',
'          begin',
'            l_json_object := json_object_t(l_placeholders);',
'          exception',
'            when others then',
'              raise e_json_not_valid;',
'          end;',
'        end if;',
'',
'        l_mail_id := apex_mail.send(',
'          p_template_static_id => l_template_id,',
'          p_placeholders       => l_placeholders,',
'          p_to                 => l_to,',
'          p_cc                 => l_cc,',
'          p_bcc                => l_bcc,',
'          p_from               => l_from,',
'          p_replyto            => l_reply_to,',
'          p_application_id     => l_application_id',
'        );',
'',
'      else',
'',
'        if l_body is null then',
'          raise e_email_no_body;',
'        end if;',
'',
'        l_mail_id := apex_mail.send(',
'          p_to        => l_to, ',
'          p_from      => l_from,',
'          p_cc        => l_cc,',
'          p_bcc       => l_bcc,',
'          p_replyto   => l_reply_to,',
'          p_body      => l_body,',
'          p_body_html => l_body_html,',
'          p_subj      => l_subject',
'        );',
'',
'      end if;',
'',
'      if (l_attachment_query is not null ) then',
'',
'        execute immediate l_attachment_query ',
'        bulk collect into  l_attachments;'))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'',
'',
'        for i in 1..l_attachments.count()',
'        loop',
'          apex_mail.add_attachment(',
'            p_mail_id    => l_mail_id,',
'            p_attachment => l_attachments(i).blob_content,',
'            p_filename   => l_attachments(i).file_name,',
'            p_mime_type  => l_attachments(i).mime_type',
'          );',
'        end loop;',
'      end if;',
'',
'      if (l_immediate ) then',
'        apex_mail.push_queue;',
'      end if;',
'    ',
'    exception',
'    when e_wrong_default_workspace then',
'      apex_debug.error',
'      (',
'        p_message => ''Default workspace %s is not valid''',
'      , p0        => g_workspace',
'      );',
'      raise e_wrong_default_workspace;',
'    when e_workspace_not_found then',
'      apex_debug.error',
'      (',
'        p_message => ''Unable to find the workspace for application id %s''',
'      , p0        => l_application_id',
'      );',
'      raise e_workspace_not_found;',
'    when e_email_no_from then ',
'      apex_debug.error',
'      (',
'        p_message => ''Email service task requires from attribute''',
'      );',
'      raise e_email_no_from; ',
'    when e_email_no_to then ',
'      apex_debug.error',
'      (',
'        p_message => ''Email service task requires to attribute''',
'      );',
'      raise e_email_no_to;  ',
'    when e_email_no_template then',
'      apex_debug.error',
'      (',
'        p_message => ''Email service task use email template but no template id define''',
'      );',
'      raise e_email_no_template;  ',
'    when e_email_no_body then',
'      apex_debug.error',
'      (',
'        p_message => ''Email service task body is missing''',
'      );',
'      raise e_email_no_body;',
'    when e_json_not_valid then',
'      apex_debug.error',
'      (',
'        p_message => ''Placeholder JSON object is invalid.''',
'      );',
'      apex_debug.log_long_message',
'      (',
'          p_message => l_placeholders',
'        , p_level   => apex_debug.c_log_level_error',
'      );',
'      raise e_json_not_valid;',
'    when others then',
'      apex_debug.error',
'      (',
'        p_message => ''Error during flow_services.send_email. SQLERRM: %s''',
'      , p0        => sqlerrm',
'      );',
'      raise e_email_failed;',
'',
'    end send_email;',
'',
'end flow_services;',
'/',
'',
'create or replace package body flow_instances ',
'as',
'',
'',
'  lock_timeout exception;',
'  pragma exception_init (lock_timeout, -3006);',
'',
'  e_unsupported_start_event exception;',
'',
'  function create_process',
'    ( p_dgrm_id   in flow_diagrams.dgrm_id%type',
'    , p_prcs_name in flow_processes.prcs_name%type',
'    ) return flow_processes.prcs_id%type',
'  is',
'    l_ret flow_processes.prcs_id%type;',
'  begin',
'    apex_debug.enter',
'    (''create_process''',
'    , ''dgrm_id'', p_dgrm_id',
'    , ''p_prcs_name'', p_prcs_name ',
'    );',
'    insert into flow_processes prcs',
'          ( prcs.prcs_name',
'          , prcs.prcs_dgrm_id',
'          , prcs.prcs_status',
'          , prcs.prcs_init_ts',
'          , prcs.prcs_last_update',
'          )',
'    values',
'          ( p_prcs_name',
'          , p_dgrm_id',
'          , flow_constants_pkg.gc_prcs_status_created',
'          , systimestamp',
'          , systimestamp',
'          )',
'      returning prcs.prcs_id into l_ret',
'    ;',
'    -- log the process creation',
'    flow_logging.log_instance_event',
'    ( p_process_id => l_ret',
'    , p_event      => flow_constants_pkg.gc_prcs_event_created',
'    );',
'    commit;',
'',
'    apex_debug.info',
'    ( p_message => ''Flow Instance created.  DGRM_ID : %0, PRCS_ID : %1''',
'    , p0 => p_dgrm_id',
'    , p1 => l_ret ',
'    );',
'    return l_ret;',
'  end create_process;',
'',
'  procedure start_process',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  )',
'  is',
'    l_dgrm_id               flow_diagrams.dgrm_id%type;',
'    l_process_status        flow_processes.prcs_status%type;',
'    l_objt_bpmn_id          flow_objects.objt_bpmn_id%type;',
'    l_objt_id               flow_objects.objt_id%type;',
'    l_objt_sub_tag_name     flow_objects.objt_sub_tag_name%type;',
'    l_main_subflow          flow_types_pkg.t_subflow_context;',
'    l_new_subflow_status    flow_subflows.sbfl_status%type;',
'  begin',
'    apex_debug.enter',
'    (''start_process''',
'    , ''Process_ID'', p_process_id ',
'    );',
'    -- check process exists, is not running, and lock it',
'    begin',
'',
'      flow_globals.set_is_recursive_step (p_is_recursive_step => false);',
'      -- initialise step_had_error flag',
'      flow_globals.set_step_error ( p_has_error => false);',
'',
'      select prcs.prcs_status',
'           , prcs.prcs_dgrm_id',
'        into l_process_status',
'           , l_dgrm_id',
'        from flow_processes prcs ',
'       where prcs.prcs_id = p_process_id',
'      for update wait 2',
'      ;',
'      if l_process_status != ''created'' then',
'        flow_errors.handle_general_error',
'        ( pi_message_key => ''start-already-running''',
'        , p0 => p_process_id',
'        );',
'        -- $F4AMESSAGE ''start-already-running'' || ''You tried to start a process (id %0) that is already running.''',
'      end if;',
'    exception',
'      when no_data_found then',
'        flow_errors.handle_general_error',
'        ( pi_message_key => ''start-not-created''',
'        , p0 => p_process_id',
'        );',
'        -- $F4AMESSAGE ''start-not-created'' || ''You tried to start a process (id %0) that does not exist.'' ',
'      when too_many_rows then',
'        flow_errors.handle_general_error',
'        ( pi_message_key => ''start-multiple-already-running''',
'        , p0 => p_process_id',
'        );',
'        -- $F4AMESSAGE ''start-multiple-already-running'' || ''You tried to start a process (id %0) with multiple copies already running.'' ',
'    end;',
'    begin',
'      -- get the starting object ',
'      select objt.objt_bpmn_id',
'           , objt.objt_sub_tag_name',
'           , objt.objt_id',
'        into l_objt_bpmn_id',
'           , l_objt_sub_tag_name',
'           , l_objt_id',
'        from flow_objects objt',
'        join flow_objects parent',
'          on objt.objt_objt_id = parent.objt_id',
'       where objt.objt_dgrm_id = l_dgrm_id',
'         and parent.objt_dgrm_id = l_dgrm_id',
'         and objt.objt_tag_name = flow_constants_pkg.gc_bpmn_start_event  ',
'         and parent.objt_tag_name = flow_constants_pkg.gc_bpmn_process',
'      ;',
'    exception',
'      when too_many_rows then',
'        flow_errors.handle_instance_error',
'        ( pi_prcs_id        => p_process_id',
'        , pi_message_key    => ''start-multiple-start-events''',
'        );',
'        -- $F4AMESSAGE ''start-multiple-start-events'' || ''You have multiple starting events defined. Make sure your diagram has only one start event.''',
'      when no_data_found then',
'        flow_errors.handle_instance_error',
'        ( pi_prcs_id        => p_process_id',
'        , pi_message_key    => ''start-no-start-event''',
'        );',
'        -- $F4AMESSAGE ''start-no-start-event'' || ''No starting event is defined in the Flow diagram.''',
'    end;',
'    apex_debug.info',
'    ( p_message => ''Found starting object %0''',
'    , p0 =>l_objt_bpmn_id',
'    );',
'    -- mark process as running',
'    update flow_processes prcs',
'       set prcs.prcs_status = flow_constants_pkg.gc_prcs_status_running',
'         , prcs.prcs_last_update = systimestamp',
'     where prcs.prcs_dgrm_id = l_dgrm_id',
'       and prcs.prcs_id = p_process_id',
'         ;    ',
'    -- log the start',
'    flow_logging.log_instance_event',
'    ( p_process_id => p_process_id',
'    , p_event      => flow_constants_pkg.gc_prcs_event_started',
'    );',
'    -- create the status for new subflow based on start subtype',
'    case',
'      when l_objt_sub_tag_name = flow_constants_pkg.gc_bpmn_timer_event_definition then',
'        l_new_subflow_status := flow_constants_pkg.gc_sbfl_status_waiting_timer;',
'      when l_objt_sub_tag_name is null then',
'        l_new_subflow_status := flow_constants_pkg.gc_sbfl_status_running;',
'      else',
'        raise e_unsupported_start_event;',
'    end case;',
'',
'    l_main_subflow := flow_engine_util.subflow_start ',
'      ( p_process_id => p_process_id',
'      , p_parent_subflow => null',
'      , p_starting_object => l_objt_bpmn_id',
'      , p_current_object => l_objt_bpmn_id',
'      , p_route => ''main''',
'      , p_last_completed => null',
'      , p_status => l_new_subflow_status ',
'      , p_parent_sbfl_proc_level => 0 ',
'      , p_new_proc_level => false',
'      , p_dgrm_id => l_dgrm_id',
'      );',
'',
'    apex_debug.info',
'    ( p_message => ''Initial Subflow created %0 with Step Key %1''',
'    , p0 => l_main_subflow.sbfl_id',
'    , p1 => l_main_subflow.step_key',
'    );',
'    if l_objt_sub_tag_name = flow_constants_pkg.gc_bpmn_timer_event_definition then ',
'      -- process any before-event variable expressions on the starting object',
'      flow_expressions.process_expressions',
'      ( pi_objt_id     => l_objt_id',
'      , pi_set         => flow_constants_pkg.gc_expr_set_before_event',
'      , pi_prcs_id     => p_process_id',
'      , pi_sbfl_id     => l_main_subflow.sbfl_id',
'      );',
'      -- test for any step errors',
'      if not flow_globals.get_step_error then ',
'        flow_timers_pkg.start_timer',
'        (',
'          pi_prcs_id    => p_process_id',
'        , pi_sbfl_id    => l_main_subflow.sbfl_id',
'        , pi_step_key   => l_main_subflow.step_key',
'        ); ',
'      end if;       ',
'',
'    elsif l_objt_sub_tag_name is null then',
'      -- plain (none) startEvent',
'      -- process any variable expressions on the starting object',
'      flow_expressions.process_expressions',
'      ( pi_objt_id     => l_objt_id',
'      , pi_set         => flow_constants_pkg.gc_expr_set_on_event',
'      , pi_prcs_id     => p_process_id',
'      , pi_sbfl_id     => l_main_subflow.sbfl_id',
'      );',
'',
'      if not flow_globals.get_step_error then ',
'        -- step into first step',
'        flow_engine.flow_complete_step  ',
'        ( p_process_id => p_process_id',
'        , p_subflow_id => l_main_subflow.sbfl_id',
'        , p_step_key   => l_main_subflow.step_key',
'        , p_forward_route => null',
'        , p_recursive_call => false',
'        );',
'      end if;',
'    else ',
'      raise e_unsupported_start_event;',
'    end if;',
'',
'  exception',
'    when e_unsupported_start_event then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_process_id',
'      , pi_sbfl_id        => l_main_subflow.sbfl_id',
'      , pi_message_key    => ''start-type-unsupported''',
'      , p0                => l_objt_sub_tag_name       ',
'      );',
'      -- $F4AMESSAGE ''start-type-unsupported'' || ''Unsupported start event type (%0). Only None (standard) Start Event and Timer Start Event are currently supported.''',
'  end start_process;',
'',
'  procedure reset_process',
'    ( p_process_id  in flow_processes.prcs_id%type',
'    , p_comment     in flow_instance_event_log.lgpr_comment%type default null',
'    )',
'  is',
'    l_return_code   number;',
'    cursor c_lock_all is ',
'        select prcs.prcs_id, sbfl.sbfl_id, sflg.sflg_last_updated',
'          from flow_subflows sbfl',
'          join flow_processes prcs',
'            on prcs.prcs_id = sbfl.sbfl_prcs_id ',
'          join flow_subflow_log sflg ',
'            on prcs.prcs_id = sflg.sflg_prcs_id',
'          where prcs.prcs_id = p_process_id',
'          order by sbfl.sbfl_process_level, sbfl.sbfl_id',
'            for update of prcs.prcs_id, sbfl.sbfl_id, sflg.sflg_last_updated wait 2',
'    ;',
'  begin',
'    apex_debug.enter',
'    ( ''reset_process''',
'    , ''process_id'', p_process_id',
'    );',
'    -- lock all objects',
'    begin',
'      open c_lock_all;',
'      flow_timers_pkg.lock_process_timers',
'      ( pi_prcs_id => p_process_id',
'      );  ',
'      close c_lock_all;',
'    exception ',
'      when lock_timeout then',
'        flow_errors.handle_instance_error',
'        ( pi_prcs_id        => p_process_id',
'        , pi_message_key    => ''process-lock-timeout''',
'        , p0 => p_process_id          ',
'        );',
'        -- $F4AMESSAGE ''process-lock-timeout'' || ''Process objects for %0 currently locked by another user.  Try again later.''',
'    end;',
'',
'    -- kill any timers still running in the process',
'    flow_timers_pkg.terminate_process_timers',
'    ( pi_prcs_id => p_process_id',
'    , po_return_code => l_return_code',
'    );  ',
'    -- clear out run-time object_log',
'    delete',
'      from flow_subflow_log sflg ',
'     where sflg_prcs_id = p_process_id',
'    ;',
'    -- delete the subflows',
'    delete',
'      from flow_subflows sbfl',
'     where sbfl.sbfl_prcs_id = p_process_id',
'    ;',
'    -- delete all process variables except the builtins (new behaviour in 21.1)',
'    flow_process_vars.delete_all_for_process ',
'    ( pi_prcs_id => p_process_id',
'    , pi_retain_builtins => true',
'    );',
'',
'    update flow_processes prcs',
'       set prcs.prcs_last_update = systimestamp',
'         , prcs.prcs_status = flow_constants_pkg.gc_prcs_status_created',
'     where prcs.prcs_id = p_process_id',
'    ;',
'    -- log the reset',
'    flow_logging.log_instance_event',
'    ( p_process_id => p_process_id',
'    , p_event      => flow_constants_pkg.gc_prcs_event_reset',
'    , p_comment    => p_comment',
'    );',
'    commit;',
'  end reset_process;',
'',
'  procedure terminate_process',
'    (',
'      p_process_id  in flow_processes.prcs_id%type',
'    , p_comment     in flow_instance_event_log.lgpr_comment%type default null',
'    )',
'  is',
'    l_return_code   number;',
'    cursor c_lock_all is ',
'      select prcs.prcs_id, sbfl.sbfl_id, sflg.sflg_last_updated',
'        from flow_subflows sbfl',
'        join flow_processes prcs',
'          on prcs.prcs_id = sbfl.sbfl_prcs_id ',
'        join flow_subflow_log sflg ',
'          on prcs.prcs_id = sflg.sflg_prcs_id',
'       where prcs.prcs_id = p_process_id',
'       order by sbfl.sbfl_process_level, sbfl.sbfl_id',
'         for update of prcs.prcs_id, sbfl.sbfl_id, sflg.sflg_last_updated wait 2;',
'  begin',
'    apex_debug.enter',
'    ( ''terminate_process''',
'    , ''process_id'', p_process_id',
'    );',
'    begin ',
'      -- lock all timers, logs, subflows and the process.  ',
'      open c_lock_all;',
'      flow_timers_pkg.lock_process_timers',
'      ( pi_prcs_id => p_process_id',
'      ); ',
'      close c_lock_all; ',
'',
'    exception ',
'      when lock_timeout then',
'        flow_errors.handle_instance_error',
'        ( pi_prcs_id        => p_process_id',
'        , pi_message_key    => ''process-lock-timeout''',
'        , p0 => p_process_id          ',
'        );',
'        -- $F4AMESSAGE ''process-lock-timeout'' || ''Process objects for %0 currently locked by another user.  Try again later.''',
'    end;',
'',
'    -- kill any timers sill running in the process',
'    flow_timers_pkg.delete_process_timers',
'    (',
'        pi_prcs_id => p_process_id',
'      , po_return_code => l_return_code',
'    );  ',
'    -- stop processing ',
'    flow_engine_util.terminate_level',
'    ( p_process_id => p_process_id',
'    , p_process_level => 0',
'    );',
'    apex_debug.info',
'    ( p_message => ''Flow Instance %0 terminated''',
'    , p0        => p_process_id',
'    );',
'    -- mark process as terminated',
'    update flow_processes prcs',
'       set prcs.prcs_status = flow_constants_pkg.gc_prcs_status_terminated',
'         , prcs.prcs_last_update = systimestamp',
'     where prcs.prcs_id = p_process_id',
'    ; ',
'    -- log termination',
'    flow_logging.log_instance_event',
'    ( p_process_id => p_process_id',
'    , p_event      => flow_constants_pkg.gc_prcs_event_terminated',
'    , p_comment    => p_comment',
'    );',
'    -- finalize',
'    commit;',
'  end terminate_process;',
'',
'  procedure delete_process',
'    (',
'      p_process_id  in flow_processes.prcs_id%type',
'    , p_comment     in flow_instance_event_log.lgpr_comment%type default null',
'    )',
'  is',
'    l_return_code   number;',
'    cursor c_lock_all is ',
'      select prcs.prcs_id, sbfl.sbfl_id, sflg.sflg_last_updated',
'        from flow_subflows sbfl',
'        join flow_processes prcs',
'          on prcs.prcs_id = sbfl.sbfl_prcs_id ',
'        join flow_subflow_log sflg ',
'          on prcs.prcs_id = sflg.sflg_prcs_id',
'       where prcs.prcs_id = p_process_id',
'       order by sbfl.sbfl_process_level, sbfl.sbfl_id',
'         for update of prcs.prcs_id, sbfl.sbfl_id, sflg.sflg_last_updated wait 2;',
'  begin',
'    apex_debug.enter',
'    ( ''delete_process''',
'    , ''process_id'', p_process_id',
'    );',
'    begin ',
'      -- lock all timers, logs, subflows and the process',
'      open c_lock_all;',
'      flow_timers_pkg.lock_process_timers',
'      ( pi_prcs_id => p_process_id',
'      ); ',
'      close c_lock_all; ',
'',
'    exception ',
'      when lock_timeout then',
'        flow_errors.handle_instance_error',
'        ( pi_prcs_id        => p_process_id',
'        , pi_message_key    => ''process-lock-timeout''',
'        , p0 => p_process_id          ',
'        );',
'        -- $F4AMESSAGE ''process-lock-timeout'' || ''Process objects for %0 currently locked by another user.  Try again later.''',
'    end;',
'    -- log the deletion before process data deleted',
'    flow_logging.log_instance_event',
'    ( p_process_id => p_process_id',
'    , p_event      => flow_constants_pkg.gc_prcs_event_deleted',
'    , p_comment    => p_comment',
'    );',
'    -- kill any timers sill running in the process',
'    flow_timers_pkg.delete_process_timers(',
'        pi_prcs_id => p_process_id',
'      , po_return_code => l_return_code',
'    );  ',
'    -- clear out run-time object_log',
'',
'    delete',
'      from flow_subflow_log sflg ',
'     where sflg_prcs_id = p_process_id',
'    ;',
'    delete',
'      from flow_subflows sbfl',
'     where sbfl.sbfl_prcs_id = p_process_id',
'    ;',
'    flow_process_vars.delete_all_for_process ',
'    ( pi_prcs_id => p_process_id',
'    , pi_retain_builtins => false',
'    );',
'    delete',
'      from flow_processes prcs',
'     where prcs.prcs_id = p_process_id',
'    ;',
'',
'    commit;',
'  end delete_process;',
'',
'end flow_instances;',
'/',
'',
'create or replace package body flow_engine',
'as ',
'',
'  lock_timeout exception;',
'  pragma exception_init (lock_timeout, -3006);',
'',
'  function flow_get_matching_link_object',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , pi_dgrm_id      in flow_diagrams.dgrm_id%type ',
'  , pi_link_bpmn_id in flow_objects.objt_name%type',
'  ) return varchar2',
'  is ',
'      l_matching_catch_event  flow_objects.objt_bpmn_id%type;',
'  begin ',
'      select catch_objt.objt_bpmn_id',
'        into l_matching_catch_event',
'        from flow_objects catch_objt',
'        join flow_objects throw_objt',
'          on catch_objt.objt_name = throw_objt.objt_name',
'          and catch_objt.objt_dgrm_id = throw_objt.objt_dgrm_id',
'          and catch_objt.objt_objt_id = throw_objt.objt_objt_id',
'        where throw_objt.objt_dgrm_id = pi_dgrm_id',
'          and throw_objt.objt_bpmn_id = pi_link_bpmn_id',
'          and catch_objt.objt_sub_tag_name = flow_constants_pkg.gc_bpmn_link_event_definition',
'          and throw_objt.objt_sub_tag_name = flow_constants_pkg.gc_bpmn_link_event_definition',
'          and catch_objt.objt_tag_name = flow_constants_pkg.gc_bpmn_intermediate_catch_event        ',
'          and throw_objt.objt_tag_name = flow_constants_pkg.gc_bpmn_intermediate_throw_event   ',
'          ;',
'      return l_matching_catch_event;',
'  exception',
'    when no_data_found then',
'        flow_errors.handle_instance_error',
'        ( pi_prcs_id     => p_process_id',
'        , pi_sbfl_id     => p_subflow_id',
'        , pi_message_key => ''link-no-catch''',
'        , p0 => pi_link_bpmn_id',
'        );',
'        return null;',
'        -- $F4AMESSAGE ''link-no-catch'' || ''Unable to find matching link catch event named %0.''  ',
'    when too_many_rows then',
'        flow_errors.handle_instance_error',
'        ( pi_prcs_id     => p_process_id',
'        , pi_sbfl_id     => p_subflow_id',
'        , pi_message_key => ''link-too-many-catches''',
'        , p0 => pi_link_bpmn_id',
'        );',
'        return null;',
'        -- $F4AMESSAGE ''link-too-many-catches'' || ''More than one matching link catch event named %0.''  ',
'  end flow_get_matching_link_object;',
'',
'procedure flow_process_link_event',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_sbfl_info     in flow_subflows%rowtype',
'  , p_step_info     in flow_types_pkg.flow_step_info',
'  )',
'is ',
'    l_next_objt      flow_objects.objt_bpmn_id%type;',
'begin ',
'    apex_debug.enter ',
'    ( ''flow_process_link_event''',
'    , ''Process'', p_process_id',
'    , ''Subflow'', p_subflow_id',
'    );',
'    -- find matching link catching event and step to it',
'    l_next_objt := flow_get_matching_link_object ',
'      ( p_process_id    => p_process_id',
'      , p_subflow_id    => p_subflow_id',
'      , pi_dgrm_id      => p_step_info.dgrm_id',
'      , pi_link_bpmn_id => p_step_info.target_objt_ref',
'      );',
'  ',
'    -- proceed if link found cleanly',
'    if not flow_globals.get_step_error then',
'      -- update current step info before logging',
'      update flow_subflows sbfl',
'          set sbfl.sbfl_last_completed = p_sbfl_info.sbfl_current',
'            , sbfl.sbfl_last_update = systimestamp',
'            , sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_running',
'        where sbfl.sbfl_id = p_subflow_id',
'          and sbfl.sbfl_prcs_id = p_process_id',
'      ;',
'      -- log throw event as complete',
'      flow_logging.log_step_completion   ',
'      ( p_process_id => p_process_id',
'      , p_subflow_id => p_subflow_id',
'      , p_completed_object => p_step_info.target_objt_ref',
'      );',
'      -- jump into matching catch event',
'      update flow_subflows sbfl',
'      set   sbfl.sbfl_current = l_next_objt',
'          , sbfl.sbfl_last_completed = p_step_info.target_objt_ref',
'          , sbfl.sbfl_became_current = systimestamp ',
'          , sbfl.sbfl_last_update = systimestamp',
'          , sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_running',
'      where sbfl.sbfl_id = p_subflow_id',
'          and sbfl.sbfl_prcs_id = p_process_id',
'      ;',
'      -- pass the step_key through unchanged & use on the receiving ICE',
'      flow_complete_step',
'      ( p_process_id => p_process_id',
'      , p_subflow_id => p_subflow_id',
'      , p_step_key   => p_sbfl_info.sbfl_step_key',
'      );',
'    else',
'      apex_debug.error(p_message  => ''error finding matching link object found'');    ',
'    end if;',
'end flow_process_link_event;',
'',
'',
'/*',
'============================================================================================',
'  B P M N   O B J E C T   P R O C E S S O R S ',
'============================================================================================',
'*/',
'',
'  procedure process_endEvent',
'    ( p_process_id    in flow_processes.prcs_id%type',
'    , p_subflow_id    in flow_subflows.sbfl_id%type',
'    , p_sbfl_info     in flow_subflows%rowtype',
'    , p_step_info     in flow_types_pkg.flow_step_info',
'    )',
'  is',
'    l_sbfl_context_par      flow_types_pkg.t_subflow_context;  ',
'    l_boundary_event        flow_objects.objt_bpmn_id%type;',
'    l_subproc_objt          flow_objects.objt_bpmn_id%type;',
'    l_exit_type             flow_objects.objt_sub_tag_name%type default null;',
'    l_remaining_subflows    number;',
'    l_process_end_status    flow_processes.prcs_status%type;',
'    l_parent_step_key       flow_subflows.sbfl_step_key%type;',
'  begin',
'    apex_debug.enter ',
'    ( ''process_endEvent''',
'    , ''Process'', p_process_id',
'    , ''Subflow'', p_subflow_id',
'    );',
'    --next step can be either end of process or sub-process returning to its parent',
'    -- get parent subflow',
'    l_sbfl_context_par := flow_engine_util.get_subprocess_parent_subflow',
'      ( p_process_id => p_process_id',
'      , p_subflow_id => p_subflow_id',
'      , p_current    => p_sbfl_info.sbfl_current',
'      );',
'    -- update the subflow before logging',
'     update flow_subflows sbfl',
'        set sbfl.sbfl_last_completed = p_sbfl_info.sbfl_current',
'          , sbfl.sbfl_current = p_step_info.target_objt_ref',
'          , sbfl.sbfl_status =  flow_constants_pkg.gc_sbfl_status_completed  ',
'          , sbfl.sbfl_last_update = systimestamp ',
'      where sbfl.sbfl_id = p_subflow_id',
'        and sbfl.sbfl_prcs_id = p_process_id',
'    ;',
'    -- log the current endEvent as completed',
'    flow_logging.log_step_completion',
'      ( p_process_id => p_process_id',
'      , p_subflow_id => p_subflow_id',
'      , p_completed_object => p_step_info.target_objt_ref',
'      );  ',
'    -- process any variable expressions in the onEvent set',
'    flow_expressions.process_expressions',
'    ( pi_objt_id     => p_step_info.target_objt_id',
'    , pi_set         => flow_constants_pkg.gc_expr_set_on_event',
'    , pi_prcs_id     => p_process_id',
'    , pi_sbfl_id     => p_subflow_id',
'    );',
'',
'    if p_sbfl_info.sbfl_process_level = 0 then   ',
'      -- in a top level process',
'      apex_debug.info ',
'      ( p_message => ''Next Step is Process End %0''',
'      , p0        => p_step_info.target_objt_ref ',
'      );',
'      -- check for Terminate sub-Event',
'      if p_step_info.target_objt_subtag = flow_constants_pkg.gc_bpmn_terminate_event_definition then',
'        -- get desired process status after termination from model',
'        begin',
'          select coalesce(obat.obat_vc_value, flow_constants_pkg.gc_prcs_status_completed)',
'            into l_process_end_status',
'            from flow_object_attributes obat',
'          where obat.obat_objt_id = p_step_info.target_objt_id',
'            and obat.obat_key = flow_constants_pkg.gc_terminate_result',
'          ;',
'        exception',
'          when no_data_found then',
'            l_process_end_status := flow_constants_pkg.gc_prcs_status_completed;',
'        end;',
'        -- terminate the main level',
'        flow_engine_util.terminate_level',
'        ( ',
'          p_process_id     => p_process_id',
'        , p_process_level  => p_sbfl_info.sbfl_process_level',
'        );',
'      elsif p_step_info.target_objt_subtag is null then',
'        -- top process level but not a terminate end...',
'        flow_engine_util.subflow_complete',
'        ( p_process_id => p_process_id',
'        , p_subflow_id => p_subflow_id',
'        );',
'        l_process_end_status := flow_constants_pkg.gc_prcs_status_completed;',
'      end if;',
'',
'      -- check if there are ANY remaining subflows.  If not, close process',
'      select count(*)',
'        into l_remaining_subflows',
'        from flow_subflows sbfl',
'       where sbfl.sbfl_prcs_id = p_process_id;',
'      ',
'      if l_remaining_subflows = 0 then ',
'        -- No remaining subflows so process instance has completed',
'        update flow_processes prcs ',
'           set prcs.prcs_status = l_process_end_status',
'             , prcs.prcs_last_update = systimestamp',
'         where prcs.prcs_id = p_process_id',
'        ;',
'        -- log the completion',
'        flow_logging.log_instance_event',
'        ( p_process_id => p_process_id',
'        , p_event      => l_process_end_status',
'        );',
'        apex_debug.info ',
'        ( p_message => ''Process Completed with %1 Status: Process %0  ''',
'        , p0        => p_process_id',
'        , p1        => l_process_end_status',
'        );',
'      end if;',
'    else  ',
'      -- in a sub-process',
'      apex_debug.info',
'      ( p_message => ''Next Step is Sub-Process End %0 of type %1 . Parent Subflow : %2 Parent Step Key: %3''',
'      , p0        => p_step_info.target_objt_ref',
'      , p1        => p_step_info.target_objt_subtag',
'      , p2        => l_sbfl_context_par.sbfl_id',
'      , p3        => l_sbfl_context_par.step_key',
'      ); ',
'      if p_step_info.target_objt_subtag = flow_constants_pkg.gc_bpmn_error_event_definition then',
'        -- error exit event - return to errorBoundaryEvent if it exists and if not to normal exit',
'        begin',
'          select boundary_objt.objt_bpmn_id',
'               , subproc_objt.objt_bpmn_id',
'               , par_sbfl.sbfl_step_key',
'            into l_boundary_event',
'               , l_subproc_objt',
'               , l_parent_step_key',
'            from flow_objects boundary_objt',
'            join flow_objects subproc_objt',
'              on subproc_objt.objt_bpmn_id = boundary_objt.objt_attached_to',
'            join flow_subflows par_sbfl',
'              on par_sbfl.sbfl_current = subproc_objt.objt_bpmn_id',
'            join flow_processes prcs ',
'              on par_sbfl.sbfl_prcs_id = prcs.prcs_id',
'             and prcs.prcs_dgrm_id = boundary_objt.objt_dgrm_id',
'             and prcs.prcs_dgrm_id = subproc_objt.objt_dgrm_id',
'           where par_sbfl.sbfl_id = l_sbfl_context_par.sbfl_id',
'             and par_sbfl.sbfl_prcs_id = p_process_id',
'             and boundary_objt.objt_sub_tag_name = flow_constants_pkg.gc_bpmn_error_event_definition',
'          ;',
'          -- first remove any non-interrupting timers that are on the parent event',
'          flow_boundary_events.unset_boundary_timers (p_process_id, l_sbfl_context_par.sbfl_id);',
'          -- set current event on parent process to the error Boundary Event',
'          update flow_subflows sbfl',
'          set sbfl.sbfl_current = l_boundary_event',
'            , sbfl.sbfl_last_completed = l_subproc_objt  -- is this done in next_step?',
'            , sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_running',
'          where sbfl.sbfl_id = l_sbfl_context_par.sbfl_id',
'            and sbfl.sbfl_prcs_id = p_process_id',
'            ;',
'          -- execute the on-event expressions for the boundary event',
'          flow_expressions.process_expressions',
'          ( pi_objt_bpmn_id => l_boundary_event  ',
'          , pi_set          => flow_constants_pkg.gc_expr_set_on_event',
'          , pi_prcs_id      => p_process_id',
'          , pi_sbfl_id      => p_subflow_id',
'          );',
'        exception',
'          when no_data_found then',
'            -- error exit with no Boundary Event specified -- return to normal exit',
'            l_boundary_event := null;',
'          when too_many_rows then',
'            flow_errors.handle_instance_error',
'            ( pi_prcs_id     => p_process_id',
'            , pi_sbfl_id     => p_subflow_id',
'            , pi_message_key => ''boundary-event-too-many''',
'            , p0 => ''error''',
'            );',
'            -- $F4AMESSAGE ''boundary-event-too-many'' || ''More than one %0 boundaryEvent found on sub process.''  ',
'        end;',
'        -- stop processing in sub process and all children',
'        flow_engine_util.terminate_level',
'        ( p_process_id => p_process_id',
'        , p_process_level => p_sbfl_info.sbfl_process_level',
'        );',
'',
'      elsif p_step_info.target_objt_subtag = flow_constants_pkg.gc_bpmn_terminate_event_definition then',
'        -- sub process terminate end',
'        -- stop processing in sub process and all children',
'        flow_engine_util.terminate_level',
'        ( p_process_id    => p_process_id',
'        , p_process_level => p_sbfl_info.sbfl_process_level',
'        ); ',
'      elsif p_step_info.target_objt_subtag = flow_constants_pkg.gc_bpmn_escalation_event_definition then',
'        -- sub process escalation end',
'        -- this can be interrupting or non-interupting',
'        flow_boundary_events.process_boundary_event',
'        ( p_sbfl_info     => p_sbfl_info',
'        , p_step_info     => p_step_info',
'        , p_par_sbfl      => l_sbfl_context_par.sbfl_id',
'        );',
'      elsif p_step_info.target_objt_subtag is null then ',
'        -- sub process - normal end event',
'        flow'))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'_engine_util.subflow_complete',
'        ( p_process_id => p_process_id',
'        , p_subflow_id => p_subflow_id',
'        );',
'',
'      end if;',
'      -- check if there are ANY remaining subflows in the subProcess.  If not, close process',
'      select count(*)',
'        into l_remaining_subflows',
'        from flow_subflows sbfl',
'       where sbfl.sbfl_prcs_id = p_process_id',
'         and sbfl.sbfl_process_level = p_sbfl_info.sbfl_process_level;',
'        ',
'      if l_remaining_subflows = 0 then ',
'        -- No remaining subflows so subprocess has completed - return to parent and do next step',
'        apex_debug.info (''SubProcess Completed: Process level %0'', p_sbfl_info.sbfl_process_level );',
'',
'        flow_complete_step ',
'        ( p_process_id => p_process_id',
'        , p_subflow_id => l_sbfl_context_par.sbfl_id',
'        , p_step_key   => l_sbfl_context_par.step_key',
'        );  ',
'      end if;',
'    end if; ',
'  end process_endEvent;',
'',
'  procedure process_subProcess',
'    ( p_process_id    in flow_processes.prcs_id%type',
'    , p_subflow_id    in flow_subflows.sbfl_id%type',
'    , p_sbfl_info     in flow_subflows%rowtype',
'    , p_step_info     in flow_types_pkg.flow_step_info',
'    )',
'  is',
'    l_target_objt_sub        flow_objects.objt_bpmn_id%type; --target object in subprocess',
'    l_sbfl_context_sub       flow_types_pkg.t_subflow_context;   ',
'  begin',
'    apex_debug.enter ',
'    ( ''process_subprocess''',
'    , ''object'', p_step_info.target_objt_tag ',
'    );',
'    begin',
'       select objt.objt_bpmn_id',
'         into l_target_objt_sub',
'         from flow_objects objt',
'        where objt.objt_objt_id  = p_step_info.target_objt_id',
'          and objt.objt_tag_name = flow_constants_pkg.gc_bpmn_start_event  ',
'          and objt.objt_dgrm_id  = p_step_info.dgrm_id',
'       ;',
'    exception',
'      when no_data_found then',
'        flow_errors.handle_instance_error',
'        ( pi_prcs_id     => p_process_id',
'        , pi_sbfl_id     => p_subflow_id',
'        , pi_message_key => ''subProcess-no-start''',
'        );',
'      -- $F4AMESSAGE ''subProcess-no-start'' || ''Unable to find Sub-Process Start Event.''  ',
'      when too_many_rows then',
'        flow_errors.handle_instance_error',
'        ( pi_prcs_id     => p_process_id',
'        , pi_sbfl_id     => p_subflow_id',
'        , pi_message_key => ''subProcess-too-many-starts''',
'        );',
'        -- $F4AMESSAGE ''subProcess-too-many-starts'' || ''More than one Sub-Process Start found.''  ',
'    end;',
'    -- start subflow for the sub-process',
'    l_sbfl_context_sub := ',
'      flow_engine_util.subflow_start',
'      ( p_process_id => p_process_id',
'      , p_parent_subflow => p_subflow_id',
'      , p_starting_object => p_step_info.target_objt_ref -- parent subProc activity',
'      , p_current_object => l_target_objt_sub -- subProc startEvent',
'      , p_route => ''sub main''',
'      , p_last_completed => p_sbfl_info.sbfl_last_completed -- previous activity on parent proc',
'      , p_parent_sbfl_proc_level => null',
'      , p_new_proc_level => true',
'      , p_dgrm_id => p_sbfl_info.sbfl_dgrm_id',
'      );',
'',
'    -- Always do all updates to parent data first before performing any next step in the children.',
'    -- Reason: A subflow could immediately disappear if we''re stepping through it completly.',
'    -- check for any errors on the step',
'    if not flow_globals.get_step_error then ',
'      -- set boundaryEvent Timers, if any',
'      flow_boundary_events.set_boundary_timers ',
'      ( p_process_id => p_process_id',
'      , p_subflow_id => p_subflow_id',
'      );  ',
'      if not flow_globals.get_step_error then ',
'        -- Check again, then Update parent subflow',
'        update flow_subflows sbfl',
'        set   sbfl.sbfl_current = p_step_info.target_objt_ref -- parent subProc Activity',
'            , sbfl.sbfl_last_completed = p_sbfl_info.sbfl_last_completed',
'            , sbfl.sbfl_last_update = systimestamp',
'            , sbfl.sbfl_status =  flow_constants_pkg.gc_sbfl_status_in_subprocess',
'        where sbfl.sbfl_id = p_subflow_id',
'          and sbfl.sbfl_prcs_id = p_process_id',
'        ;  ',
'      ',
'        -- run on-event expressions for child startEvent',
'        flow_expressions.process_expressions',
'        ( pi_objt_bpmn_id => l_target_objt_sub  ',
'        , pi_set          => flow_constants_pkg.gc_expr_set_on_event',
'        , pi_prcs_id      => p_process_id',
'        , pi_sbfl_id      => l_sbfl_context_sub.sbfl_id',
'        );',
'',
'        if not flow_globals.get_step_error then ',
'',
'          -- check again for any errors from expressions before stepping into sub_process',
'          flow_complete_step   ',
'          ( p_process_id    => p_process_id',
'          , p_subflow_id    => l_sbfl_context_sub.sbfl_id',
'          , p_step_key      => l_sbfl_context_sub.step_key',
'          , p_forward_route => null',
'          );',
'        end if;',
'      end if;',
'    end if;',
'  end process_subProcess; ',
'',
'  procedure process_intermediateCatchEvent',
'  ( p_sbfl_info  in flow_subflows%rowtype',
'  , p_step_info  in flow_types_pkg.flow_step_info',
'  )',
'  is ',
'  begin',
'    -- then we make everything behave like a simple activity unless specifically supported',
'    -- currently only supports timer and without checking its type is timer',
'    -- but this will have a case type = timer, emailReceive. ....',
'    -- this is currently just a stub.',
'    apex_debug.enter',
'    ( ''process_IntermediateCatchEvent''',
'    , ''p_step_info.target_objt_ref'', p_step_info.target_objt_ref',
'    );',
'',
'    if p_step_info.target_objt_subtag = flow_constants_pkg.gc_bpmn_timer_event_definition then',
'      -- we have a timer.  Set status to waiting and schedule the timer.',
'      update flow_subflows sbfl',
'         set sbfl.sbfl_current = p_step_info.target_objt_ref',
'           , sbfl.sbfl_last_completed = p_sbfl_info.sbfl_last_completed',
'           , sbfl.sbfl_last_update = systimestamp',
'           , sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_waiting_timer',
'       where sbfl.sbfl_id = p_sbfl_info.sbfl_id',
'         and sbfl.sbfl_prcs_id = p_sbfl_info.sbfl_prcs_id',
'      ;',
'      flow_timers_pkg.start_timer',
'      ( ',
'        pi_prcs_id  => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id  => p_sbfl_info.sbfl_id',
'      , pi_step_key => p_sbfl_info.sbfl_step_key',
'      );',
'    else',
'      -- not a timer.  Just set it to running for now.  (other types to be implemented later)',
'      -- this includes bpmn:linkEventDefinition which should come here',
'      update flow_subflows sbfl',
'         set sbfl.sbfl_current = p_step_info.target_objt_ref',
'           , sbfl.sbfl_last_completed = p_sbfl_info.sbfl_current',
'           , sbfl.sbfl_last_update = systimestamp',
'           , sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_running',
'       where sbfl.sbfl_id = p_sbfl_info.sbfl_id',
'         and sbfl.sbfl_prcs_id = p_sbfl_info.sbfl_prcs_id',
'      ;',
'    end if;',
'  end process_intermediateCatchEvent;',
'',
'  procedure process_intermediateThrowEvent',
'  ( p_sbfl_info     in flow_subflows%rowtype',
'  , p_step_info     in flow_types_pkg.flow_step_info',
'  )',
'  is ',
'    l_par_sbfl    flow_types_pkg.t_subflow_context;',
'  begin',
'    -- currently only supports none Intermediate throw event (used as a process state marker)',
'    -- but this might later have a case type = timer, message, etc. ....',
'    apex_debug.enter ',
'    ( ''process_IntermediateThrowEvent''',
'    , ''p_step_info.target_objt_ref'', p_step_info.target_objt_ref',
'    );',
'    -- process on-event expressions for the ITE',
'    flow_expressions.process_expressions',
'    ( pi_objt_id      => p_step_info.target_objt_id  ',
'    , pi_set          => flow_constants_pkg.gc_expr_set_on_event',
'    , pi_prcs_id      => p_sbfl_info.sbfl_prcs_id',
'    , pi_sbfl_id      => p_sbfl_info.sbfl_id',
'    );',
'',
'    if p_step_info.target_objt_subtag is null then',
'      -- a none event.  Make the ITE the current event then just call flow_complete_step.  ',
'      update flow_subflows sbfl',
'      set   sbfl.sbfl_current = p_step_info.target_objt_ref',
'          , sbfl.sbfl_last_completed = p_sbfl_info.sbfl_last_completed',
'          , sbfl.sbfl_last_update = systimestamp',
'          , sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_running',
'      where sbfl.sbfl_id = p_sbfl_info.sbfl_id',
'          and sbfl.sbfl_prcs_id = p_sbfl_info.sbfl_prcs_id',
'      ;',
'      flow_complete_step',
'      ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'      , p_subflow_id => p_sbfl_info.sbfl_id',
'      , p_step_key   => p_sbfl_info.sbfl_step_key',
'      );',
'    elsif p_step_info.target_objt_subtag = flow_constants_pkg.gc_bpmn_link_event_definition then',
'      flow_process_link_event',
'      ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'      , p_subflow_id => p_sbfl_info.sbfl_id',
'      , p_sbfl_info  => p_sbfl_info',
'      , p_step_info  => p_step_info',
'      );   ',
'    elsif p_step_info.target_objt_subtag = flow_constants_pkg.gc_bpmn_escalation_event_definition then',
'      -- make the ITE the current event',
'      update  flow_subflows sbfl',
'          set sbfl.sbfl_current = p_step_info.target_objt_ref',
'            , sbfl.sbfl_last_completed = p_sbfl_info.sbfl_current',
'            , sbfl.sbfl_last_update = systimestamp',
'            , sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_running',
'        where sbfl.sbfl_id = p_sbfl_info.sbfl_id',
'          and sbfl.sbfl_prcs_id = p_sbfl_info.sbfl_prcs_id',
'      ;',
'      -- get the subProcess event in the parent level',
'      l_par_sbfl := flow_engine_util.get_subprocess_parent_subflow',
'      ( p_process_id => p_sbfl_info.sbfl_prcs_id',
'      , p_subflow_id => p_sbfl_info.sbfl_id',
'      , p_current => p_step_info.target_objt_ref',
'      );',
'      -- escalate it to the boundary Event',
'      flow_boundary_events.process_boundary_event',
'      ( p_sbfl_info     => p_sbfl_info',
'      , p_step_info     => p_step_info',
'      , p_par_sbfl      => l_par_sbfl.sbfl_id',
'      ); ',
'    else ',
'      --- other type of intermediateThrowEvent that is not currently supported',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id     => p_sbfl_info.sbfl_prcs_id',
'      , pi_sbfl_id     => p_sbfl_info.sbfl_id',
'      , pi_message_key => ''ITE-unsupported-type''',
'      , p0 => p_sbfl_info.sbfl_current',
'      );',
'      -- $F4AMESSAGE ''ITE-unsupported-type'' || ''Currently unsupported type of Intermediate Throw Event encountered at %0 .''  ',
'    end if;',
'end process_intermediateThrowEvent;',
'',
'',
'/* ',
'================================================================================',
'   E V E N T   H A N D L I N G ',
'================================================================================',
'*/',
'',
'procedure handle_event_gateway_event',
'  ( p_process_id         in flow_processes.prcs_id%type',
'  , p_parent_subflow_id  in flow_subflows.sbfl_id%type',
'  , p_cleared_subflow_id in flow_subflows.sbfl_id%type',
'  )',
'is ',
'    l_forward_route         flow_connections.conn_id%type;',
'    l_current_object        flow_subflows.sbfl_current%type;',
'    l_child_starting_object flow_subflows.sbfl_starting_object%type;',
'    l_dgrm_id               flow_diagrams.dgrm_id%type;',
'    l_parent_sbfl           flow_subflows.sbfl_id%type;',
'    l_timestamp             flow_subflows.sbfl_became_current%type;',
'    l_forward_step_key      flow_subflows.sbfl_step_key%type;',
'    l_return                varchar2(50);',
'begin',
'    -- called from any event that has cleared (so expired timer, received message or signal, etc) to move eBG forwards',
'    -- procedure has to:',
'    -- - check that gateway has not already been cleared by another event',
'    -- - resume the incoming subflow on the path of the first event to occur and call next_step',
'    -- - stop / terminate all of the child subflows that were created to wait for other events',
'    -- - including making sure any timers, message receivers, etc., are cleared up.',
'',
'    -- note that if this is called from a timer, you might not be in an APEX session so might not get debug',
'    apex_debug.enter',
'    ( ''handle_event_gateway_event'' ',
'    , ''p_process_id'', p_process_id',
'    , ''parent_subflow'', p_parent_subflow_id',
'    , ''p_cleared_subflow_id'', p_cleared_subflow_id',
'    );',
'    begin',
'      select sbfl.sbfl_id',
'        into l_parent_sbfl',
'        from flow_subflows sbfl',
'       where sbfl.sbfl_id = p_parent_subflow_id',
'         and sbfl.sbfl_prcs_id = p_process_id',
'         and sbfl.sbfl_status =  flow_constants_pkg.gc_sbfl_status_split  ',
'          ;',
'    exception',
'       when no_data_found then',
'        -- gateway aready cleared',
'         raise; ',
'    end;',
'    -- make the incoming (main) (split) parent subflow proceed along the path of the cleared event.clear(',
'    l_dgrm_id := flow_engine_util.get_dgrm_id( p_prcs_id => p_process_id );',
'     select conn.conn_id',
'          , sbfl.sbfl_current',
'          , sbfl.sbfl_starting_object',
'       into l_forward_route',
'          , l_current_object',
'          , l_child_starting_object',
'       from flow_objects objt',
'       join flow_subflows sbfl ',
'         on sbfl.sbfl_current = objt.objt_bpmn_id',
'       join flow_processes prcs',
'         on sbfl.sbfl_prcs_id = prcs.prcs_id',
'        and prcs.prcs_dgrm_id = objt.objt_dgrm_id',
'       join flow_connections conn ',
'         on conn.conn_src_objt_id = objt.objt_id',
'        and conn.conn_dgrm_id = prcs.prcs_dgrm_id',
'      where sbfl.sbfl_id = p_cleared_subflow_id',
'        and prcs.prcs_id = p_process_id',
'        and conn.conn_tag_name = flow_constants_pkg.gc_bpmn_sequence_flow',
'          ; ',
'    -- generate a step key & insert in the update...use later',
'    l_timestamp := systimestamp;',
'    l_forward_step_key := flow_engine_util.step_key ( pi_sbfl_id   => p_parent_subflow_id',
'                                                    , pi_current => l_current_object',
'                                                    , pi_became_current => l_timestamp ',
'                                                    );',
'',
'     update flow_subflows sbfl',
'        set sbfl_status = flow_constants_pkg.gc_sbfl_status_running',
'          , sbfl_current = l_current_object',
'          , sbfl_last_completed = l_child_starting_object',
'          , sbfl_last_update = l_timestamp',
'          , sbfl_became_current = l_timestamp',
'          , sbfl_step_key = l_forward_step_key',
'      where sbfl.sbfl_prcs_id = p_process_id',
'        and sbfl.sbfl_id = p_parent_subflow_id',
'        and sbfl.sbfl_status =  flow_constants_pkg.gc_sbfl_status_split  ',
'          ;',
'    -- now clear up all of the sibling subflows',
'    begin',
'      for child_subflows in (',
'        select sbfl.sbfl_id',
'             , sbfl.sbfl_current',
'             , objt.objt_sub_tag_name',
'          from flow_subflows sbfl',
'          join flow_objects objt ',
'            on sbfl.sbfl_current = objt.objt_bpmn_id',
'          join flow_processes prcs',
'            on sbfl.sbfl_prcs_id = prcs.prcs_id',
'           and objt.objt_dgrm_id = prcs.prcs_dgrm_id',
'         where sbfl.sbfl_sbfl_id = p_parent_subflow_id',
'           and sbfl.sbfl_starting_object = l_child_starting_object',
'           and objt.objt_dgrm_id = l_dgrm_id',
'      )',
'      loop',
'        -- clean up any event handlers (timers, etc.) (add more here when supporting messageEvent, SignalEvent, etc.)',
'        if child_subflows.objt_sub_tag_name = flow_constants_pkg.gc_bpmn_timer_event_definition then',
'          flow_timers_pkg.terminate_timer',
'            ( pi_prcs_id => p_process_id',
'            , pi_sbfl_id => child_subflows.sbfl_id',
'            , po_return_code => l_return',
'            );',
'        end if;',
'        -- delete the completed subflow and log it as complete',
'            ',
'        delete',
'          from flow_subflows sbfl',
'         where sbfl.sbfl_prcs_id = p_process_id',
'           and sbfl.sbfl_id = child_subflows.sbfl_id',
'            ;',
'        -- logging - tbd',
'      end loop;',
'    end;  -- cleanup block',
'    -- now step forward on the forward path',
'    flow_complete_step           ',
'    ( p_process_id => p_process_id',
'    , p_subflow_id => p_parent_subflow_id',
'    , p_step_key   => l_forward_step_key',
'    , p_forward_route => null',
'    );',
'end handle_event_gateway_event;',
'',
'procedure handle_intermediate_catch_event',
'  ( p_process_id   in flow_processes.prcs_id%type',
'  , p_subflow_id   in flow_subflows.sbfl_id%type',
'  , p_step_key     in flow_subflows.sbfl_step_key%type',
'  , p_current_objt in flow_subflows.sbfl_current%type',
'  ) ',
'is',
'begin',
'  apex_debug.enter',
'  ( ''handle_intermediate_catch_event''',
'  , ''Subflow'', p_subflow_id',
'  , ''Step Key'', p_step_key',
'  );',
'  update flow_subflows sbfl ',
'     set sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_running',
'       , sbfl.sbfl_last_update = systimestamp',
'   where sbfl.sbfl_prcs_id = p_process_id',
'     and sbfl.sbfl_id = p_subflow_id',
'  ;',
'  --  process any variable expressions in the OnEvent set',
'  flow_expressions.process_expressions',
'  ( pi_objt_bpmn_id => p_current_objt  ',
'  , pi_set          => flow_constants_pkg.gc_expr_set_on_event',
'  , pi_prcs_id      => p_process_id',
'  , pi_sbfl_id      => p_subflow_id',
'  );',
'  -- test for any errors so far ',
'  if flow_globals.get_step_error then ',
'    -- has step errors from expressions',
'    flow_errors.set_error_status',
'    ( pi_prcs_id => p_process_id',
'    , pi_sbfl_id => p_subflow_id',
'    );',
'  else',
'    -- move onto next step',
'    flow_complete_step ',
'    ( p_process_id => p_process_id',
'    , p_subflow_id => p_subflow_id',
'    , p_step_key   => p_step_key',
'    , p_forward_route => null',
'    );',
'  end if;  ',
'end handle_intermediate_catch_event;',
'',
'procedure create_repeat_subflow ',
'  ( p_process_id      in flow_processes.prcs_id%type',
'  , p_last_subflow_id in flow_subflows.sbfl_id%type',
'  , p_timr_id         in flow_timers.timr_id%type default null',
'  , p_next_run        in flow_timers.timr_run%type default null',
'  )',
'is',
'  l_new_subflow_context  flow_types_pkg.t_subflow_context;',
'  l_last_subflow         flow_subflows%rowtype;',
'begin',
'  select * ',
'    into l_last_subflow',
'    from flow_subflows',
'   where sbfl_id = p_last_subflow_id',
'     and sbfl_prcs_id = p_process_id',
'  ;',
'',
'  l_new_subflow_context := flow_engine_util.subflow_start',
'          (',
'            p_process_id      => p_process_id',
'          , p_parent_subflow  => l_last_subflow.sbfl_sbfl_id',
'          , p_starting_object => l_last_subflow.sbfl_starting_object',
'          , p_current_object  => l_last_subflow.sbfl_starting_object',
'          , p_route           => ''from boundary event - run ''||to_char(p_next_run)',
'          , p_last_completed  => l_last_subflow.sbfl_last_completed',
'          , p_status          => flow_constants_pkg.gc_sbfl_status_waiting_timer',
'          , p_parent_sbfl_proc_level => l_last_subflow.sbfl_process_level',
'          , p_dgrm_id                => l_last_subflow.sbfl_dgrm_id',
'          );',
'',
'  flow_timers_pkg.start_timer',
'  ( pi_prcs_id  => p_process_id',
'  , pi_sbfl_id  => l_new_subflow_context.sbfl_id',
'  , pi_step_key => l_new_subflow_context.step_key',
'  , pi_timr_id  => p_timr_id',
'  , pi_run      => p_next_run',
'  );',
'',
'  if not flow_globals.get_step_error then ',
'      -- set timer flag on child (Self, Noninterrupting, Timer)',
'      update flow_subflows sbfl',
'          set sbfl.sbfl_has_events = sbfl.sbfl_has_events||'':SNT''',
'        where sbfl.sbfl_id = l_new_subflow_context.sbfl_id',
'          and sbfl.sbfl_prcs_id = p_process_id',
'      ;',
'  end if;',
'    ',
'',
'',
'end create_repeat_subflow;',
'',
'procedure flow_handle_event',
'  ( p_process_id in flow_processes.prcs_id%type',
'  , p_subflow_id in flow_subflows.sbfl_id%type',
'  , p_step_key   in flow_subflows.sbfl_step_key%type',
'  , p_timr_id    in flow_timers.timr_id%type default null',
'  , p_run        in flow_timers.timr_run%type default null',
'  ) ',
'is',
'  l_parent_subflow        flow_subflows.sbfl_id%type;',
'  l_prev_objt_tag_name    flow_objects.objt_tag_name%type;',
'  l_curr_objt_tag_name    flow_objects.objt_tag_name%type;',
'  l_dgrm_id               flow_diagrams.dgrm_id%type;',
'  l_sbfl_current          flow_subflows.sbfl_current%type;',
'begin',
'  -- currently handles callbacks from flow_timers when a timer fires',
'  apex_debug.enter ',
'  ( ''flow_handle_event''',
'  , ''subflow_id'', p_subflow_id',
'  , ''process_id'', p_process_id',
'  );',
'  -- look at current event to check if it is a startEvent.  (this also has no previous event!)',
'  -- if not, examine previous event on the subflow to determine if it was eventBasedGateway (eBG)',
'  -- an intermediateCatchEvent (iCE) following an eBG will always have exactly 1 input (from the eBG)',
'  -- an independant iCE (not following an eBG) can have >1 inputs',
'  -- so look for preceding eBG.  If previous event not eBG or there are multiple prev events, it did not follow an eBG.',
'  l_dgrm_id := flow_engine_util.get_dgrm_id (p_prcs_id => p_process_id);',
'  -- set context for scripts and variable expressions',
'  flow_globals.set_context',
'  ( pi_prcs_id  => p_process_id',
'  , pi_sbfl_id  => p_subflow_id',
'  , pi_step_key => p_step_key',
'  );',
'  flow_globals.set_is_recursive_step (p_is_recursive_step => true);',
'  -- initialise step_had_error flag',
'  flow_globals.set_step_error ( p_has_error => false);',
'',
'',
'  -- lock subflow containing event',
'  if flow_engine_util.lock_subflow(p_subflow_id) then',
'    -- subflow_locked',
'    select curr_objt.objt_tag_name',
'         , sbfl.sbfl_sbfl_id',
'         , sbfl.sbfl_current',
'      into l_curr_objt_tag_name',
'         , l_parent_subflow',
'         , l_sbfl_current',
'      from flow_objects curr_objt ',
'      join flow_subflows sbfl ',
'        on sbfl.sbfl_current = curr_objt.objt_bpmn_id',
'       and sbfl.sbfl_dgrm_id = curr_objt.objt_dgrm_id',
'     where sbfl.sbfl_id = p_subflow_id',
'       and sbfl.sbfl_prcs_id = p_process_id',
'        ;',
'',
'    if l_curr_objt_tag_name = flow_constants_pkg.gc_bpmn_start_event then',
'      -- startEvent with associated event.',
'      handle_intermediate_catch_event -- startEvent behaves same as ICE',
'      (',
'        p_process_id   => p_process_id',
'      , p_subflow_id   => p_subflow_id',
'      , p_step_key     => p_step_key',
'      , p_current_objt => l_sbfl_current',
'      );',
'     elsif l_curr_objt_tag_name = flow_constants_pkg.gc_bpmn_boundary_event then',
'      -- if a repeating cycle timer, start next cycle before handling',
'      if p_timr_id is not null and p_run is not null then',
'        create_repeat_subflow ',
'        ( p_process_id      => p_process_id',
'        , p_last_subflow_id => p_subflow_id',
'        , p_timr_id         => p_timr_id',
'        , p_next_run        => p_run + 1',
'        );',
'      end if;',
'      -- Non-Interrupting Timer Boundary Event has required functionality same as iCE currently',
'      handle_intermediate_catch_event ',
'      (',
'        p_process_id   => p_process_id',
'      , p_subflow_id   => p_subflow_id',
'      , p_step_key     => p_step_key',
'      , p_current_objt => l_sbfl_current',
'      );',
'    elsif l_curr_objt_tag_name in ( flow_constants_pkg.gc_bpmn_subprocess',
'                                  , flow_constants_pkg.gc_bpmn_task ',
'                                  , flow_constants_pkg.gc_bpmn_usertask',
'                                  , flow_constants_pkg.gc_bpmn_manualtask',
'                                  )   -- add any objects that can support timer boundary events here',
'          -- if any of these events have a timer on them, it must be an interrupting timer.',
'          -- because non-interupting timers are set on the boundary event itself',
'    then',
'      -- we have an interrupting boundary event',
'      flow_boundary_events.handle_interrupting_boundary_event ',
'      ( p_process_id => p_process_id',
'      , p_subflow_id => p_subflow_id',
'      );',
'    else',
'      -- we need to look at previous step to see if this follows an eventBasedGateway...',
'      begin',
'        select prev_objt.objt_tag_name',
'          into l_prev_objt_tag_name',
'          from flow_connections conn ',
'          join flow_objects curr_objt ',
'            on conn.conn_tgt_objt_id = curr_objt.objt_id ',
'           and conn.conn_dgrm_id = curr_objt.objt_dgrm_id',
'          join flow_objects prev_objt ',
'            on conn.conn_src_objt_id = prev_objt.objt_id',
'           and conn.conn_dgrm_id = prev_objt.objt_dgrm_id',
'         where conn.conn_dgrm_id = l_dgrm_id',
'           and curr_objt.objt_bpmn_id = l_sbfl_current',
'            ;',
'      exception',
'        when too_many_rows then',
'            l_prev_objt_tag_name := ''other'';',
'      end;',
'      if  l_curr_objt_tag_name = flow_constants_pkg.gc_bpmn_intermediate_catch_event   ',
'          and l_prev_objt_tag_name = flow_constants_pkg.gc_bpmn_gateway_event_based then',
'        -- we have an eventBasedGateway',
'        handle_event_gateway_event ',
'        (',
'          p_process_id => p_process_id',
'        , p_parent_subflow_id => l_parent_subflow',
'        , p_cleared_subflow_id => p_subflow_id',
'        );',
'      elsif l_curr_objt_tag_name = flow_constants_pkg.gc_bpmn_intermediate_catch_event then',
'        -- independant iCE not following an eBG',
'        -- set subflow status to running and call flow_complete_step',
'        handle_intermediate_catch_event ',
'        (',
'          p_process_id => p_process_id',
'        , p_subflow_id => p_subflow_id',
'        , p_step_key   => p_step_key',
'        , p_current_objt => l_sbfl_current',
'        );',
'      end if;',
'    end if;',
'  end if; -- sbfl locked',
'exception',
'  when others then',
'    flow_errors.handle_instance_error',
'    ( pi_prcs_id  => p_process_id',
'    , pi_sbfl_id  => p_subflow_id',
'    , pi_message_key  => ''eng_handle_event_int''',
'    , p0  => p_process_id',
'    , p1  => p_subflow_id ',
'    , p2  => ''flow_handle_event''',
'    , p3  => l_curr_objt_tag_name',
'    , p4  => l_sbfl_current',
'    );',
'      -- $F4AMESSAGE ''eng_handle_event_int'' || ''Flow Engine Internal Error: Process %0 Subflow %1 Module %2 Current %4 Current Tag %3''',
'',
'end flow_handle_event;',
'',
'/************************************************************************************************************',
'****',
'****                       SUBFLOW  NEXT_STEP',
'****',
'*************************************************************************************************************/',
'',
'procedure finish_current_step',
'( p_sbfl_rec          in flow_subflows%rowtype',
', p_current_step_tag  in flow_objects.objt_tag_name%type',
', p_log_as_completed  in boolean default true',
')',
'is',
'begin',
'  -- runs all of the post-step operations for the old current task (handling post- expressionsa, releasing reservations, etc.)',
'  apex_debug.enter ',
'  ( ''finish_current_step''',
'  , ''Process ID'',  p_sbfl_rec.sbfl_prcs_id',
'  , ''Subflow ID'', p_sbfl_rec.sbfl_id',
'  );',
'  -- evaluate and set any post-step variable expressions on the last object',
'  if p_current_step_tag in ',
'  ( flow_constants_pkg.gc_bpmn_task, flow_constants_pkg.gc_bpmn_usertask, flow_constants_pkg.gc_bpmn_servicetask',
'  , flow_constants_pkg.gc_bpmn_manualtask, flow_constants_pkg.gc_bpmn_scripttask, flow_constants_pkg.gc_bpmn_businessruletask )',
'  then ',
'    flow_expressions.process_expressions',
'      ( pi_objt_bpmn_id   => p_sbfl_rec.sbfl_current',
'      , pi_set            => flow_constants_pkg.gc_expr_set_after_task',
'      , pi_prcs_id        => p_sbfl_rec.sbfl_prcs_id',
'      , pi_sbfl_id        => p_sbfl_rec.sbfl_id',
'    );',
'  end if;',
'  -- clean up any boundary events left over from the previous activity',
'  if (p_current_step_tag in ( flow_constants_pkg.gc_bpmn_subprocess',
'                              , flow_constants_pkg.gc_bpmn_task',
'                              , flow_constants_pkg.gc_bpmn_usertask',
'                              , flow_constants_pkg.gc_bpmn_manualtask',
'                            ) -- boundary event attachable types',
'      and p_sbfl_rec.sbfl_has_events is not null )            -- subflow has events attached',
'  then',
'      -- ',
'      apex_debug.info ',
'      ( p_message => ''boundary event cleanup triggered for subflow %0''',
'      , p0        => p_sbfl_rec.sbfl_id',
'      );',
'      flow_boundary_events.unset_boundary_timers ',
'      ( p_process_id => p_sbfl_rec.sbfl_prcs_id',
'      , p_subflow_id => p_sbfl_rec.sbfl_id);',
'  end if;',
'',
'  if p_log_as_completed then',
'    -- log current step as completed before loosing the reservation',
'    flow_logging.log_step_completion   ',
'    ( p_process_id => p_sbfl_rec.sbfl_prcs_id',
'    , p_subflow_id => p_sbfl_rec.sbfl_id',
'    , p_completed_object => p_sbfl_rec.sbfl_current',
'    );',
'  end if;',
'  -- release subflow reservation',
'  if p_sbfl_rec.sbfl_reservation is not null then',
'    flow_reservations.release_step',
'    ( p_process_id        => p_sbfl_rec.sbfl_prcs_id',
'    , p_subflow_id        => p_sbfl_rec.sbfl_id',
'    , p_called_internally => true',
'    );',
'  end if;',
'',
'  apex_debug.info',
'  ( p_message => ''Post Step Operations completed for current step %1 on subflow %0.''',
'  , p0        => p_sbfl_rec.sbfl_id',
'  , p1        => p_sbfl_rec.sbfl_current',
'  );',
'',
'end finish_current_step;',
'',
'function get_next_step_info',
'( p_process_id        in flow_processes.prcs_id%type',
', p_subflow_id        in flow_subflows.sbfl_id%type',
', p_forward_route     in flow_connections.conn_bpmn_id%type default null',
') return flow_types_pkg.flow_step_info',
'is',
'  l_sbfl_rec              flow_subflows%rowtype;',
'  l_dgrm_id               flow_diagrams.dgrm_id%type;',
'  l_step_info             flow_types_pkg.flow_step_info;',
' -- l_prcs_check_id         flow_processes.prcs_id%type;',
'begin',
'  apex_debug.enter ',
'  ( ''get_next_step_info''',
'  , ''Process ID'',  p_process_id',
'  , ''Subflow ID'', p_subflow_id',
'  );',
'-- Find next subflow step',
'  begin',
'    select sbfl.sbfl_dgrm_id',
'         , objt_source.objt_tag_name',
'         , objt_source.objt_id',
'         , conn.conn_tgt_objt_id',
'         , objt_target.objt_bpmn_id',
'         , objt_target.objt_tag_name    ',
'         , objt_target.objt_sub_tag_name',
'      into l_step_info',
'      from flow_connections conn',
'      join flow_objects objt_source',
'        on conn.conn_src_objt_id = objt_source.objt_id',
'       and conn.conn_dgrm_id = objt_source.objt_dgrm_id',
'      join flow_objects objt_target',
'        on conn.conn_tgt_objt_id = objt_target.objt_id',
'       and conn.conn_dgrm_id = objt_target.objt_dgrm_id',
'      join flow_subflows sbfl',
'        on sbfl.sbfl_current = objt_source.objt_bpmn_id ',
'       and sbfl.sbfl_dgrm_id = conn.conn_dgrm_id',
'     where conn.conn_tag_name = flow_constants_pkg.gc_bpmn_sequence_flow',
'       and conn.conn_bpmn_id like nvl2( p_forward_route, p_forward_route, ''%'' )',
'       and sbfl.sbfl_prcs_id = p_process_id',
'       and sbfl.sbfl_id = p_subflow_id',
'    ;',
'    return l_step_info;',
'  exception',
'    when no_data_found then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => p_process_id',
'      , pi_sbfl_id        => p_subflow_id',
'      , pi_message_key    => ''no_next_step_found''',
'      , p0 => p_subflow_id',
'      );',
'      -- $F4AMESSAGE ''no_next_step_found'' || ''No Next Step Found on subflow %0.  Check your process diagram.''',
'    when too_many_rows then',
'      flow_'))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'errors.handle_instance_error',
'      ( pi_prcs_id        => p_process_id',
'      , pi_sbfl_id        => p_subflow_id',
'      , pi_message_key    => ''more_than_1_forward_path''',
'      , p0 => p_subflow_id',
'      );',
'      -- $F4AMESSAGE ''more_than_1_forward_path'' || ''More than 1 forward path found when only 1 allowed.''',
'    when others then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id  => p_process_id',
'      , pi_sbfl_id  => p_subflow_id',
'      , pi_message_key  => ''eng_handle_event_int''',
'      , p0  => p_process_id',
'      , p1  => p_subflow_id ',
'      , p2  => ''get_next_step_info''',
'      , p3  => null',
'      , p4  => null',
'      );',
'      -- $F4AMESSAGE ''eng_handle_event_int'' || ''Flow Engine Internal Error: Process %0 Subflow %1 Module %2 Current %4 Current Tag %3''',
'  end;',
'end get_next_step_info;',
'',
'function get_restart_step_info',
'( p_process_id        in flow_processes.prcs_id%type',
', p_subflow_id        in flow_subflows.sbfl_id%type',
', p_current_bpmn_id   in flow_objects.objt_bpmn_id%type',
') return flow_types_pkg.flow_step_info',
'is',
'  l_sbfl_rec              flow_subflows%rowtype;',
'  l_dgrm_id               flow_diagrams.dgrm_id%type;',
'  l_step_info             flow_types_pkg.flow_step_info;',
'begin',
'  -- used to set up the current step for restarting when a subflow has status = error',
'  apex_debug.enter ',
'  ( ''get_restart_step_info''',
'  , ''Process ID'',  p_process_id',
'  , ''Subflow ID'', p_subflow_id',
'  );',
'-- Find next subflow step',
'  begin',
'    select sbfl.sbfl_dgrm_id',
'         , null ',
'         , null',
'         , objt_current.objt_id',
'         , objt_current.objt_bpmn_id',
'         , objt_current.objt_tag_name    ',
'         , objt_current.objt_sub_tag_name',
'      into l_step_info',
'      from flow_objects objt_current',
'      join flow_subflows sbfl',
'        on sbfl.sbfl_current = objt_current.objt_bpmn_id ',
'       and sbfl.sbfl_dgrm_id = objt_current.objt_dgrm_id',
'     where sbfl.sbfl_prcs_id = p_process_id',
'       and sbfl.sbfl_id = p_subflow_id',
'       and sbfl.sbfl_current = p_current_bpmn_id',
'    ;',
'    return l_step_info;',
'  exception',
'  when no_data_found then',
'    flow_errors.handle_general_error',
'    ( pi_message_key => ''restart-no-error''',
'    );',
'    -- $F4AMESSAGE ''restart-no-error'' || ''No Current Error Found.  Check your process diagram.''  ',
'  when too_many_rows then',
'    flow_errors.handle_general_error',
'    ( pi_message_key => ''more_than_1_forward_path''',
'    );',
'    -- $F4AMESSAGE ''more_than_1_forward_path'' || ''More than 1 forward path found when only 1 allowed.''      ',
'  end;',
'end get_restart_step_info;',
'',
'procedure restart_failed_timer_step',
'( p_sbfl_rec    in flow_subflows%rowtype',
', p_step_info   in flow_types_pkg.flow_step_info',
')',
'is',
'begin',
'  -- if an event with timer fails when the timer fires, we restart it by ignoring the timer',
'  -- and immediately running the on-event variable set and then moving forwards on the subflow',
'  apex_debug.enter ',
'  ( ''restart_failed_timer_step''',
'  , ''Process ID'',  p_sbfl_rec.sbfl_prcs_id',
'  , ''Subflow ID'', p_sbfl_rec.sbfl_id',
'  );',
'',
'  apex_debug.info ',
'  ( p_message => ''Restart Timer Step - Target object: %s.  More info at APP_TRACE level.''',
'  , p0        => coalesce(p_step_info.target_objt_tag, ''!NULL!'') ',
'  );',
'  apex_debug.trace',
'  ( p_message => ''Restart Timer Info - dgrm_id : %0, source_objt_tag : %1, target_objt_id : %2, target_objt_ref : %3''',
'  , p0  => p_step_info.dgrm_id',
'  , p1  => p_step_info.source_objt_tag',
'  , p2  => p_step_info.target_objt_id',
'  , p3  => p_step_info.target_objt_ref',
'  );',
'  apex_debug.trace',
'  ( p_message => ''Timer Step Info - target_objt_tag : %0, target_objt_subtag : %1''',
'  , p0 => p_step_info.target_objt_tag',
'  , p1 => p_step_info.target_objt_subtag',
'  );',
'  apex_debug.trace',
'  ( p_message => ''Runing Step Context - sbfl_id : %0, sbfl_last_completed : %1, sbfl_prcs_id : %2''',
'  , p0 => p_sbfl_rec.sbfl_id',
'  , p1 => p_sbfl_rec.sbfl_last_completed',
'  , p2 => p_sbfl_rec.sbfl_prcs_id',
'  );    ',
'',
'  -- evaluate and set any on-event variable expressions from the timer object',
'  flow_expressions.process_expressions',
'    ( pi_objt_id     => p_step_info.target_objt_id',
'    , pi_set         => flow_constants_pkg.gc_expr_set_on_event',
'    , pi_prcs_id     => p_sbfl_rec.sbfl_prcs_id',
'    , pi_sbfl_id     => p_sbfl_rec.sbfl_id',
'  );',
'  -- test for any errors',
'  if flow_globals.get_step_error then',
'    -- has step errors from expressions',
'    flow_errors.set_error_status',
'    ( pi_prcs_id => p_sbfl_rec.sbfl_prcs_id',
'    , pi_sbfl_id => p_sbfl_rec.sbfl_id',
'    );',
'  else',
'    -- step forward onto next step',
'    flow_complete_step',
'    ( p_process_id => p_sbfl_rec.sbfl_prcs_id',
'    , p_subflow_id => p_sbfl_rec.sbfl_id',
'    , p_step_key   => p_sbfl_rec.sbfl_step_key',
'    );',
'  end if;',
'',
'end restart_failed_timer_step;',
'',
'procedure run_step',
'( p_sbfl_rec          in flow_subflows%rowtype',
', p_step_info         in flow_types_pkg.flow_step_info',
')',
'is',
'',
'begin',
'  apex_debug.enter ',
'  ( ''run_step''',
'  , ''Process ID'',  p_sbfl_rec.sbfl_prcs_id',
'  , ''Subflow ID'', p_sbfl_rec.sbfl_id',
'  );',
'',
'  apex_debug.info ',
'  ( p_message => ''Running Step - Target object: %s.  More info at APP_TRACE level.''',
'  , p0        => coalesce(p_step_info.target_objt_tag, ''!NULL!'') ',
'  );',
'  apex_debug.trace',
'  ( p_message => ''Running Step Info - dgrm_id : %0, source_objt_tag : %1, target_objt_id : %2, target_objt_ref : %3''',
'  , p0  => p_step_info.dgrm_id',
'  , p1  => p_step_info.source_objt_tag',
'  , p2  => p_step_info.target_objt_id',
'  , p3  => p_step_info.target_objt_ref',
'  );',
'  apex_debug.trace',
'  ( p_message => ''Running Step Info - target_objt_tag : %0, target_objt_subtag : %1''',
'  , p0 => p_step_info.target_objt_tag',
'  , p1 => p_step_info.target_objt_subtag',
'  );',
'  apex_debug.trace',
'  ( p_message => ''Runing Step Context - sbfl_id : %0, sbfl_last_completed : %1, sbfl_prcs_id : %2''',
'  , p0 => p_sbfl_rec.sbfl_id',
'  , p1 => p_sbfl_rec.sbfl_last_completed',
'  , p2 => p_sbfl_rec.sbfl_prcs_id',
'  );    ',
'',
'  -- evaluate and set any pre-step variable expressions on the next object',
'  if p_step_info.target_objt_tag in ',
'  ( flow_constants_pkg.gc_bpmn_task, flow_constants_pkg.gc_bpmn_usertask, flow_constants_pkg.gc_bpmn_servicetask',
'  , flow_constants_pkg.gc_bpmn_manualtask, flow_constants_pkg.gc_bpmn_scripttask, flow_constants_pkg.gc_bpmn_businessruletask )',
'  then ',
'    flow_expressions.process_expressions',
'      ( pi_objt_id     => p_step_info.target_objt_id',
'      , pi_set         => flow_constants_pkg.gc_expr_set_before_task',
'      , pi_prcs_id     => p_sbfl_rec.sbfl_prcs_id',
'      , pi_sbfl_id     => p_sbfl_rec.sbfl_id',
'    );',
'  elsif p_step_info.target_objt_tag in ',
'  ( flow_constants_pkg.gc_bpmn_start_event, flow_constants_pkg.gc_bpmn_end_event ',
'  , flow_constants_pkg.gc_bpmn_intermediate_throw_event, flow_constants_pkg.gc_bpmn_intermediate_catch_event',
'  , flow_constants_pkg.gc_bpmn_boundary_event )',
'  then',
'    flow_expressions.process_expressions',
'      ( pi_objt_id     => p_step_info.target_objt_id',
'      , pi_set         => flow_constants_pkg.gc_expr_set_before_event',
'      , pi_prcs_id     => p_sbfl_rec.sbfl_prcs_id',
'      , pi_sbfl_id     => p_sbfl_rec.sbfl_id',
'    );',
'  end if;',
'',
'  case (p_step_info.target_objt_tag)',
'    when flow_constants_pkg.gc_bpmn_end_event then  --next step is either end of process or sub-process returning to its parent',
'      flow_engine.process_endEvent',
'      ( p_process_id => p_sbfl_rec.sbfl_prcs_id',
'      , p_subflow_id => p_sbfl_rec.sbfl_id',
'      , p_sbfl_info => p_sbfl_rec',
'      , p_step_info => p_step_info',
'      ); ',
'    when flow_constants_pkg.gc_bpmn_gateway_exclusive then',
'      flow_gateways.process_exclusiveGateway',
'      ( p_sbfl_info => p_sbfl_rec',
'      , p_step_info => p_step_info',
'      ); ',
'    when flow_constants_pkg.gc_bpmn_gateway_inclusive then',
'      flow_gateways.process_para_incl_Gateway',
'      ( p_sbfl_info => p_sbfl_rec',
'      , p_step_info => p_step_info',
'      ); ',
'    when flow_constants_pkg.gc_bpmn_gateway_parallel then',
'      flow_gateways.process_para_incl_Gateway',
'      ( p_sbfl_info => p_sbfl_rec',
'      , p_step_info => p_step_info',
'      ); ',
'    when flow_constants_pkg.gc_bpmn_subprocess then',
'      flow_engine.process_subProcess',
'      ( p_process_id => p_sbfl_rec.sbfl_prcs_id',
'      , p_subflow_id => p_sbfl_rec.sbfl_id',
'      , p_sbfl_info => p_sbfl_rec',
'      , p_step_info => p_step_info',
'      ); ',
'    when flow_constants_pkg.gc_bpmn_gateway_event_based then',
'      flow_gateways.process_eventBasedGateway',
'      ( p_sbfl_info => p_sbfl_rec',
'      , p_step_info => p_step_info',
'      ); ',
'    when  flow_constants_pkg.gc_bpmn_intermediate_catch_event then ',
'      flow_engine.process_intermediateCatchEvent',
'      ( p_sbfl_info => p_sbfl_rec',
'      , p_step_info => p_step_info',
'      ); ',
'    when  flow_constants_pkg.gc_bpmn_intermediate_throw_event then ',
'      flow_engine.process_intermediateThrowEvent',
'      ( p_sbfl_info => p_sbfl_rec',
'      , p_step_info => p_step_info',
'      ); ',
'    when  flow_constants_pkg.gc_bpmn_task then ',
'      flow_tasks.process_task',
'      ( p_sbfl_info => p_sbfl_rec',
'      , p_step_info => p_step_info',
'      );',
'    when  flow_constants_pkg.gc_bpmn_usertask then',
'      flow_tasks.process_userTask',
'      ( p_sbfl_info => p_sbfl_rec',
'      , p_step_info => p_step_info',
'      );',
'    when  flow_constants_pkg.gc_bpmn_scripttask then ',
'      flow_tasks.process_scriptTask',
'      (p_sbfl_info => p_sbfl_rec',
'      , p_step_info => p_step_info',
'      );',
'    when  flow_constants_pkg.gc_bpmn_manualtask then ',
'      flow_tasks.process_manualTask',
'      ( p_sbfl_info => p_sbfl_rec',
'      , p_step_info => p_step_info',
'      );',
'    when  flow_constants_pkg.gc_bpmn_servicetask then ',
'      flow_tasks.process_serviceTask',
'      ( p_sbfl_info => p_sbfl_rec',
'      , p_step_info => p_step_info',
'      );',
'    when  flow_constants_pkg.gc_bpmn_businessruletask then ',
'      flow_tasks.process_businessRuleTask',
'         ( p_sbfl_info => p_sbfl_rec',
'         , p_step_info => p_step_info',
'         );',
'    end case;',
'',
'  exception',
'    when case_not_found then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id     => p_sbfl_rec.sbfl_prcs_id',
'      , pi_sbfl_id     => p_sbfl_rec.sbfl_id',
'      , pi_message_key => ''engine-unsupported-object''',
'      , p0 => p_step_info.target_objt_tag',
'      );',
'      -- $F4AMESSAGE ''engine-unsupported-object'' || ''Model Error: Process BPMN model next step uses unsupported object %0''  ',
'    when no_data_found then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id     => p_sbfl_rec.sbfl_prcs_id',
'      , pi_sbfl_id     => p_sbfl_rec.sbfl_id',
'      , pi_message_key => ''no_next_step_found''',
'      , p0 => p_sbfl_rec.sbfl_id',
'      );',
'      -- $F4AMESSAGE ''no_next_step_found'' || ''No Next Step Found on subflow %0.  Check your process diagram.''  ',
'    when flow_plsql_runner_pkg.e_plsql_script_failed then',
'      null;',
'  -- let error run back to run_step',
'end run_step;',
'',
'',
'procedure flow_complete_step',
'( p_process_id        in flow_processes.prcs_id%type',
', p_subflow_id        in flow_subflows.sbfl_id%type ',
', p_step_key          in flow_subflows.sbfl_step_key%type default null',
', p_forward_route     in flow_connections.conn_bpmn_id%type default null',
', p_log_as_completed  in boolean default true',
', p_recursive_call    in boolean default true',
')',
'is',
'  l_sbfl_rec              flow_subflows%rowtype;',
'  l_step_info             flow_types_pkg.flow_step_info;',
'  l_dgrm_id               flow_diagrams.dgrm_id%type;',
'  l_timestamp             flow_subflows.sbfl_became_current%type;',
'  l_step_key              flow_subflows.sbfl_step_key%type;',
' -- l_prcs_check_id         flow_processes.prcs_id%type;',
'begin',
'  apex_debug.enter ',
'  ( ''flow_complete_step''',
'  , ''Process ID'',  p_process_id',
'  , ''Subflow ID'', p_subflow_id',
'  , ''Supplied Step Key'', p_step_key',
'  , ''recursive_call'', case when p_recursive_call then ',
'                                                    ''true'' ',
'                                                 else ',
'                                                    ''false'' ',
'                                                 end',
'  );',
'  flow_globals.set_is_recursive_step (p_is_recursive_step => p_recursive_call);',
'  -- Get current object and current subflow info and lock it',
'  l_sbfl_rec := flow_engine_util.get_subflow_info ',
'  ( p_process_id => p_process_id',
'  , p_subflow_id => p_subflow_id',
'  , p_lock_process => false ',
'  , p_lock_subflow => true',
'  );',
'',
'  -- check step key is valid',
'  if flow_engine_util.step_key_valid( pi_prcs_id  => p_process_id',
'                                    , pi_sbfl_id  => p_subflow_id',
'                                    , pi_step_key_supplied  => p_step_key',
'                                    , pi_step_key_required  => l_sbfl_rec.sbfl_step_key) then ',
'    -- step key is valid ',
'    -- if subflow has any associated non-interrupting timers on current object, lock the subflows and timers',
'    -- (other boundary event types only create a subflow when they fire)',
'    if l_sbfl_rec.sbfl_has_events like ''%:CNT%'' then ',
'      flow_boundary_events.lock_child_boundary_timers',
'      ( p_process_id => p_process_id',
'      , p_subflow_id => p_subflow_id',
'      , p_parent_objt_bpmn_id => l_sbfl_rec.sbfl_current ',
'      ); ',
'    end if;',
'    -- lock associated timers for interrupting boundary events',
'    if l_sbfl_rec.sbfl_has_events like ''%:S_T%'' then ',
'      flow_timers_pkg.lock_timer(p_process_id, p_subflow_id);',
'    end if;',
'',
'    -- Find next subflow step',
'    l_step_info := get_next_step_info ',
'    ( p_process_id => p_process_id',
'    , p_subflow_id => p_subflow_id',
'    , p_forward_route => p_forward_route',
'    );',
'',
'    -- complete the current step by doing the post-step operations',
'    finish_current_step',
'    ( p_sbfl_rec => l_sbfl_rec',
'    , p_current_step_tag => l_step_info.source_objt_tag',
'    , p_log_as_completed => p_log_as_completed',
'    );',
'  end if; -- step key valid',
'',
'  -- end of post-step operations for previous step',
'  if flow_globals.get_step_error then',
'    rollback;',
'    if p_recursive_call then',
'      -- set errort status on instance and subflow',
'      flow_errors.set_error_status',
'      ( pi_prcs_id => p_process_id',
'      , pi_sbfl_id => p_subflow_id',
'      );',
'    end if;',
'    apex_debug.info',
'    ( p_message => ''Subflow %0 : Step End Rollback due to earlier Error on Step %1''',
'    , p0        => p_subflow_id',
'    , p1        => l_sbfl_rec.sbfl_current',
'    );',
'  else',
'    l_timestamp := systimestamp;',
'    l_step_key  := flow_engine_util.step_key ( pi_sbfl_id         => p_subflow_id',
'                                             , pi_current         => l_step_info.target_objt_ref',
'                                             , pi_became_current  => l_timestamp',
'                                             );',
'    -- update subflow with step completed, and prepare for next step before committing',
'    update flow_subflows sbfl',
'      set sbfl.sbfl_current = l_step_info.target_objt_ref',
'        , sbfl.sbfl_last_completed = l_sbfl_rec.sbfl_current',
'        , sbfl.sbfl_became_current = l_timestamp',
'        , sbfl.sbfl_step_key = l_step_key',
'        , sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_running',
'        , sbfl.sbfl_work_started = null',
'        , sbfl.sbfl_last_update = l_timestamp',
'    where sbfl.sbfl_prcs_id = p_process_id',
'      and sbfl.sbfl_id = p_subflow_id',
'    ;',
'    commit;',
'',
'    apex_debug.info',
'    ( p_message => ''Subflow %0 : Step End Committed for step %1''',
'    , p0        => p_subflow_id',
'    , p1        => l_sbfl_rec.sbfl_current',
'    );',
'  ',
'',
'    -- start of pre-phase for next step',
'    -- reset step_had_error flag',
'    flow_globals.set_step_error ( p_has_error => false);',
'    -- now into next step so is not part of users current step',
'    flow_globals.set_is_recursive_step (p_is_recursive_step => true);',
'    apex_debug.info ( p_message => ''Step now counted as recursive'');',
'    -- relock subflow',
'    l_sbfl_rec := flow_engine_util.get_subflow_info ',
'    ( p_process_id => p_process_id',
'    , p_subflow_id => p_subflow_id',
'    , p_lock_process => false',
'    , p_lock_subflow => true',
'    );',
'    run_step ',
'    ( p_sbfl_rec => l_sbfl_rec',
'    , p_step_info => l_step_info ',
'    );',
'    -- Commit transaction before returning',
'    if flow_globals.get_step_error then',
'      rollback;',
' ',
'      -- set error status on instance and subflow',
'      flow_errors.set_error_status',
'      ( pi_prcs_id => p_process_id',
'      , pi_sbfl_id => p_subflow_id',
'      );',
'      commit;',
' ',
'      apex_debug.info',
'      ( p_message => ''Subflow %0 : Step End Rollback due to earlier Error.  (Error Status Just Committed.)''',
'      , p0        => p_subflow_id',
'      );',
'      ',
'    else',
'      commit;',
'',
'      apex_debug.info',
'      ( p_message => ''Subflow %0 : Step End Committed''',
'      , p0        => p_subflow_id',
'      );',
'    end if;',
'  end if;',
'  end flow_complete_step;',
'',
'  procedure start_step -- just (optionally) records the start time gpr work on the current step',
'    ( p_process_id         in flow_processes.prcs_id%type',
'    , p_subflow_id         in flow_subflows.sbfl_id%type',
'    , p_step_key           in flow_subflows.sbfl_step_key%type default null',
'    , p_called_internally  in boolean default false',
'    )',
'  is',
'    l_existing_start       flow_subflows.sbfl_work_started%type;',
'  begin',
'    apex_debug.enter',
'    ( ''start_step''',
'    , ''Subflow '', p_subflow_id',
'    , ''Process '', p_process_id ',
'    , ''Step Key'', p_step_key',
'    );',
'    -- subflow should already be locked when calling internally',
'    if not p_called_internally then ',
'      -- lock  subflow if called externally',
'      select sbfl_work_started',
'        into l_existing_start',
'        from flow_subflows sbfl ',
'       where sbfl.sbfl_id = p_subflow_id',
'         and sbfl.sbfl_prcs_id = p_process_id',
'         for update of sbfl_work_started wait 3',
'      ;',
'    end if;',
'    -- check the step key',
'    if flow_engine_util.step_key_valid( pi_prcs_id  => p_process_id',
'                                      , pi_sbfl_id  => p_subflow_id',
'                                      , pi_step_key_supplied  => p_step_key',
'                                      ) ',
'    then ',
'      -- set the start time if null',
'      if l_existing_start is null then',
'        update flow_subflows sbfl',
'          set sbfl_work_started = systimestamp',
'        where sbfl_prcs_id = p_process_id',
'          and sbfl_id = p_subflow_id',
'        ;',
'        -- commit reservation if this is an external call',
'        if not p_called_internally then ',
'          commit;',
'        end if;',
'      end if;',
'    end if;',
'  exception',
'    when no_data_found then',
'      flow_errors.handle_general_error',
'      ( pi_message_key => ''startwork-sbfl-not-found''',
'      , p0 => p_subflow_id',
'      , p1 => p_process_id',
'      );',
'      -- $F4AMESSAGE ''startwork-sbfl-not-found'' || ''Start Work time recording unsuccessful.  Subflow %0 in Process %1 not found.''  ',
'    when lock_timeout then',
'      flow_errors.handle_general_error',
'      ( pi_message_key => ''timeout_locking_subflow''',
'      , p0 => p_subflow_id',
'      );',
'      -- $F4AMESSAGE ''timeout_locking_subflow'' || ''Unable to lock subflow %0 as currently locked by another user.  Try again later.''        ',
'  end start_step;',
'',
'procedure restart_step',
'  ( p_process_id          in flow_processes.prcs_id%type',
'  , p_subflow_id          in flow_subflows.sbfl_id%type',
'  , p_step_key            in flow_subflows.sbfl_step_key%type default null',
'  , p_comment             in flow_instance_event_log.lgpr_comment%type default null',
'  )',
'is ',
'  l_sbfl_rec            flow_subflows%rowtype;',
'  l_step_info           flow_types_pkg.flow_step_info;',
'  l_num_error_subflows  number;',
'begin ',
'  apex_debug.enter ',
'  ( ''flow_restart_step''',
'  , ''Process ID'',  p_process_id',
'  , ''Subflow ID'', p_subflow_id',
'  );',
'  flow_globals.set_is_recursive_step (p_is_recursive_step => true);',
'   -- reset step_had_error flag',
'  flow_globals.set_step_error ( p_has_error => false);',
'',
'  -- lock the process and subflow',
'  l_sbfl_rec := flow_engine_util.get_subflow_info ',
'                ( p_process_id => p_process_id',
'                , p_subflow_id => p_subflow_id',
'                , p_lock_process => true',
'                , p_lock_subflow => true',
'                );',
'  -- check subflow current task is in error status',
'  if l_sbfl_rec.sbfl_status <> flow_constants_pkg.gc_sbfl_status_error then ',
'      flow_errors.handle_general_error',
'      ( pi_message_key => ''restart-no-error''',
'      );',
'      -- $F4AMESSAGE ''restart-no-error'' || ''No Current Error Found.  Check your process diagram.''  ',
'  end if;',
'  ',
'  if flow_engine_util.step_key_valid( pi_prcs_id  => p_process_id',
'                                    , pi_sbfl_id  => p_subflow_id',
'                                    , pi_step_key_supplied  => p_step_key',
'                                    ) ',
'  then ',
'    -- valid step key was supplied',
'    -- set up step context',
'    l_step_info :=  get_restart_step_info',
'                    ( p_process_id => p_process_id',
'                    , p_subflow_id => p_subflow_id',
'                    , p_current_bpmn_id => l_sbfl_rec.sbfl_current',
'                    );',
'    -- set subflow status to running',
'    update flow_subflows sbfl',
'       set sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_running',
'         , sbfl_last_update = systimestamp',
'     where sbfl.sbfl_prcs_id = p_process_id',
'       and sbfl.sbfl_id = p_subflow_id',
'    ;',
'    -- log the restart',
'    flow_logging.log_instance_event',
'    ( p_process_id    => p_process_id',
'    , p_event         => flow_constants_pkg.gc_prcs_event_restart_step',
'    , p_objt_bpmn_id  => l_sbfl_rec.sbfl_current',
'    , p_comment       => ''restart step ''||l_sbfl_rec.sbfl_current||''. Comment: ''||p_comment',
'    );',
'    -- see if instance can be reset to running',
'    select count(sbfl_id)',
'      into l_num_error_subflows',
'      from flow_subflows sbfl ',
'     where sbfl.sbfl_prcs_id = p_process_id',
'       and sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_error ',
'    ;',
'    if l_num_error_subflows = 0 then',
'      update flow_processes prcs',
'         set prcs.prcs_status = flow_constants_pkg.gc_prcs_status_running',
'       where prcs.prcs_id = p_process_id',
'      ;',
'      flow_logging.log_instance_event',
'      ( p_process_id    => p_process_id',
'      , p_objt_bpmn_id  => l_sbfl_rec.sbfl_current',
'      , p_event         => flow_constants_pkg.gc_prcs_status_running',
'      );',
'    end if;',
'',
'    if l_step_info.target_objt_subtag = flow_constants_pkg.gc_bpmn_timer_event_definition then',
'      -- restart object contains a timer.  run var exps and step forward immediately',
'      restart_failed_timer_step',
'      ( p_sbfl_rec => l_sbfl_rec',
'      , p_step_info => l_step_info',
'      );',
'    else',
'      -- all other object types.  restart current task',
'      run_step ',
'      ( p_sbfl_rec => l_sbfl_rec',
'      , p_step_info => l_step_info',
'      );',
'    end if;',
'  end if;  -- valid step key',
'',
'  -- commit or rollback based on errors',
'  if flow_globals.get_step_error then',
'    rollback;',
'  else',
'    commit;',
'  end if;',
'end restart_step;',
'',
'end flow_engine;',
'/',
'',
'create or replace package body flow_api_pkg',
'as',
'',
'  function get_dgrm_name',
'  (',
'    p_prcs_id in flow_processes.prcs_id%type',
'  ) return varchar2',
'  is',
'    l_dgrm_name flow_diagrams.dgrm_name%type;',
'  begin',
'',
'    select dgrm.dgrm_name',
'      into l_dgrm_name',
'      from flow_processes prcs',
'      join flow_diagrams dgrm',
'        on dgrm.dgrm_id = prcs.prcs_dgrm_id',
'     where prcs.prcs_id = p_prcs_id',
'    ;',
'         ',
'    return l_dgrm_name;',
'  end get_dgrm_name;',
'',
'  function flow_create',
'  (',
'    pi_dgrm_name in flow_diagrams.dgrm_name%type',
'  , pi_dgrm_version in flow_diagrams.dgrm_version%type default null',
'  , pi_prcs_name in flow_processes.prcs_name%type',
'  ) return flow_processes.prcs_id%type',
'  as',
'    l_dgrm_id flow_diagrams.dgrm_id%type;',
'    l_dgrm_version flow_diagrams.dgrm_version%type;',
'  begin',
'  ',
'    if pi_dgrm_version is null then',
'      -- look for the ''released'' version of the diagram',
'      begin',
'          select dgrm_id ',
'            into l_dgrm_id',
'            from flow_diagrams',
'          where dgrm_name = pi_dgrm_name',
'            and dgrm_status = flow_constants_pkg.gc_dgrm_status_released',
'          ;',
'      exception',
'        when no_data_found then',
'          -- look for the version 0 (default) of ''draft'' of the diagram',
'          begin',
'              select dgrm_id',
'                into l_dgrm_id',
'                from flow_diagrams',
'              where dgrm_name = pi_dgrm_name',
'                and dgrm_status = flow_constants_pkg.gc_dgrm_status_draft',
'                and dgrm_version = ''0''',
'              ;',
'          exception',
'            when no_data_found then',
'              flow_errors.handle_general_error',
'              ( pi_message_key => ''version-no-rel-or-draft-v0''',
'              );',
'              -- $F4AMESSAGE ''version-no-rel-or-draft-v0'' || ''Cannot find released diagram or draft version 0 of diagram - please specify a version or diagram_id''',
'          end;',
'      end;            ',
'    else -- dgrm_version was specified',
'      select dgrm_id',
'        into l_dgrm_id',
'        from flow_diagrams',
'       where dgrm_name = pi_dgrm_name',
'         and dgrm_version = pi_dgrm_version',
'      ;',
'    end if;',
'',
'    return',
'      flow_instances.create_process',
'      (',
'        p_dgrm_id   => l_dgrm_id',
'      , p_prcs_name => pi_prcs_name',
'      )',
'    ;',
'  ',
'  end flow_create;',
'',
'  function flow_create',
'  (',
'    pi_dgrm_id   in flow_diagrams.dgrm_id%type',
'  , pi_prcs_name in flow_processes.prcs_name%type',
'  ) return flow_processes.prcs_id%type',
'  is',
'    l_ret flow_processes.prcs_id%type;',
'  begin',
'    return flow_instances.create_process',
'           ( p_dgrm_id => pi_dgrm_id',
'           , p_prcs_name => pi_prcs_name',
'           )',
'    ;',
'  end flow_create;',
'',
'  procedure flow_create',
'  (',
'    pi_dgrm_name in flow_diagrams.dgrm_name%type',
'  , pi_dgrm_version in flow_diagrams.dgrm_version%type default null',
'  , pi_prcs_name in flow_processes.prcs_name%type',
'  )',
'  as',
'    l_prcs_id flow_processes.prcs_id%type;',
'  begin',
'    l_prcs_id :=',
'      flow_create',
'      (',
'        pi_dgrm_name => pi_dgrm_name',
'      , pi_dgrm_version => pi_dgrm_version',
'      , pi_prcs_name => pi_prcs_name',
'      );',
'  end flow_create;',
'',
'  procedure flow_create',
'  (',
'    pi_dgrm_id   in flow_diagrams.dgrm_id%type',
'  , pi_prcs_name in flow_processes.prcs_name%type',
'  )',
'  as',
'    l_prcs_id flow_processes.prcs_id%type;',
'  begin',
'    l_prcs_id :=',
'      flow_instances.create_process',
'      (',
'        p_dgrm_id   => pi_dgrm_id',
'      , p_prcs_name => pi_prcs_name',
'      );',
'  end flow_create;',
'',
'  procedure flow_start',
'    ( p_process_id in flow_processes.prcs_id%type',
'    )',
'    is',
'    begin  ',
'        apex_debug.message(p_message => ''Begin flow_start'', p_level => 3) ;',
'',
'        flow_globals.set_context',
'        ( pi_prcs_id => p_process_id',
'        );',
'  ',
'        flow_instances.start_process ',
'        ( p_process_id => p_process_id',
'        );',
'  end flow_start;',
'',
'  procedure flow_reserve_step',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_step_key      in flow_subflows.sbfl_step_key%type default null',
'  , p_reservation   in flow_subflows.sbfl_reservation%type',
'  )',
'  is ',
'  begin',
'',
'    flow_reservations.reserve_step',
'    ( p_process_id  => p_process_id',
'    , p_subflow_id  => p_subflow_id',
'    , p_reservation => p_reservation',
'    , p_step_key    => p_step_key',
'    );',
'  end flow_reserve_step;',
'',
'  procedure flow_release_step',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_step_key      in flow_subflows.sbfl_step_key%type default null',
'  )',
'  is ',
'  begin',
'',
'    flow_reservations.release_step',
'    ( p_process_id => p_process_id',
'    , p_subflow_id => p_subflow_id',
'    , p_step_key   => p_step_key',
'    );',
'  end flow_release_step;',
'',
'  procedure flow_start_step',
'  (',
'    p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_step_key      in flow_subflows.sbfl_step_key%type default null',
'  )',
'  is ',
'  begin',
'    flow_engine.start_step',
'    ( p_process_id  => p_process_id',
'    , p_subflow_id  => p_subflow_id',
'    , p_step_key    => p_step_key',
'    );',
'  end flow_start_step;',
'',
'  procedure flow_restart_step',
'  (',
'    p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_step_key      in flow_subflows.sbfl_step_key%type default null',
'  , p_comment       in flow_instance_event_log.lgpr_comment%type default null',
'  )',
'  is ',
'  begin ',
'    flow_globals.set_context',
'    ( pi_prcs_id  => p_process_id',
'    , pi_sbfl_id  => p_subflow_id',
'    , pi_step_key => p_step_key',
'    );',
'    flow_engine.restart_step',
'    ( p_process_id => p_process_id',
'    , p_subflow_id => p_subflow_id',
'    , p_step_key   => p_step_key',
'    , p_comment    => p_comment',
'    );',
'  end flow_restart_step;',
'',
'',
'  procedure flow_complete_step',
'  ( p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_step_key      in flow_subflows.sbfl_step_key%type default null',
'  )',
'  is ',
'  begin',
'    flow_globals.set_context',
'    ( pi_prcs_id  => p_process_id',
'    , pi_sbfl_id  => p_subflow_id',
'    , pi_step_key => p_step_key',
'    );',
'    flow_engine.flow_complete_step',
'    ( p_process_id => p_process_id',
'    , p_subflow_id => p_subflow_id',
'    , p_step_key   => p_step_key',
'    , p_recursive_call => false',
'    );',
'  end flow_complete_step;',
'',
'  procedure flow_reschedule_timer',
'  (',
'      p_process_id    in flow_processes.prcs_id%type',
'    , p_subflow_id    in flow_subflows.sbfl_id%type',
'    , p_step_key      in flow_subflows.sbfl_step_key%type default null',
'    , p_is_immediate  in boolean default false',
'    , p_new_timestamp in flow_timers.timr_start_on%type default null',
'    , p_comment       in flow_instance_event_log.lgpr_comment%type default null',
'  )',
'  is',
'  begin',
'    flow_timers_pkg.reschedule_timer',
'    ( ',
'      p_process_id    => p_process_id',
'    , p_subflow_id    => p_subflow_id',
'    , p_step_key      => p_step_key ',
'    , p_is_immediate  => p_is_immediate',
'    , p_new_timestamp => p_new_timestamp',
'    , p_comment       => p_comment',
'    );',
'  end flow_reschedule_timer;',
'',
'  procedure flow_reset',
'  ( p_process_id in flow_processes.prcs_id%type',
'  , p_comment     in flow_instance_event_log.lgpr_comment%type default null',
'  )',
'  is',
'  begin',
'    apex_debug.enter ',
'    ( p_routine_name '))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'=> ''flow_reset''',
'    );',
'    flow_instances.reset_process ',
'    ( p_process_id  => p_process_id',
'    , p_comment     => p_comment',
'    );',
'  end flow_reset;',
'',
'  procedure flow_terminate',
'  ( p_process_id  in flow_processes.prcs_id%type',
'  , p_comment     in flow_instance_event_log.lgpr_comment%type default null',
'  )',
'  is',
'  begin',
'    apex_debug.enter ',
'    ( p_routine_name => ''flow_terminate''',
'    );',
'    flow_instances.terminate_process ',
'    ( p_process_id => p_process_id',
'    , p_comment    => p_comment',
'    );',
'  end flow_terminate;',
'',
'  procedure flow_delete',
'  ( p_process_id  in flow_processes.prcs_id%type',
'  , p_comment     in flow_instance_event_log.lgpr_comment%type default null',
'  )',
'  is',
'  begin',
'    apex_debug.enter',
'    (p_routine_name => ''flow_delete''',
'    );',
'    flow_instances.delete_process ',
'    ( p_process_id => p_process_id',
'    , p_comment    => p_comment',
'    );',
'  end flow_delete;',
'',
'  function get_current_usertask_url',
'  (',
'    p_process_id in flow_processes.prcs_id%type',
'  , p_subflow_id in flow_subflows.sbfl_id%type',
'  , p_step_key      in flow_subflows.sbfl_step_key%type default null',
'  ) return varchar2',
'  as',
'    l_objt_id flow_objects.objt_id%type;',
'  begin',
'    apex_debug.trace ( p_message => ''Entering GET_CURRENT_USERTASK_URL'' );',
'',
'    select objt.objt_id',
'      into l_objt_id',
'      from flow_subflows sbfl',
'      join flow_processes prcs',
'        on prcs.prcs_id = sbfl.sbfl_prcs_id',
'      join flow_objects objt',
'        on objt.objt_dgrm_id = prcs.prcs_dgrm_id',
'       and objt.objt_bpmn_id = sbfl.sbfl_current',
'     where sbfl.sbfl_prcs_id = p_process_id',
'       and sbfl.sbfl_id = p_subflow_id',
'       and objt.objt_tag_name = flow_constants_pkg.gc_bpmn_usertask',
'    ;',
'',
'    apex_debug.trace( p_message => ''Found OBJT_ID %s'', p0 => l_objt_id );',
'',
'    return ',
'      flow_usertask_pkg.get_url',
'      (',
'        pi_prcs_id  => p_process_id',
'      , pi_sbfl_id  => p_subflow_id',
'      , pi_step_key => p_step_key',
'      , pi_objt_id  => l_objt_id',
'      );',
'  end get_current_usertask_url;',
'',
'  function message',
'  ( p_message_key    in varchar2',
'  , p_lang            in varchar2 default ''en''',
'  , p0                in varchar2 default null',
'  , p1                in varchar2 default null',
'  , p2                in varchar2 default null',
'  , p3                in varchar2 default null',
'  , p4                in varchar2 default null',
'  , p5                in varchar2 default null',
'  , p6                in varchar2 default null',
'  , p7                in varchar2 default null',
'  , p8                in varchar2 default null',
'  , p9                in varchar2 default null',
'  ) return varchar2',
'  is',
'  begin',
'    return flow_errors.make_error_message',
'           ( pi_message_key => p_message_key',
'           , pi_lang        => p_lang',
'           , p0   => p0',
'           , p1   => p1',
'           , p2   => p2',
'           , p3   => p3',
'           , p4   => p4',
'           , p5   => p5',
'           , p6   => p6',
'           , p7   => p7',
'           , p8   => p8',
'           , p9   => p9',
'           );',
'',
'  end message;',
'',
'end flow_api_pkg;',
'/',
'',
'create or replace package body flow_migrate_xml_pkg',
'as',
'',
'  function is_exporter_version_current(',
'    p_domdoc dbms_xmldom.DOMDocument',
'  ) return boolean',
'  as',
'    l_exporter varchar2(50);',
'    l_exporter_version varchar2(10);',
'    l_domnodelist dbms_xmldom.DOMNodeList;',
'    l_domnode dbms_xmldom.DOMNode;',
'    l_domelement dbms_xmldom.DOMElement;',
'  begin',
'    l_domnodelist := dbms_xmldom.getelementsbytagname(',
'      doc => p_domdoc',
'    , tagname => ''definitions''',
'    );',
'    for i in 0 .. dbms_xmldom.getlength(l_domnodelist) - 1',
'      loop',
'        l_domnode := dbms_xmldom.item(l_domnodelist, i);',
'        l_domelement := dbms_xmldom.makeelement(l_domnode);',
'        l_exporter := dbms_xmldom.getattribute(',
'                        elem => l_domelement',
'                      , name => ''exporter''',
'                      );',
'        l_exporter_version := dbms_xmldom.getattribute(',
'                              elem => l_domelement',
'                            , name => ''exporterVersion''',
'                            );',
'      end loop;    ',
'    return (l_exporter = ''Flows for APEX'' and l_exporter_version = flow_constants_pkg.gc_version);',
'  end is_exporter_version_current;',
'  ',
'  procedure set_exporter(',
'    p_domdoc in out dbms_xmldom.DOMDocument',
'  , p_exporter varchar2',
'  , p_exporter_version varchar2',
'  )',
'  as',
'    l_domnodelist dbms_xmldom.DOMNodeList;',
'    l_domnode dbms_xmldom.DOMNode;',
'    l_domelement dbms_xmldom.DOMElement;',
'  begin',
'    l_domnodelist := dbms_xmldom.getelementsbytagname(',
'      doc => p_domdoc',
'    , tagname => ''definitions''',
'    );',
'    for i in 0 .. dbms_xmldom.getlength(l_domnodelist) - 1',
'      loop',
'        l_domnode := dbms_xmldom.item(l_domnodelist, i);',
'        l_domelement := dbms_xmldom.makeelement(l_domnode);',
'        dbms_xmldom.setattribute(',
'          elem => l_domelement',
'        , name => ''exporter''',
'        , newValue => p_exporter',
'        );',
'        dbms_xmldom.setattribute(',
'          elem => l_domelement',
'        , name => ''exporterVersion''',
'        , newValue => p_exporter_version',
'        );',
'      end loop;    ',
'  end set_exporter;',
'',
'  procedure append_page_item(',
'    p_domdoc in out dbms_xmldom.DOMDocument',
'  , p_page_items in out dbms_xmldom.DOMNode',
'  , p_item_name varchar2',
'  , p_item_value varchar2',
'  )',
'  as',
'    l_item_node dbms_xmldom.DOMNode;',
'    l_item_name_node dbms_xmldom.DOMNode;',
'    l_item_value_node dbms_xmldom.DOMNode;',
'    l_item_text_node dbms_xmldom.DOMNode;',
'  begin',
'    -- create page item node',
'    l_item_node := dbms_xmldom.makenode( ',
'      elem => dbms_xmldom.createelement( ',
'                doc => p_domdoc',
'              , tagName => ''apex:pageItem''',
'              , ns => flow_constants_pkg.gc_nsapex',
'              )',
'    );',
'    -- append',
'    l_item_node := dbms_xmldom.appendchild(',
'      n => p_page_items',
'    , newchild => l_item_node',
'    );',
'    -- create item name node ',
'    l_item_name_node := dbms_xmldom.makenode( ',
'      elem => dbms_xmldom.createelement( ',
'                doc => p_domdoc',
'              , tagName => ''apex:itemName''',
'              , ns => flow_constants_pkg.gc_nsapex',
'              ) ',
'    );',
'    -- create text node',
'    l_item_text_node := dbms_xmldom.makenode( ',
'      t => dbms_xmldom.createtextnode(',
'            doc => p_domdoc',
'          , data => p_item_name',
'          )',
'    );',
'    -- append text',
'    l_item_text_node := dbms_xmldom.appendchild(',
'      n => l_item_name_node',
'    , newchild => l_item_text_node',
'    );',
'    -- append',
'    l_item_name_node := dbms_xmldom.appendchild(',
'      n => l_item_node',
'    , newchild => l_item_name_node',
'    );',
'    -- create item value node ',
'    l_item_value_node := dbms_xmldom.makenode( ',
'      elem => dbms_xmldom.createelement( ',
'                doc => p_domdoc',
'              , tagName => ''apex:itemValue''',
'              , ns => flow_constants_pkg.gc_nsapex',
'              )',
'    );',
'     -- create text node',
'    l_item_text_node := dbms_xmldom.makenode( ',
'      t => dbms_xmldom.createtextnode(',
'            doc => p_domdoc',
'          , data => p_item_value',
'          )',
'    );',
'    -- append text',
'    l_item_text_node := dbms_xmldom.appendchild(',
'      n => l_item_value_node',
'    , newchild => l_item_text_node',
'    );',
'    -- append',
'    l_item_value_node := dbms_xmldom.appendchild(',
'      n => l_item_node',
'    , newchild => l_item_value_node',
'    );',
'  end append_page_item;    ',
'',
'  procedure update_apex_namespace(',
'    p_domdoc in out dbms_xmldom.DOMDocument',
'  )',
'  as',
'    l_domnodelist dbms_xmldom.DOMNodeList;',
'    l_domnode dbms_xmldom.DOMNode;',
'    l_domelement dbms_xmldom.DOMElement;',
'  begin',
'    l_domnodelist := dbms_xmldom.getelementsbytagname(',
'      doc => p_domdoc',
'    , tagname => ''definitions''',
'    );',
'    for i in 0 .. dbms_xmldom.getlength(l_domnodelist) - 1',
'      loop',
'        l_domnode := dbms_xmldom.item(l_domnodelist, i);',
'        l_domelement := dbms_xmldom.makeelement(l_domnode);',
'        dbms_xmldom.setattribute(',
'          elem => l_domelement',
'        , name => ''xmlns:apex''',
'        , newValue => flow_constants_pkg.gc_nsapex',
'        );',
'      end loop; ',
'  end update_apex_namespace;',
'',
'  procedure migrate_xml(',
'    p_dgrm_content in out clob',
'  , p_has_changed out boolean  ',
'  )',
'  as',
'    l_data XMLTYPE;',
'    l_domdoc dbms_xmldom.DOMDocument;',
'    l_domnodelist dbms_xmldom.DOMNodeList;',
'    -- task',
'    l_domnode dbms_xmldom.DOMNode;',
'    l_domelement dbms_xmldom.DOMElement;',
'    -- extension element',
'    l_extension_node dbms_xmldom.DOMNode;',
'    -- task type',
'    l_task_type_node dbms_xmldom.DOMNode;',
'    -- children (old)',
'    l_children dbms_xmldom.DOMNodeList;',
'    l_children_count number;',
'    l_child_node dbms_xmldom.DOMNode;',
'    -- child value',
'    l_child_text_node dbms_xmldom.DOMNode;',
'    -- children (new)',
'    l_ext_child_node dbms_xmldom.DOMNode;',
'    l_ext_child_tag_name varchar2(50);',
'',
'    -- user task',
'    l_items varchar2(4000);',
'    l_items_arr apex_t_varchar2;',
'    l_values varchar2(4000);',
'    l_values_arr apex_t_varchar2;',
'    l_valid_items number;',
'',
'    l_return clob;',
'  begin',
'    -- get xml document',
'    l_data := XMLTYPE(p_dgrm_content);',
'    l_domdoc := dbms_xmldom.newDOMDocument(l_data);',
'',
'    -- retrieve exporter version',
'    if not is_exporter_version_current(l_domdoc) then',
'',
'      -- get tags',
'      l_domnodelist := dbms_xmldom.getelementsbytagname(',
'        doc => l_domdoc',
'      , tagname => ''*''',
'      );',
'  ',
'      -- loop over all tags',
'      for i in 0 .. dbms_xmldom.getlength(l_domnodelist) - 1',
'      loop',
'        l_domnode := dbms_xmldom.item(l_domnodelist, i);',
'        case',
'          -- user tasks',
'          when dbms_xmldom.getnodename(l_domnode) = ''bpmn:userTask'' then',
'            l_domelement := dbms_xmldom.makeelement(l_domnode);',
'            -- set task type attribute',
'            dbms_xmldom.setattribute(',
'              elem => l_domelement',
'            , name => ''apex:type''',
'            , newValue => ''apexPage''',
'            , ns => flow_constants_pkg.gc_nsapex',
'            );',
'            -- create extension element node ',
'            l_extension_node := dbms_xmldom.makenode( ',
'              elem => dbms_xmldom.createelement( ',
'                  doc => l_domdoc',
'                , tagName => ''bpmn:extensionElements''',
'                , ns => flow_constants_pkg.gc_nsbpmn',
'                )',
'            );',
'            -- append',
'            l_extension_node := dbms_xmldom.appendchild(',
'              n => l_domnode',
'            , newchild => l_extension_node',
'            );',
'            -- create apex page node ',
'            l_task_type_node := dbms_xmldom.makenode( ',
'              elem => dbms_xmldom.createelement( ',
'                doc => l_domdoc',
'              , tagName => ''apex:apexPage''',
'              , ns => flow_constants_pkg.gc_nsapex',
'              ) ',
'            );',
'            -- append',
'            l_task_type_node := dbms_xmldom.appendchild(',
'              n => l_extension_node',
'            , newchild => l_task_type_node',
'            );  ',
'            -- get child nodes',
'            l_children := dbms_xmldom.getchildnodes(l_domnode);',
'            l_children_count := dbms_xmldom.getlength(l_children);',
'            -- loop over child nodes',
'            for j in 0 .. l_children_count - 1',
'            loop',
'              l_child_node := dbms_xmldom.item(l_children, j);',
'              case dbms_xmldom.getnodename(l_child_node)',
'                when ''apex:apex-application'' then',
'                  l_ext_child_tag_name := ''apex:applicationId'';',
'                when ''apex:apex-page'' then',
'                  l_ext_child_tag_name := ''apex:pageId'';',
'                when ''apex:apex-request'' then',
'                  l_ext_child_tag_name := ''apex:request'';',
'                when ''apex:apex-cache'' then',
'                  l_ext_child_tag_name := ''apex:cache'';',
'                when ''apex:apex-item'' then',
'                  l_ext_child_tag_name := '''';',
'                  -- get text',
'                  l_items := dbms_xmldom.getnodevalue(dbms_xmldom.getfirstchild(l_child_node));',
'                  -- remove old child',
'                  l_child_node := dbms_xmldom.removechild(',
'                    n => l_domnode',
'                  , oldchild => l_child_node',
'                  ); ',
'                when ''apex:apex-value'' then',
'                  l_ext_child_tag_name := '''';',
'                  -- get text',
'                  l_values := dbms_xmldom.getnodevalue(dbms_xmldom.getfirstchild(l_child_node));',
'                  -- remove old child',
'                  l_child_node := dbms_xmldom.removechild(',
'                    n => l_domnode',
'                  , oldchild => l_child_node',
'                  ); ',
'                else',
'                  l_ext_child_tag_name := '''';',
'              end case;',
'              if length(l_ext_child_tag_name) > 0 then',
'                  -- create new child element node ',
'                  l_ext_child_node := dbms_xmldom.makenode( ',
'                    elem => dbms_xmldom.createelement( ',
'                              doc => l_domdoc',
'                            , tagName => l_ext_child_tag_name',
'                            , ns => flow_constants_pkg.gc_nsapex',
'                            ) ',
'                  );',
'                  -- get text node',
'                  l_child_text_node := dbms_xmldom.getfirstchild(l_child_node);',
'                  if not dbms_xmldom.isnull(l_child_text_node) then',
'                      -- add text node',
'                      l_child_text_node := dbms_xmldom.appendchild(',
'                        n => l_ext_child_node',
'                      , newchild => l_child_text_node',
'                      );',
'                      -- append',
'                      l_ext_child_node := dbms_xmldom.appendchild(',
'                        n => l_task_type_node',
'                      , newchild => l_ext_child_node',
'                      );',
'                  end if;      ',
'                  -- remove old child',
'                  l_child_node := dbms_xmldom.removechild(',
'                    n => l_domnode',
'                  , oldchild => l_child_node',
'                  );  ',
'              end if;',
'            end loop;',
'            -- add page items',
'            if (length(l_items) > 0 or length(l_values) > 0) then',
'              -- create new page items node ',
'              l_ext_child_node := dbms_xmldom.makenode( ',
'                elem => dbms_xmldom.createelement( ',
'                          doc => l_domdoc',
'                        , tagName => ''apex:pageItems''',
'                        , ns => flow_constants_pkg.gc_nsapex',
'                        )',
'              );',
'              -- append',
'              l_ext_child_node := dbms_xmldom.appendchild(',
'                n => l_task_type_node',
'              , newchild => l_ext_child_node',
'              );',
'              l_items_arr := apex_string.split(p_str => l_items, p_sep => '','');',
'              l_values_arr := apex_string.split(p_str => l_values, p_sep => '','');',
'              l_valid_items := least(l_items_arr.count, l_values_arr.count);',
'              for i in 1 .. l_valid_items',
'              loop',
'                append_page_item(',
'                  p_domdoc => l_domdoc',
'                , p_page_items => l_ext_child_node',
'                , p_item_name => l_items_arr(i)',
'                , p_item_value => l_values_arr(i)',
'                );',
'              end loop;',
'              -- item names without values',
'              if l_items_arr.count > l_valid_items then',
'                for i in l_valid_items+1 .. l_items_arr.count',
'                loop',
'                  append_page_item(',
'                    p_domdoc => l_domdoc',
'                  , p_page_items => l_ext_child_node',
'                  , p_item_name => l_items_arr(i)',
'                  , p_item_value => ''''',
'                  );',
'                end loop;',
'              end if;    ',
'              -- item values without names',
'              if l_values_arr.count > l_valid_items then',
'                for i in l_valid_items+1 .. l_values_arr.count',
'                loop',
'                  append_page_item(',
'                    p_domdoc => l_domdoc',
'                  , p_page_items => l_ext_child_node',
'                  , p_item_name => ''''',
'                  , p_item_value => l_values_arr(i)',
'                  );',
'                end loop;',
'              end if;    ',
'              -- reset variables',
'              l_items := null;',
'              l_values := null;',
'            end if;',
'            -- script + service tasks',
'          when dbms_xmldom.getnodename(l_domnode) = ''bpmn:scriptTask'' or dbms_xmldom.getnodename(l_domnode) = ''bpmn:serviceTask'' then  ',
'              l_domelement := dbms_xmldom.makeelement(l_domnode);',
'              -- set task type attribute',
'              dbms_xmldom.setattribute(',
'                elem => l_domelement',
'              , name => ''apex:type''',
'              , newValue => ''executePlsql''',
'              , ns => flow_constants_pkg.gc_nsapex',
'              );',
'              -- create extension element node ',
'              l_extension_node := dbms_xmldom.makenode( ',
'                elem => dbms_xmldom.createelement( ',
'                          doc => l_domdoc',
'                        , tagName => ''bpmn:extensionElements''',
'                        , ns => flow_constants_pkg.gc_nsbpmn',
'                        )',
'              );',
'              -- append',
'              l_extension_node := dbms_xmldom.appendchild(',
'                n => l_domnode',
'              , newchild => l_extension_node',
'              );',
'              -- create execute Plsql node ',
'              l_task_type_node := dbms_xmldom.makenode( ',
'                elem => dbms_xmldom.createelement( ',
'                          doc => l_domdoc',
'                        , tagName => ''apex:executePlsql''',
'                        , ns => flow_constants_pkg.gc_nsapex',
'                        )',
'              );',
'              -- append',
'              l_task_type_node := dbms_xmldom.appendchild(',
'                n => l_extension_node',
'              , newchild => l_task_type_node',
'              );  ',
'              -- get child nodes',
'              l_children := dbms_xmldom.getchildnodes(l_domnode);',
'              l_children_count := dbms_xmldom.getlength(l_children);',
'              -- loop over child nodes',
'              for j in 0 .. l_children_count - 1',
'              loop',
'                l_child_node := dbms_xmldom.item(l_children, j);',
'                case dbms_xmldom.getnodename(l_child_node)',
'                  when ''apex:engine'' then',
'                    l_ext_child_tag_name := ''apex:engine'';',
'                  when ''apex:autoBinds'' then',
'                    l_ext_child_tag_name := ''apex:autoBinds'';',
'                  when ''apex:plsqlCode'' then',
'                    l_ext_child_tag_name := ''apex:plsqlCode'';',
'                  else',
'                    l_ext_child_tag_name := '''';',
'                end case;',
'                if length(l_ext_child_tag_name) > 0 then',
'                  -- create new child node ',
'                  l_ext_child_node := dbms_xmldom.makenode( ',
'                    elem => dbms_xmldom.createelement( ',
'                              doc => l_domdoc',
'                            , tagName => l_ext_child_tag_name',
'                            , ns => flow_constants_pkg.gc_nsapex',
'                            )',
'                  );',
'                  -- get text node',
'                  l_child_text_node := dbms_xmldom.getfirstchild(l_child_node);',
'                  if not dbms_xmldom.isnull(l_child_text_node) then',
'                      -- add text node',
'                      l_child_text_node := dbms_xmldom.appendchild(',
'                        n => l_ext_child_node',
'                      , newchild => l_child_text_node',
'                      );',
'                      -- append',
'                      l_ext_child_node := dbms_xmldom.appendchild(',
'                        n => l_task_type_node',
'                      , newchild => l_ext_child_node',
'                      );',
'                  end if;      ',
'                  -- remove old child',
'                  l_child_node := dbms_xmldom.removechild(',
'                    n => l_domnode',
'                  , oldchild => l_child_node',
'                  );  ',
'                end if;',
'              end loop;',
'          else null;',
'        end case;    ',
'      end loop;',
'  ',
'      -- set new exporter',
'      set_exporter(',
'        p_domdoc => l_domdoc',
'      , p_exporter => ''Flows for APEX''',
'      , p_exporter_version => flow_constants_pkg.gc_version',
'      );',
'',
'      -- update apex namespace',
'      update_apex_namespace(l_domdoc);',
'  ',
'      dbms_lob.createtemporary(l_return, false); ',
'      dbms_xmldom.writetoclob(',
'        doc => l_domdoc ',
'      , cl => l_return',
'      );',
'      p_dgrm_content := l_return;',
'      p_has_changed := true;',
'    else',
'      p_has_changed := false;',
'    end if;',
'  end migrate_xml;',
'',
'end flow_migrate_xml_pkg;',
'/',
'',
'create or replace package body flow_bpmn_parser_pkg',
'as',
'',
'  -- Standard Data Types to use',
'  subtype t_vc200 is varchar2(200 char);',
'',
'  -- Types for temporary storage of parsing result',
'  type t_objt_rec is',
'    record',
'    (',
'      objt_name           t_vc200',
'    , objt_tag_name       flow_types_pkg.t_bpmn_id',
'    , objt_parent_bpmn_id flow_types_pkg.t_bpmn_id',
'    , objt_sub_tag_name   flow_types_pkg.t_bpmn_id',
'    , objt_attached_to    flow_types_pkg.t_bpmn_id',
'    , objt_interrupting   number',
'    );',
'  type t_objt_tab is table of t_objt_rec index by flow_types_pkg.t_bpmn_id;',
'',
'  type t_obat_rec is',
'    record',
'    (',
'      obat_key            flow_object_attributes.obat_key%type',
'    , obat_num_value      flow_object_attributes.obat_num_value%type',
'    , obat_date_value     flow_object_attributes.obat_date_value%type',
'    , obat_vc_value       flow_object_attributes.obat_vc_value%type',
'    , obat_clob_value     flow_object_attributes.obat_clob_value%type',
'    );',
'  type t_obat_tab is table of t_obat_rec index by pls_integer;',
'',
'  type t_objt_obat_rec is',
'    record',
'    (',
'      obat_sub_tag_name   flow_objects.objt_sub_tag_name%type',
'    , obat_tab            t_obat_tab',
'    );',
'  type t_objt_obat_tab is table of t_objt_obat_rec index by flow_types_pkg.t_bpmn_id;',
'',
'  type t_expr_rec is',
'    record',
'    (',
'      expr_set        flow_object_expressions.expr_set%type',
'    , expr_order      flow_object_expressions.expr_order%type',
'    , expr_var_name   flow_object_expressions.expr_var_name%type',
'    , expr_var_type   flow_object_expressions.expr_var_type%type',
'    , expr_type       flow_object_expressions.expr_type%type',
'    , expr_expression flow_object_expressions.expr_expression%type',
'    );',
'  type t_expr_tab is table of t_expr_rec index by pls_integer;',
'  type t_objt_expr_tab is table of t_expr_tab index by flow_types_pkg.t_bpmn_id;',
'',
'  type t_conn_rec is',
'    record',
'    (',
'      conn_name        t_vc200',
'    , conn_src_bpmn_id flow_types_pkg.t_bpmn_id',
'    , conn_tgt_bpmn_id flow_types_pkg.t_bpmn_id',
'    , conn_tag_name    flow_types_pkg.t_bpmn_id',
'    , conn_origin      flow_types_pkg.t_bpmn_id',
'    );',
'  type t_conn_tab is table of t_conn_rec index by flow_types_pkg.t_bpmn_id;',
'',
'  type t_bpmn_ref_tab is table of flow_types_pkg.t_bpmn_id index by flow_types_pkg.t_bpmn_id;',
'  type t_bpmn_id_tab is table of number index by flow_types_pkg.t_bpmn_id;',
'',
'  type t_id_lookup_tab is table of number index by flow_types_pkg.t_bpmn_id;',
'',
'  -- Variables to hold data during parse run',
'  g_dgrm_id        flow_diagrams.dgrm_id%type;',
'  g_objects        t_objt_tab;',
'  g_obj_attribs    t_objt_obat_tab;',
'  g_objt_expr      t_objt_expr_tab;',
'  g_connections    t_conn_tab;',
'  g_lane_refs      t_bpmn_ref_tab;',
'  g_default_cons   t_bpmn_id_tab;',
'  g_objt_lookup    t_id_lookup_tab;',
'',
'',
'  procedure register_object',
'  (',
'    pi_objt_bpmn_id        in flow_objects.objt_bpmn_id%type',
'  , pi_objt_name           in flow_objects.objt_name%type default null',
'  , pi_objt_tag_name       in flow_objects.objt_tag_name%type default null',
'  , pi_objt_sub_tag_name   in flow_objects.objt_sub_tag_name%type default null',
'  , pi_objt_parent_bpmn_id in flow_objects.objt_bpmn_id%type default null',
'  , pi_objt_attached_to    in flow_objects.objt_attached_to%type default null ',
'  , pi_objt_interrupting   in flow_objects.objt_interrupting%type default null',
'  )',
'  as',
'    l_objt_rec t_objt_rec;',
'  begin',
'    if pi_objt_bpmn_id is not null then',
'      l_objt_rec.objt_name           := pi_objt_name;',
'      l_objt_rec.objt_tag_name       := pi_objt_tag_name;',
'      l_objt_rec.objt_sub_tag_name   := pi_objt_sub_tag_name;',
'      l_objt_rec.objt_parent_bpmn_id := pi_objt_parent_bpmn_id;',
'      l_objt_rec.objt_attached_to    := pi_objt_attached_to;',
'      l_objt_rec.objt_interrupting   := pi_objt_interrupting;',
'',
'      g_objects( pi_objt_bpmn_id ) := l_objt_rec;',
'    end if;',
'  end register_object;',
'',
'  procedure register_object_attributes',
'  (',
'    pi_objt_bpmn_id       in flow_objects.objt_bpmn_id%type',
'  , pi_objt_sub_tag_name  in flow_objects.objt_sub_tag_name%type default null',
'  , pi_obat_key           in flow_object_attributes.obat_key%type',
'  , pi_obat_num_value     in flow_object_attributes.obat_num_value%type default null',
'  , pi_obat_date_value    in flow_object_attributes.obat_date_value%type default null',
'  , pi_obat_vc_value      in flow_object_attributes.obat_vc_value%type default null',
'  , pi_obat_clob_value    in flow_object_attributes.obat_clob_value%type default null',
'  )',
'  as',
'    l_objt_sub_tag_name     flow_objects.objt_sub_tag_name%type;',
'',
'    l_obat_rec              t_obat_rec;',
'    l_obat_idx              pls_integer;',
'	l_objt_obat_idx_exists  boolean := false;',
'  begin',
'    if pi_objt_bpmn_id is not null then',
'',
'	  -- check, if the index already exists',
'	  begin',
'	     l_objt_sub_tag_name := g_obj_attribs(pi_objt_bpmn_id).obat_sub_tag_name;',
'		 l_objt_obat_idx_exists := true;',
'	  exception',
'	    when no_data_found then',
'		 l_objt_obat_idx_exists := false;',
'	  end;',
'',
'	  -- fill attributes record',
'	  l_obat_rec.obat_key        := pi_obat_key;',
'	  l_obat_rec.obat_num_value  := pi_obat_num_value;',
'	  l_obat_rec.obat_date_value := pi_obat_date_value;',
'	  l_obat_rec.obat_vc_value   := pi_obat_vc_value;',
'	  l_obat_rec.obat_clob_value := pi_obat_clob_value;',
'   ',
'      if not l_objt_obat_idx_exists then',
'        g_obj_attribs(pi_objt_bpmn_id).obat_sub_tag_name := pi_objt_sub_tag_name;',
'		g_obj_attribs(pi_objt_bpmn_id).obat_tab(1) := l_obat_rec;',
'	  else',
'        l_obat_idx := coalesce(g_obj_attribs(pi_objt_bpmn_id).obat_tab.last,0);',
'        g_obj_attribs(pi_objt_bpmn_id).obat_tab(l_obat_idx + 1) := l_obat_rec;',
'	  end if;',
'',
'    end if;',
'  end register_object_attributes;',
'',
'  procedure register_object_expression',
'  (',
'    pi_objt_bpmn_id    in flow_objects.objt_bpmn_id%type',
'  , pi_expr_set        in flow_object_expressions.expr_set%type',
'  , pi_expr_order      in flow_object_expressions.expr_order%type',
'  , pi_expr_var_name   in flow_object_expressions.expr_var_name%type',
'  , pi_expr_var_type   in flow_object_expressions.expr_var_type%type',
'  , pi_expr_type       in flow_object_expressions.expr_type%type',
'  , pi_expr_expression in flow_object_expressions.expr_expression%type',
'  )',
'  as',
'    l_object_expression t_expr_rec;',
'    l_insert_index      pls_integer := 0;',
'  begin',
'    if pi_objt_bpmn_id is not null then',
'      l_object_expression.expr_set        := pi_expr_set;',
'      l_object_expression.expr_order      := pi_expr_order;',
'      l_object_expression.expr_var_name   := pi_expr_var_name;',
'      l_object_expression.expr_var_type   := pi_expr_var_type;',
'      l_object_expression.expr_type       := pi_expr_type;',
'      l_object_expression.expr_expression := pi_expr_expression;    ',
'',
'      -- Verify if we already have some variable expression for same object',
'      if g_objt_expr.exists(pi_objt_bpmn_id) then',
'        l_insert_index := g_objt_expr(pi_objt_bpmn_id).count + 1;',
'      else',
'        l_insert_index := 1;',
'      end if;',
'',
'      g_objt_expr(pi_objt_bpmn_id)(l_insert_index) := l_object_expression;',
'    end if;',
'  end register_object_expression;',
'',
'  procedure register_connection',
'  (',
'    pi_conn_bpmn_id     in flow_connections.conn_bpmn_id%type',
'  , pi_conn_name        in flow_connections.conn_name%type',
'  , pi_conn_src_bpmn_id in flow_objects.objt_bpmn_id%type',
'  , pi_conn_tgt_bpmn_id in flow_objects.objt_bpmn_id%type',
'  , pi_conn_tag_name    in flow_connections.conn_tag_name%type',
'  , pi_conn_origin      in flow_connections.conn_origin%type',
'  )',
'  as',
'    l_conn_rec t_conn_rec;',
'  begin',
'    if pi_conn_bpmn_id is not null then',
'      l_conn_rec.conn_name        := pi_conn_name;',
'      l_conn_rec.conn_src_bpmn_id := pi_conn_src_bpmn_id;',
'      l_conn_rec.conn_tgt_bpmn_id := pi_conn_tgt_bpmn_id;',
'      l_conn_rec.conn_tag_name    := pi_conn_tag_name;',
'      l_conn_rec.conn_origin      := pi_conn_origin;',
'',
'      g_connections( pi_conn_bpmn_id ) := l_conn_rec;',
'    end if;',
'  end register_connection;',
'',
'  procedure insert_object',
'  (',
'    pi_objt_bpmn_id       in flow_objects.objt_bpmn_id%type',
'  , pi_objt_name          in flow_objects.objt_name%type default null',
'  , pi_objt_tag_name      in flow_objects.objt_tag_name%type default null',
'  , pi_objt_objt_id       in flow_objects.objt_objt_id%type default null',
'  , pi_objt_sub_tag_name  in flow_objects.objt_sub_tag_name%type default null',
'  , pi_objt_objt_lane_id  in flow_objects.objt_objt_lane_id%type default null',
'  , pi_objt_attached_to   in flow_objects.objt_attached_to%type default null',
'  , pi_objt_interrupting  in flow_objects.objt_interrupting%type default null',
'  , po_objt_id           out nocopy flow_objects.objt_id%type',
'  )',
'  as',
'  begin',
'    insert',
'      into flow_objects',
'           (',
'             objt_dgrm_id',
'           , objt_bpmn_id',
'           , objt_name',
'           , objt_tag_name',
'           , objt_sub_tag_name',
'           , objt_objt_id',
'           , objt_objt_lane_id',
'           , objt_attached_to',
'           , objt_interrupting',
'           )',
'    values (',
'             g_dgrm_id',
'           , pi_objt_bpmn_id',
'           , pi_objt_name',
'           , pi_objt_tag_name',
'           , pi_objt_sub_tag_name',
'           , pi_objt_objt_id',
'           , pi_objt_objt_lane_id',
'           , pi_objt_attached_to',
'           , pi_objt_in'))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'terrupting',
'           )',
'      returning objt_id into po_objt_id',
'    ;',
'  end insert_object;',
'',
'  procedure insert_object_attributes',
'  (',
'    pi_objt_id          in flow_object_attributes.obat_objt_id%type',
'  , pi_obat_key         in flow_object_attributes.obat_key%type',
'  , pi_obat_num_value   in flow_object_attributes.obat_num_value%type default null',
'  , pi_obat_date_value  in flow_object_attributes.obat_date_value%type default null',
'  , pi_obat_vc_value    in flow_object_attributes.obat_vc_value%type default null',
'  , pi_obat_clob_value  in flow_object_attributes.obat_clob_value%type default null',
'  )',
'  as',
'  begin',
'    insert',
'      into flow_object_attributes',
'           (',
'             obat_objt_id',
'           , obat_key',
'           , obat_num_value',
'           , obat_date_value',
'           , obat_vc_value',
'           , obat_clob_value',
'           )',
'    values (',
'             pi_objt_id',
'           , pi_obat_key',
'           , pi_obat_num_value',
'           , pi_obat_date_value',
'           , pi_obat_vc_value',
'           , pi_obat_clob_value',
'           )',
'    ;',
'  end insert_object_attributes;',
'',
'  procedure insert_object_expression',
'  (',
'    pi_expr_objt_id    in flow_object_expressions.expr_objt_id%type',
'  , pi_expr_set        in flow_object_expressions.expr_set%type',
'  , pi_expr_order      in flow_object_expressions.expr_order%type',
'  , pi_expr_var_name   in flow_object_expressions.expr_var_name%type',
'  , pi_expr_var_type   in flow_object_expressions.expr_var_type%type',
'  , pi_expr_type       in flow_object_expressions.expr_type%type',
'  , pi_expr_expression in flow_object_expressions.expr_expression%type',
'  )',
'  as',
'  begin',
'    insert',
'      into flow_object_expressions',
'           (',
'             expr_objt_id',
'           , expr_set',
'           , expr_order',
'           , expr_var_name',
'           , expr_var_type',
'           , expr_type',
'           , expr_expression',
'           )',
'    values (',
'             pi_expr_objt_id',
'           , pi_expr_set',
'           , pi_expr_order',
'           , pi_expr_var_name',
'           , upper(pi_expr_var_type)',
'           , pi_expr_type',
'           , pi_expr_expression',
'           )',
'    ;',
'  end insert_object_expression;',
'',
'  procedure insert_connection',
'  (',
'    pi_conn_bpmn_id      in flow_connections.conn_bpmn_id%type',
'  , pi_conn_name         in flow_connections.conn_name%type',
'  , pi_conn_src_objt_id  in flow_connections.conn_src_objt_id%type',
'  , pi_conn_tgt_objt_id  in flow_connections.conn_tgt_objt_id%type',
'  , pi_conn_tag_name     in flow_connections.conn_tag_name%type',
'  , pi_conn_origin       in flow_connections.conn_origin%type -- ?? needed ??',
'  , po_conn_id          out flow_connections.conn_id%type',
'  )',
'  as',
'    l_conn_is_default flow_connections.conn_is_default%type := 0;',
'  begin',
'    l_conn_is_default := case when g_default_cons.exists(pi_conn_bpmn_id) then 1 else 0 end;',
'    insert',
'      into flow_connections',
'            (',
'              conn_dgrm_id',
'            , conn_bpmn_id',
'            , conn_name',
'            , conn_src_objt_id',
'            , conn_tgt_objt_id',
'            , conn_tag_name',
'            , conn_origin',
'            , conn_is_default',
'            )',
'    values (',
'              g_dgrm_id',
'            , pi_conn_bpmn_id',
'            , pi_conn_name',
'            , pi_conn_src_objt_id',
'            , pi_conn_tgt_objt_id',
'            , pi_conn_tag_name',
'            , pi_conn_origin',
'            , l_conn_is_default ',
'            )',
'      returning conn_id into po_conn_id',
'    ;',
'  end insert_connection;',
'',
'  procedure process_object_attributes',
'  (',
'    pi_objt_id       in flow_object_attributes.obat_objt_id%type',
'  , pi_objt_bpmn_id  in flow_types_pkg.t_bpmn_id',
'  )',
'  as',
'    l_obat_tab      t_obat_tab;',
'    l_obat_rec      t_obat_rec;',
'    l_obat_exists   boolean;',
'    l_cur_obat_idx  pls_integer;',
'    l_next_obat_idx pls_integer;',
'  begin',
'',
'    -- check, if there are attributes for the object',
'    begin',
'      l_obat_tab := g_obj_attribs(pi_objt_bpmn_id).obat_tab;',
'      l_obat_exists := true;',
'    exception',
'      when no_data_found then',
'        l_obat_exists := false;',
'    end;',
'',
'    if l_obat_exists then',
'      l_cur_obat_idx := l_obat_tab.first;',
'      while l_cur_obat_idx is not null',
'      loop',
'        l_obat_rec := l_obat_tab( l_cur_obat_idx );',
'',
'        insert_object_attributes',
'        (',
'          pi_objt_id         => pi_objt_id',
'        , pi_obat_key        => l_obat_rec.obat_key',
'        , pi_obat_num_value  => l_obat_rec.obat_num_value',
'        , pi_obat_date_value => l_obat_rec.obat_date_value',
'        , pi_obat_vc_value   => l_obat_rec.obat_vc_value',
'        , pi_obat_clob_value => l_obat_rec.obat_clob_value',
'        );',
'',
'        l_next_obat_idx := l_obat_tab.next( l_cur_obat_idx );',
'        l_cur_obat_idx := l_next_obat_idx;',
'      end loop;',
'    end if;',
'',
'  end process_object_attributes;',
'',
'  procedure process_object_expressions',
'  (',
'    pi_objt_id       in flow_object_expressions.expr_objt_id%type',
'  , pi_objt_bpmn_id  in flow_types_pkg.t_bpmn_id    ',
'  )',
'  as',
'    l_cur_expressions t_expr_tab;',
'    l_cur_index       pls_integer;',
'  begin',
'    if g_objt_expr.exists(pi_objt_bpmn_id) then',
'      l_cur_index       := g_objt_expr(pi_objt_bpmn_id).first;',
'      while l_cur_index is not null loop',
'        insert_object_expression',
'        (',
'          pi_expr_objt_id    => pi_objt_id',
'        , pi_expr_set        => g_objt_expr(pi_objt_bpmn_id)(l_cur_index).expr_set',
'        , pi_expr_order      => g_objt_expr(pi_objt_bpmn_id)(l_cur_index).expr_order',
'        , pi_expr_var_name   => g_objt_expr(pi_objt_bpmn_id)(l_cur_index).expr_var_name',
'        , pi_expr_var_type   => g_objt_expr(pi_objt_bpmn_id)(l_cur_index).expr_var_type',
'        , pi_expr_type       => g_objt_expr(pi_objt_bpmn_id)(l_cur_index).expr_type',
'        , pi_expr_expression => g_objt_expr(pi_objt_bpmn_id)(l_cur_index).expr_expression',
'        );',
'        l_cur_index := g_objt_expr(pi_objt_bpmn_id).next(l_cur_index);',
'      end loop;',
'    end if;',
'  end process_object_expressions;',
'',
'  procedure process_objects',
'  as',
'    l_cur_objt_bpmn_id  flow_types_pkg.t_bpmn_id;',
'    l_next_objt_bpmn_id flow_types_pkg.t_bpmn_id;',
'    l_cur_object        t_objt_rec;',
'    l_objt_id           flow_objects.objt_id%type;',
'    l_parent_check      boolean;',
'    l_lane_check        boolean;',
'  begin',
'',
'    l_cur_objt_bpmn_id := g_objects.first;',
'    while l_cur_objt_bpmn_id is not null',
'    loop',
'      -- reset object id, we get it if insert done',
'      l_objt_id      := null;',
'      l_cur_object   := g_objects( l_cur_objt_bpmn_id );',
'',
'      -- check possible parent and lane',
'      -- either not set or ID already known',
'      l_parent_check :=',
'           l_cur_object.objt_parent_bpmn_id is null',
'        or (   l_cur_object.objt_parent_bpmn_id is not null',
'           and g_objt_lookup.exists( l_cur_object.objt_parent_bpmn_id )',
'           )',
'      ;',
'      l_lane_check :=',
'           not g_lane_refs.exists( l_cur_objt_bpmn_id )',
'        or ( g_lane_refs.exists( l_cur_objt_bpmn_id )',
'           and g_objt_lookup.exists( g_lane_refs( l_cur_objt_bpmn_id ) )',
'           )',
'      ;',
'',
'      -- checks passed insert into table',
'      if l_parent_check and l_lane_check then',
'',
'        insert_object',
'        (',
'          pi_objt_bpmn_id      => l_cur_objt_bpmn_id',
'        , pi_objt_name         => l_cur_object.objt_name',
'        , pi_objt_tag_name     => l_cur_object.objt_tag_name',
'        , pi_objt_objt_id      => case when l_cur_object.objt_parent_bpmn_id is not null then g_objt_lookup( l_cur_object.objt_parent_bpmn_id ) else null end',
'        , pi_objt_objt_lane_id => case when g_lane_refs.exists( l_cur_objt_bpmn_id ) then g_objt_lookup( g_lane_refs( l_cur_objt_bpmn_id ) ) else null end',
'        , pi_objt_sub_tag_name => l_cur_object.objt_sub_tag_name',
'        , pi_objt_attached_to  => l_cur_object.objt_attached_to',
'        , pi_objt_interrupting => l_cur_object.objt_interrupting',
'        , po_objt_id           => l_objt_id',
'        );',
'',
'        process_object_attributes',
'        (',
'          pi_objt_id           => l_objt_id',
'        , pi_objt_bpmn_id      => l_cur_objt_bpmn_id',
'        );',
'',
'        process_object_expressions',
'        (',
'          pi_objt_id      => l_objt_id',
'        , pi_objt_bpmn_id => l_cur_objt_bpmn_id',
'        );',
'',
'      -- checks not passed skip record for now',
'      else',
'        null;',
'      end if;',
'',
'      -- Get next ID for lookup and if object was processed',
'      -- put it into lookup and remove from things to process',
'      l_next_objt_bpmn_id := g_objects.next( l_cur_objt_bpmn_id );',
'      if l_objt_id is not null then',
'',
'        g_objt_lookup( l_cur_objt_bpmn_id ) := l_objt_id;',
'        g_objects.delete( l_cur_objt_bpmn_id );',
'',
'      end if;',
'',
'      l_cur_objt_bpmn_id := l_next_objt_bpmn_id;',
'    end loop;',
'',
'    -- restart with remaining set if still objects to process',
'    if g_objects.count > 0 then',
'      process_objects;',
'    end if;',
'  end process_objects;',
'',
'  procedure process_connections',
'  as',
'    l_cur_conn_bpmn_id flow_types_pkg.t_bpmn_id;',
'    l_cur_conn         t_conn_rec;',
'    l_conn_id          flow_connections.conn_id%type;',
'  begin',
'',
'    l_cur_conn_bpmn_id := g_connections.first;',
'    while l_cur_conn_bpmn_id is not null',
'    loop',
'      l_conn_id  := null;',
'      l_cur_conn := g_connections( l_cur_conn_bpmn_id );',
'',
'      -- verify if we know the IDs for source and target connection if set',
'      -- anything strange stop all processing and raise error',
'      if (  ( l_cur_conn.conn_src_bpmn_id is not null and not g_objt_lookup.exists( l_cur_conn.conn_src_bpmn_id ) )',
'         or ( l_cur_conn.conn_tgt_bpmn_id is not null and not g_objt_lookup.exists( l_cur_conn.conn_tgt_bpmn_id ) )',
'         )',
'      then',
'        raise_application_error(-20000, ''Connection Source or Target not found!'');',
'      else',
'        insert_connection',
'        (',
'          pi_conn_bpmn_id      => l_cur_conn_bpmn_id',
'        , pi_conn_name         => l_cur_conn.conn_name',
'        , pi_conn_src_objt_id  => case when l_cur_conn.conn_src_bpmn_id is not null then g_objt_lookup( l_cur_conn.conn_src_bpmn_id ) else null end',
'        , pi_conn_tgt_objt_id  => case when l_cur_conn.conn_tgt_bpmn_id is not null then g_objt_lookup( l_cur_conn.conn_tgt_bpmn_id ) else null end',
'        , pi_conn_tag_name     => l_cur_conn.conn_tag_name',
'        , pi_conn_origin       => l_cur_conn.conn_origin',
'        , po_conn_id           => l_conn_id',
'        );',
'      end if;',
'',
'      l_cur_conn_bpmn_id := g_connections.next( l_cur_conn_bpmn_id );',
'    end loop;',
'',
'  end process_connections;',
'',
'  procedure finalize',
'  as',
'  begin',
'',
'    process_objects;',
'    process_connections;',
'',
'  end finalize;',
'',
'  function upload_diagram',
'  (',
'    pi_dgrm_name     in flow_diagrams.dgrm_name%type',
'  , pi_dgrm_version  in flow_diagrams.dgrm_version%type',
'  , pi_dgrm_category in flow_diagrams.dgrm_category%type',
'  , pi_dgrm_content  in flow_diagrams.dgrm_content%type',
'  , pi_dgrm_status   in flow_diagrams.dgrm_status%type default flow_constants_pkg.gc_dgrm_status_draft',
'  , pi_force_overwrite in boolean default false',
'  )',
'    return flow_diagrams.dgrm_id%type',
'  as',
'    l_cnt     number;',
'    l_dgrm_id flow_diagrams.dgrm_id%type;',
'  begin',
'',
'    begin',
'      select dgrm_id',
'        into l_dgrm_id',
'        from flow_diagrams',
'       where dgrm_name = pi_dgrm_name',
'         and dgrm_version = pi_dgrm_version',
'      ;',
'    exception',
'      when no_data_found then',
'        l_dgrm_id := null;',
'    end;',
'',
'    if l_dgrm_id is null then',
'      insert',
'        into flow_diagrams ( dgrm_name, dgrm_version, dgrm_category, dgrm_status, dgrm_last_update, dgrm_content )',
'        values ( pi_dgrm_name, pi_dgrm_version, pi_dgrm_category, ',
'                 pi_dgrm_status,  systimestamp, pi_dgrm_content )',
'      returning dgrm_id into l_dgrm_id',
'      ;',
'    else',
'      if (pi_force_overwrite) then',
'        update flow_diagrams',
'          set dgrm_content = pi_dgrm_content',
'            , dgrm_last_update = systimestamp',
'            , dgrm_status  = pi_dgrm_status',
'        where dgrm_id = l_dgrm_id',
'        ;',
'      end if;',
'    end if;',
'',
'    return l_dgrm_id;',
'',
'  end upload_diagram;',
'',
'  procedure upload_diagram',
'  (',
'    pi_dgrm_name     in flow_diagrams.dgrm_name%type',
'  , pi_dgrm_version  in flow_diagrams.dgrm_version%type',
'  , pi_dgrm_category in flow_diagrams.dgrm_category%type',
'  , pi_dgrm_content  in flow_diagrams.dgrm_content%type',
'  , pi_dgrm_status   in flow_diagrams.dgrm_status%type default flow_constants_pkg.gc_dgrm_status_draft',
'  , pi_force_overwrite in boolean default false',
'  )',
'  as',
'  begin',
'    g_dgrm_id := upload_diagram( pi_dgrm_name => pi_dgrm_name, pi_dgrm_version => pi_dgrm_version,',
'                                 pi_dgrm_category => pi_dgrm_category, pi_dgrm_content => pi_dgrm_content,',
'                                 pi_dgrm_status => pi_dgrm_status, pi_force_overwrite => pi_force_overwrite',
'                                  );',
'  end upload_diagram;',
'',
'  procedure cleanup_parsing_tables',
'  as',
'  begin',
'    delete',
'      from flow_connections conn',
'     where conn.conn_dgrm_id = g_dgrm_id',
'    ;',
'',
'    delete',
'      from flow_objects objt',
'     where objt.objt_dgrm_id = g_dgrm_id',
'    ;',
'  end cleanup_parsing_tables;',
'',
'  procedure parse_lanes',
'  (',
'    pi_laneset_xml  in xmltype',
'  , pi_objt_bpmn_id in flow_types_pkg.t_bpmn_id',
'  )',
'  as',
'  begin',
'    for lane_rec in (',
'      select lanes.lane_id',
'           , lanes.lane_name',
'           , lanes.lane_type',
'           , lanes.child_elements',
'        from xmltable',
'             (',
'               xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn")',
'             , ''*'' passing pi_laneset_xml',
'               columns',
'                 lane_id   varchar2(50  char) path ''@id''',
'               , lane_name varchar2(200 char) path ''@name''',
'               , lane_type varchar2(50  char) path ''name()''',
'               , child_elements xmltype path ''*''',
'             ) lanes',
'    ) loop',
'',
'      register_object',
'      (',
'        pi_objt_bpmn_id        => lane_rec.lane_id',
'      , pi_objt_name           => lane_rec.lane_name',
'      , pi_objt_tag_name       => lane_rec.lane_type',
'      , pi_objt_parent_bpmn_id => pi_objt_bpmn_id',
'      );',
'',
'      for node_rec in (',
'        select nodes.node_ref',
'          from xmltable',
'             (',
'               xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn")',
'             , ''*'' passing lane_rec.child_elements',
'               columns',
'                 node_ref   varchar2(50 char) path ''text()''',
'             ) nodes',
'      ) loop',
'        g_lane_refs( node_rec.node_ref ) := lane_rec.lane_id;',
'      end loop;',
'',
'    end loop;',
'',
'  end parse_lanes;',
'',
'  function find_subtag_name',
'  (',
'    pi_xml in xmltype',
'  )',
'    return flow_types_pkg.t_bpmn_id',
'  as',
'    c_nsmap        constant t_vc200 := flow_constants_pkg.gc_nsmap;',
'    l_return                flow_types_pkg.t_bpmn_id;',
'  begin',
'    l_return :=',
'      case',
'        when pi_xml.existsNode( xpath => ''/'' || flow_constants_pkg.gc_bpmn_terminate_event_definition, nsmap => c_nsmap ) = 1   then flow_constants_pkg.gc_bpmn_terminate_event_definition',
'        when pi_xml.existsNode( xpath => ''/'' || flow_constants_pkg.gc_bpmn_timer_event_definition, nsmap => c_nsmap ) = 1       then flow_constants_pkg.gc_bpmn_timer_event_definition',
'        when pi_xml.existsNode( xpath => ''/'' || flow_constants_pkg.gc_timer_type_date, nsmap => c_nsmap ) = 1                   then flow_constants_pkg.gc_timer_type_date',
'        when pi_xml.existsNode( xpath => ''/'' || flow_constants_pkg.gc_timer_type_duration, nsmap => c_nsmap ) = 1               then flow_constants_pkg.gc_timer_type_duration',
'        when pi_xml.existsNode( xpath => ''/'' || flow_constants_pkg.gc_timer_type_cycle, nsmap => c_nsmap ) = 1                  then flow_constants_pkg.gc_timer_type_cycle',
'        when pi_xml.existsNode( xpath => ''/'' || flow_constants_pkg.gc_bpmn_error_event_definition, nsmap => c_nsmap ) = 1       then flow_constants_pkg.gc_bpmn_error_event_definition',
'        when pi_xml.existsNode( xpath => ''/'' || flow_constants_pkg.gc_bpmn_escalation_event_definition, nsmap => c_nsmap ) = 1  then flow_constants_pkg.gc_bpmn_escalation_event_definition',
'        when pi_xml.existsNode( xpath => ''/'' || flow_constants_pkg.gc_bpmn_link_event_definition, nsmap => c_nsmap ) = 1        then flow_constants_pkg.gc_bpmn_link_event_definition',
'        when pi_xml.existsNode( xpath => ''/'' || flow_constants_pkg.gc_bpmn_message_event_definition, nsmap => c_nsmap ) = 1     then flow_constants_pkg.gc_bpmn_message_event_definition',
'        when pi_xml.existsNode( xpath => ''/'' || flow_constants_pkg.gc_bpmn_conditional_event_definition, nsmap => c_nsmap ) = 1 then flow_constants_pkg.gc_bpmn_conditional_event_definition',
'        when pi_xml.existsNode( xpath => ''/'' || flow_constants_pkg.gc_bpmn_signal_event_definition, nsmap => c_nsmap ) = 1      then flow_constants_pkg.gc_bpmn_signal_event_definition',
'        else null',
'      end',
'    ;',
'',
'    return l_return;',
'  end find_subtag_name;',
'',
'  procedure parse_process_variables',
'  (',
'    pi_bpmn_id         in flow_types_pkg.t_bpmn_id',
'  , pi_execution_point in varchar2',
'  , pi_proc_vars_xml   in xmltype',
'  )',
'  as',
'  begin',
'    for rec in (',
'                select variable_sequence',
'                     , variable_name',
'                     , variable_type',
'                     , expression_type',
'                     , expression_value',
'                  from xmltable',
'                       (',
'                         xmlnamespaces ( ''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn", ''https://flowsforapex.org'' as "apex" )',
'                       , ''*'' passing pi_proc_vars_xml',
'                         columns',
'                           variable_sequence number              path ''apex:varSequence''',
'                         , variable_name     varchar2(50 char)   path ''apex:varName''',
'                         , variable_type     varchar2(50 char)   path ''apex:varDataType''',
'                         , expression_type   varchar2(200 char)  path ''apex:varExpressionType''',
'                         , expression_value  varchar2(4000 char) path ''apex:varExpression''',
'                       )',
'               )',
'    loop',
'      register_object_expression',
'      (',
'        pi_objt_bpmn_id    => pi_bpmn_id',
'      , pi_expr_set        => pi_execution_point',
'      , pi_expr_order      => rec.variable_sequence',
'      , pi_expr_var_name   => rec.variable_name',
'      , pi_expr_var_type   => rec.variable_type',
'      , pi_expr_type       => rec.expression_type',
'      , pi_expr_expression => rec.expression_value',
'      );',
'    end loop;',
'  end parse_process_variables;',
'',
'  procedure parse_page_items',
'  (',
'    pi_bpmn_id         in flow_types_pkg.t_bpmn_id',
'  , pi_page_items_xml   in xmltype',
'  )',
'  as',
'    l_itemNames  varchar2(4000);',
'    l_itemValues varchar2(4000);',
'  begin',
'    for rec in (',
'                select items.itemName',
'                     , items.itemValue',
'                  from xmltable',
'                       (',
'                         xmlnamespaces ( ''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn", ''https://flowsforapex.org'' as "apex" )',
'                       , ''*'' passing pi_page_items_xml',
'                         columns',
'                           itemName  varchar2(50 char) path ''apex:itemName''',
'                         , itemValue varchar2(50 char) path ''apex:itemValue''',
'                       ) items',
'               )',
'    loop',
'      l_itemNames  := l_itemNames || rec.itemName || '','';',
'      l_itemValues := l_itemValues || rec.itemValue || '','';',
'    end loop;',
'    if length(rtrim(l_itemNames, '','')) > 0 then',
'        register_object_attributes',
'        (',
'        pi_objt_bpmn_id      => pi_bpmn_id',
'        , pi_obat_key          => flow_constants_pkg.gc_apex_usertask_item',
'        , pi_obat_vc_value     => rtrim(l_itemNames, '','')',
'        );',
'    end if;',
'    if length(rtrim(l_itemValues, '','')) > 0 then',
'        register_object_attributes',
'        (',
'        pi_objt_bpmn_id      => pi_bpmn_id',
'        , pi_obat_key          =>flow_constants_pkg.gc_apex_usertask_value',
'        , pi_obat_vc_value     => rtrim(l_itemValues, '','')',
'        );',
'    end if;',
'  end parse_page_items;',
'',
'  procedure parse_task_subtypes',
'  (',
'    pi_bpmn_id     in flow_types_pkg.t_bpmn_id',
'  , pi_subtype_xml in xmltype',
'  )',
'  as',
'  begin',
'',
'    for rec in (',
'                select props.prop_name',
'                     , props.prop_value',
'                     , props.prop_children',
'                  from xmltable',
'                       (',
'                         xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn"',
'                                      , ''https://flowsforapex.org'' as "apex")',
'                       , ''*'' passing pi_subtype_xml',
'                         columns',
'                           prop_name     varchar2(50 char)    path ''name()''',
'                         , prop_value    varchar2(4000 char)  path ''text()''',
'                         , prop_children xmltype              path ''* except bpmn:incoming except bpmn:outgoing''',
'                       ) props',
'               )',
'    loop',
'      -- User Task: nested page items',
'      if rec.prop_name = flow_constants_pkg.gc_apex_usertask_page_items then',
'        parse_page_items',
'        (',
'          pi_bpmn_id        => pi_bpmn_id',
'        , pi_page_items_xml => rec.prop_children',
'        );',
'      -- long-value properties: store in clob column',
'      elsif rec.prop_name in ( flow_constants_pkg.gc_apex_servicetask_placeholder',
'                             , flow_constants_pkg.gc_apex_servicetask_body_text',
'                             , flow_constants_pkg.gc_apex_servicetask_body_html',
'                             , flow_constants_pkg.gc_apex_task_plsql_code',
'                             )',
'      then',
'        if length(rec.prop_value) > 0 then',
'          register_object_attributes',
'          (',
'            pi_objt_bpmn_id      => pi_bpmn_id',
'          , pi_obat_key          => rec.prop_name',
'          , pi_obat_clob_value   => rec.prop_value',
'          );',
'        end if;',
'      -- store varchar values   ',
'      else',
'        if length(rec.prop_value) > 0 then',
'            register_object_attributes',
'            (',
'              pi_objt_bpmn_id      => pi_bpmn_id',
'            , pi_obat_key          => rec.prop_name',
'            , pi_obat_vc_value     => rec.prop_value',
'            );',
'        end if;',
'      end if;',
'    end loop;',
'  end parse_task_subtypes;',
'',
'  procedure parse_custom_timers',
'  (',
'    pi_bpmn_id     in flow_types_pkg.t_bpmn_id',
'  , pi_subtype_xml in xmltype',
'  )',
'  as',
'  begin',
'',
'    for rec in (',
'                select props.prop_name',
'                     , props.prop_value',
'                     , props.prop_children',
'                  from xmltable',
'                       (',
'                         xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn"',
'                                      , ''https://flowsforapex.org'' as "apex")',
'                       , ''*'' passing pi_subtype_xml',
'                         columns',
'                           prop_name     varchar2(50 char)    path ''name()''',
'                         , prop_value    varchar2(4000 char)  path ''text()''',
'                         , prop_children xmltype              path ''* except bpmn:incoming except bpmn:outgoing''',
'                       ) props',
'               )',
'    loop',
'      if length(rec.prop_value) > 0 then',
'        register_object_attributes',
'        (',
'          pi_objt_bpmn_id      => pi_bpmn_id',
'        , pi_obat_key          => rec.prop_name',
'        , pi_obat_vc_value     => rec.prop_value',
'        );',
'      end if;',
'    end loop;',
'  end parse_custom_timers;',
'',
'  procedure parse_extension_elements',
'  (',
'    pi_bpmn_id       in flow_types_pkg.t_bpmn_id',
'  , pi_extension_xml in xmltype',
'  )',
'  as',
'  begin',
'    for rec in (',
'                select extension_type',
'                     , extension_data',
'                  from xmltable',
'                       (',
'                         xmlnamespaces ( ''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn", ''https://flowsforapex.org'' as "apex" )',
'                       , ''/bpmn:extensionElements/*'' passing pi_extension_xml',
'                         columns',
'                           extension_type varchar2(50 char) path ''name()''',
'                         , extension_data xmltype           path ''*''',
'                       ) ',
'               )',
'    loop',
'      -- Process Variables',
'      if replace(rec.extension_type, ''apex:'') in ( flow_constants_pkg.gc_expr_set_before_task, flow_constants_pkg.gc_expr_set_after_task',
'                                                 , flow_constants_pkg.gc_expr_set_before_split, flow_constants_pkg.gc_expr_set_after_merge',
'                                                 , flow_constants_pkg.gc_expr_set_before_event, flow_constants_pkg.gc_expr_set_on_event',
'                                                 )',
'      then',
'        parse_process_variables',
'        (',
'          pi_bpmn_id         => pi_bpmn_id',
'        , pi_execution_point => replace(rec.extension_type, ''apex:'')',
'        , pi_proc_vars_xml   => rec.extension_data',
'        );',
'      -- Task Subtypes',
'      elsif rec.extension_type in ( flow_constants_pkg.gc_apex_usertask_apex_page',
'                                  , flow_constants_pkg.gc_apex_usertask_external_url',
'                                  , flow_constants_pkg.gc_apex_servicetask_send_mail',
'                                  , flow_constants_pkg.gc_apex_task_execute_plsql',
'                                  )',
'      then',
'      -- register the task type',
'        register_object_attributes',
'        (',
'          pi_objt_bpmn_id      => pi_bpmn_id',
'        , pi_obat_key          => flow_constants_pkg.gc_task_type_key',
'        , pi_obat_vc_value     => rec.extension_type',
'        );',
'        -- parse properties',
'        parse_task_subtypes',
'        (',
'          pi_bpmn_id     => pi_bpmn_id',
'        , pi_subtype_xml => rec.extension_data',
'        );',
'      -- Custom Timers',
'      elsif rec.extension_type in ( flow_constants_pkg.gc_timer_type_oracle_date',
'                                  , flow_constants_pkg.gc_timer_type_oracle_duration',
'                                  , flow_constants_pkg.gc_timer_type_oracle_cycle',
'                                  )',
'      then',
'        -- register the timer type',
'        register_object_attributes',
'        (',
'          pi_objt_bpmn_id      => pi_bpmn_id',
'        , pi_objt_sub_tag_name => flow_constants_pkg.gc_bpmn_timer_event_definition',
'        , pi_obat_key          => flow_constants_pkg.gc_timer_type_key',
'        , pi_obat_vc_value     => rec.extension_type',
'        );',
'        -- parse properties',
'        parse_custom_timers',
'        (',
'          pi_bpmn_id     => pi_bpmn_id',
'        , pi_subtype_xml => rec.extension_data',
'        );',
'      end if;',
'    end loop;',
'  end parse_extension_elements;',
'',
'  procedure parse_child_elements',
'  (',
'    pi_objt_bpmn_id in flow_types_pkg.t_bpmn_id',
'  , pi_xml          in xmltype',
'  )',
'  as',
'    l_child_type         flow_types_pkg.t_bpmn_id;',
'    l_child_id           flow_types_pkg.t_bpmn_id;',
'    l_child_value        flow_object_attributes.obat_vc_value%type;',
'    l_child_details      xmltype;',
'    l_detail_type        flow_types_pkg.t_bpmn_id;',
'    l_detail_id          flow_types_pkg.t_bpmn_id;',
'    l_detail_value       flow_object_attributes.obat_vc_value%type;',
'  begin',
'',
'    for rec in (',
'                select children.child_type',
'                     , children.child_id',
'                     , children.child_value',
'                     , children.child_details',
'                     , children.extension_elements',
'                  from xmltable',
'                       (',
'                         xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn"',
'                                      , ''https://flowsforapex.org'' as "apex")',
'                       , ''*'' passing pi_xml',
'                         columns',
'                           child_type         varchar2(50 char)    path ''name()''',
'                         , child_id           varchar2(50 char)    path ''@id''',
'                         , child_value        varchar2(4000 char)  path ''text()''',
'                         , child_details      xmltype              path ''* except bpmn:incoming except bpmn:outgoing''',
'                         , extension_elements xmltype              path ''bpmn:extensionElements''',
'                       ) children',
'               )',
'    loop',
'',
'      if rec.child_details is null then',
'        -- register the child which does not have details',
'        if rec.child_value is not null then',
'          -- if needed distinguish here between different attributes',
'          register_object_attributes',
'          (',
'            pi_objt_bpmn_id      => pi_objt_bpmn_id',
'          , pi_obat_key          => rec.child_type',
'          , pi_obat_vc_value     => rec.child_value',
'        );',
'        end if;',
'      else',
'        -- register the child which has details',
'        if rec.child_type = flow_constants_pkg.gc_bpmn_timer_event_definition then',
'          -- if custom (Flows) type then all processing is done by using the extension element',
'          if rec.extension_elements is not null then',
'            parse_extension_elements',
'            ( ',
'              pi_bpmn_id       => pi_objt_bpmn_id',
'            , pi_extension_xml => rec.extension_elements',
'            );',
'          -- if standard type just register value inside tag',
'          else',
'            begin',
'              select details.detail_type',
'              , details.detail_id',
'              , details.detail_value',
'                  into l_detail_type',
'                    , l_detail_id',
'                    , l_detail_value',
'          '))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'        from xmltable',
'                      (',
'                        xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn")',
'                      , ''*'' passing rec.child_details',
'                        columns',
'                          detail_type        varchar2(50 char)    path ''name()''',
'                        , detail_id          varchar2(50 char)    path ''@id''',
'                        , detail_value       varchar2(4000 char)  path ''text()''',
'                        --, extension_elements xmltype              path ''bpmn:extensionElements''',
'                      ) details;',
'            end;',
'',
'            -- register the timer type',
'            register_object_attributes',
'            (',
'              pi_objt_bpmn_id      => pi_objt_bpmn_id',
'            , pi_objt_sub_tag_name => rec.child_type',
'            , pi_obat_key          => flow_constants_pkg.gc_timer_type_key',
'            , pi_obat_vc_value     => l_detail_type',
'            );',
'',
'            -- register the timer definition',
'            register_object_attributes',
'            (',
'              pi_objt_bpmn_id      => pi_objt_bpmn_id',
'            , pi_objt_sub_tag_name => rec.child_type',
'            , pi_obat_key          => flow_constants_pkg.gc_timer_def_key',
'            , pi_obat_vc_value     => l_detail_value',
'            );',
'          end if;',
'        -- custom processStatus attribute on terminateEndEvents',
'        elsif rec.child_type = flow_constants_pkg.gc_bpmn_terminate_event_definition then',
'          select details.detail_type',
'               , details.detail_value',
'            into l_detail_type',
'               , l_detail_value',
'            from xmltable',
'                 (',
'                   xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn")',
'                 , ''*'' passing rec.child_details',
'                   columns',
'                     detail_type  varchar2(50 char) path   ''name()''',
'                   , detail_value varchar2(4000 char) path ''text()''',
'                 ) details',
'          ;',
'          if l_detail_type = flow_constants_pkg.gc_apex_process_status then',
'            register_object_attributes',
'            (',
'              pi_objt_bpmn_id      => pi_objt_bpmn_id',
'            , pi_objt_sub_tag_name => rec.child_type',
'            , pi_obat_key          => flow_constants_pkg.gc_terminate_result',
'            , pi_obat_vc_value     => l_detail_value',
'            );',
'          end if;',
'	    end if;',
'',
'      end if;',
'',
'    end loop;',
'',
'  end parse_child_elements;',
'',
'  procedure parse_steps',
'  (',
'    pi_xml          in xmltype',
'  , pi_proc_type    in flow_types_pkg.t_bpmn_id',
'  , pi_proc_bpmn_id in flow_types_pkg.t_bpmn_id',
'  )',
'  as',
'    l_objt_sub_tag_name flow_objects.objt_sub_tag_name%type;',
'  begin',
'    for rec in (',
'                select steps.steps_type',
'                     , steps.steps_name',
'                     , steps.steps_id',
'                     , steps.source_ref',
'                     , steps.target_ref',
'                     , steps.default_conn',
'                     , steps.attached_to',
'                     , case steps.interrupting when ''false'' then 0 else 1 end as interrupting',
'                     , steps.child_elements',
'                     , steps.extension_elements',
'                  from xmltable',
'                       (',
'                         xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn")',
'                       , ''*'' passing pi_xml',
'                         columns',
'                           steps_type         varchar2(50  char) path ''name()''',
'                         , steps_name         varchar2(200 char) path ''@name''',
'                         , steps_id           varchar2(50  char) path ''@id''',
'                         , source_ref         varchar2(50  char) path ''@sourceRef''',
'                         , target_ref         varchar2(50  char) path ''@targetRef''',
'                         , default_conn       varchar2(50  char) path ''@default''',
'                         , attached_to        varchar2(50  char) path ''@attachedToRef''',
'                         , interrupting       varchar2(50  char) path ''@cancelActivity''',
'                         , child_elements     xmltype            path ''* except bpmn:incoming except bpmn:outgoing except bpmn:extensionElements''',
'                         , extension_elements xmltype            path ''bpmn:extensionElements''',
'                       ) steps',
'               )',
'    loop',
'',
'      if rec.source_ref is null then -- assume objects don''t have a sourceRef attribute',
'',
'        -- Parse additional information from child elements',
'        -- relevant for e.g. terminateEndEvent',
'        -- Additionally collect generic attributes if possible',
'        if rec.child_elements is not null then',
'          l_objt_sub_tag_name := find_subtag_name( pi_xml => rec.child_elements );',
'          parse_child_elements',
'          (',
'            pi_objt_bpmn_id => rec.steps_id',
'          , pi_xml          => rec.child_elements',
'          );',
'        else',
'          l_objt_sub_tag_name := null;',
'        end if;',
'',
'        if rec.extension_elements is not null then',
'          parse_extension_elements',
'          ( ',
'            pi_bpmn_id       => rec.steps_id',
'          , pi_extension_xml => rec.extension_elements',
'          );',
'        end if;',
'',
'        if rec.default_conn is not null then',
'          g_default_cons(rec.default_conn) := 1;',
'        end if;',
'',
'        register_object',
'        (',
'          pi_objt_bpmn_id        => rec.steps_id',
'        , pi_objt_name           => rec.steps_name',
'        , pi_objt_tag_name       => rec.steps_type',
'        , pi_objt_sub_tag_name   => l_objt_sub_tag_name',
'        , pi_objt_parent_bpmn_id => pi_proc_bpmn_id',
'        , pi_objt_attached_to    => rec.attached_to',
'        , pi_objt_interrupting   => rec.interrupting',
'        );',
'',
'        -- Register Object on Lane if parent belongs to a lane',
'        -- Those connections are not directly visible in the XML',
'        -- but BPMN defines inheritance for these.',
'        if g_lane_refs.exists( pi_proc_bpmn_id ) and rec.steps_id is not null then',
'          g_lane_refs( rec.steps_id ) := g_lane_refs( pi_proc_bpmn_id );',
'        end if;',
'',
'        if rec.steps_type = ''bpmn:laneSet'' then',
'          parse_lanes',
'          (',
'            pi_laneset_xml  => rec.child_elements',
'          , pi_objt_bpmn_id => rec.steps_id',
'          );',
'        end if;',
'      else',
'        register_connection',
'        (',
'          pi_conn_bpmn_id     => rec.steps_id',
'        , pi_conn_name        => rec.steps_name',
'        , pi_conn_src_bpmn_id => rec.source_ref',
'        , pi_conn_tgt_bpmn_id => rec.target_ref',
'        , pi_conn_tag_name    => rec.steps_type',
'        , pi_conn_origin      => pi_proc_bpmn_id',
'        );        ',
'      end if;',
'    end loop;  ',
'  end parse_steps;',
'',
'  procedure parse_xml',
'  (',
'    pi_xml       in xmltype',
'  , pi_parent_id in flow_types_pkg.t_bpmn_id',
'  )',
'  as',
'  begin',
'    if pi_parent_id is null then',
'      for rec in (',
'                 select proc.proc_id',
'                      , case proc.proc_type when ''bpmn:subProcess'' then ''SUB_PROCESS'' else ''PROCESS'' end as proc_type_rem',
'                      , proc.proc_type',
'                      , proc.proc_steps',
'                      , proc.proc_sub_procs',
'                      , proc.proc_name',
'                      , proc.proc_laneset',
'                   from xmltable',
'                      (',
'                        xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn")',
'                      , ''/bpmn:definitions/bpmn:process'' passing pi_xml',
'                        columns',
'                          proc_id        varchar2(50  char) path ''@id''',
'                        , proc_type      varchar2(50  char) path ''name()''',
'                        , proc_name      varchar2(200 char) path ''@name''',
'                        , proc_steps     xmltype            path ''* except bpmn:subProcess''',
'                        , proc_sub_procs xmltype            path ''bpmn:subProcess''',
'                        , proc_laneset   xmltype            path ''bpmn:laneSet''',
'                      ) proc',
'                 )',
'      loop',
'',
'        -- register each process as an object so we can reference later',
'        register_object',
'        (',
'          pi_objt_bpmn_id        => rec.proc_id',
'        , pi_objt_tag_name       => rec.proc_type',
'        , pi_objt_name           => rec.proc_name',
'        , pi_objt_parent_bpmn_id => pi_parent_id',
'        );',
'',
'        -- parse immediate steps        ',
'        parse_steps',
'        ( ',
'          pi_xml          => rec.proc_steps',
'        , pi_proc_type    => rec.proc_type_rem',
'        , pi_proc_bpmn_id => rec.proc_id',
'        );',
'',
'        -- recurse if sub processes found',
'        if rec.proc_sub_procs is not null then',
'',
'          parse_xml',
'          ( ',
'            pi_xml => rec.proc_sub_procs',
'          , pi_parent_id => rec.proc_id',
'          );',
'',
'        end if;',
'',
'      end loop;',
'    else',
'      for rec in (',
'                 select proc.proc_id',
'                      , case proc.proc_type when ''bpmn:subProcess'' then ''SUB_PROCESS'' else ''PROCESS'' end as proc_type_rem',
'                      , proc.proc_type',
'                      , proc.proc_steps',
'                      , proc.proc_sub_procs',
'                      , proc.proc_name',
'                   from xmltable',
'                      (',
'                        xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn")',
'                      , ''bpmn:subProcess'' passing pi_xml',
'                        columns',
'                          proc_id        varchar2(50  char) path ''@id''',
'                        , proc_name      varchar2(200 char) path ''@name''',
'                        , proc_type      varchar2(50  char) path ''name()''',
'                        , proc_steps     xmltype            path ''* except bpmn:subProcess''',
'                        , proc_sub_procs xmltype            path ''bpmn:subProcess''',
'                      ) proc',
'                 )',
'      loop',
'        -- We add an entry for a sub process here,',
'        -- as it is an object within the master process',
'        register_object',
'        (',
'          pi_objt_bpmn_id        => rec.proc_id',
'        , pi_objt_tag_name       => rec.proc_type',
'        , pi_objt_name           => rec.proc_name',
'        , pi_objt_parent_bpmn_id => pi_parent_id',
'        );',
'',
'        -- Register Object on Lane if parent belongs to a lane',
'        -- Those connections are not directly visible in the XML',
'        -- but BPMN defines inheritance for these.',
'        if g_lane_refs.exists( pi_parent_id ) and rec.proc_id is not null then',
'          g_lane_refs( rec.proc_id ) := g_lane_refs( pi_parent_id );',
'        end if;',
'',
'        -- parse any immediate steps',
'        parse_steps',
'        ( ',
'          pi_xml          => rec.proc_steps',
'        , pi_proc_type    => rec.proc_type_rem',
'        , pi_proc_bpmn_id => rec.proc_id',
'        );',
'',
'        -- recurse if we found any sub process',
'        if rec.proc_sub_procs is not null then',
'          parse_xml',
'          (',
'            pi_xml       => rec.proc_sub_procs',
'          , pi_parent_id => rec.proc_id',
'          );',
'        end if;        ',
'      end loop;',
'    end if;',
'  end parse_xml;',
'',
'  procedure parse_collaboration',
'  (',
'    pi_xml in xmltype',
'  )',
'  as',
'',
'  begin',
'    for rec in (',
'                 select colab_id',
'                      , colab_name',
'                      , colab_type',
'                      , colab_src_ref',
'                      , colab_tgt_ref',
'                   from xmltable',
'                        (',
'                          xmlnamespaces (''http://www.omg.org/spec/BPMN/20100524/MODEL'' as "bpmn")',
'                        , ''/bpmn:definitions/bpmn:collaboration/*'' passing pi_xml',
'                          columns',
'                            colab_id      varchar2(50  char)  path ''@id''',
'                          , colab_name    varchar2(200 char) path ''@name''',
'                          , colab_type    varchar2(50  char)  path ''name()''',
'                          , colab_src_ref varchar2(50  char)  path ''@sourceRef''',
'                          , colab_tgt_ref varchar2(50  char)  path ''@targetRef''',
'                        ) colab',
'    ) loop',
'',
'      case',
'        when rec.colab_src_ref is null then',
'          register_object',
'          (',
'            pi_objt_bpmn_id        => rec.colab_id',
'          , pi_objt_tag_name       => rec.colab_type',
'          , pi_objt_name           => rec.colab_name',
'          );',
'        else',
'          register_connection',
'          (',
'            pi_conn_bpmn_id     => rec.colab_id',
'          , pi_conn_name        => rec.colab_name',
'          , pi_conn_src_bpmn_id => rec.colab_src_ref',
'          , pi_conn_tgt_bpmn_id => rec.colab_tgt_ref',
'          , pi_conn_tag_name    => rec.colab_type',
'          , pi_conn_origin      => null',
'          );',
'',
'      end case;',
'',
'    end loop;',
'',
'  end parse_collaboration;',
'',
'  procedure reset',
'  as',
'  begin',
'    g_dgrm_id := null;',
'    g_objects.delete;',
'    g_obj_attribs.delete;',
'    g_objt_expr.delete;',
'    g_connections.delete;',
'    g_objt_lookup.delete;',
'  end reset;',
'',
'  procedure parse',
'  as',
'    l_dgrm_content clob;',
'    l_has_changed boolean;',
'  begin',
'    -- delete any existing parsed information before parsing again',
'    cleanup_parsing_tables;',
'',
'    -- get the CLOB content',
'    select dgrm_content',
'      into l_dgrm_content',
'      from flow_diagrams',
'     where dgrm_id = g_dgrm_id',
'    ;',
'',
'    -- migrate old diagrams',
'    flow_migrate_xml_pkg.migrate_xml(',
'      p_dgrm_content => l_dgrm_content',
'    , p_has_changed => l_has_changed',
'    );',
'',
'    -- update diagram after change',
'    if l_has_changed then',
'      update flow_diagrams',
'      set dgrm_content = l_dgrm_content',
'      where dgrm_id = g_dgrm_id;',
'    end if;',
'',
'    -- parse out collaboration part first',
'    parse_collaboration( pi_xml => xmltype(l_dgrm_content) );',
'    -- start recursive processsing of xml',
'    parse_xml( pi_xml => xmltype(l_dgrm_content), pi_parent_id => null );',
'',
'    -- finally insert all parsed data',
'    finalize;',
'',
'  end parse;',
'',
'  procedure parse',
'  (',
'    pi_dgrm_id in flow_diagrams.dgrm_id%type',
'  )',
'  as',
'  begin',
'    reset;',
'    g_dgrm_id := pi_dgrm_id;',
'    parse;',
'  end parse;',
'',
'  procedure parse',
'  (',
'    pi_dgrm_name in flow_diagrams.dgrm_name%type',
'  , pi_dgrm_version  in flow_diagrams.dgrm_version%type',
'  )',
'  as',
'  begin',
'    reset;',
'    select dgrm_id',
'      into g_dgrm_id',
'      from flow_diagrams',
'     where dgrm_name = pi_dgrm_name',
'       and dgrm_version = pi_dgrm_version',
'    ;',
'    parse;',
'  end parse;',
'',
'  procedure upload_and_parse',
'  (',
'    pi_dgrm_name     in flow_diagrams.dgrm_name%type',
'  , pi_dgrm_version  in flow_diagrams.dgrm_version%type',
'  , pi_dgrm_category in flow_diagrams.dgrm_category%type',
'  , pi_dgrm_content  in flow_diagrams.dgrm_content%type',
'  , pi_dgrm_status   in flow_diagrams.dgrm_status%type default flow_constants_pkg.gc_dgrm_status_draft',
'  , pi_force_overwrite in boolean default false',
'  )',
'  as',
'  begin',
'    reset;',
'',
'    upload_diagram( pi_dgrm_name => pi_dgrm_name, pi_dgrm_version => pi_dgrm_version,',
'                    pi_dgrm_category => pi_dgrm_category, pi_dgrm_content => pi_dgrm_content,',
'                    pi_dgrm_status => pi_dgrm_status, pi_force_overwrite => pi_force_overwrite',
'                  );',
'    parse;',
'',
'  end upload_and_parse;',
'',
'  procedure update_diagram',
'  (',
'    pi_dgrm_id      in flow_diagrams.dgrm_id%type',
'  , pi_dgrm_content in flow_diagrams.dgrm_content%type',
'  )',
'  as',
'  begin',
'    reset;',
'    g_dgrm_id := pi_dgrm_id;',
'',
'    update flow_diagrams',
'       set dgrm_content = pi_dgrm_content',
'         , dgrm_last_update = systimestamp',
'     where dgrm_id = g_dgrm_id',
'    ;',
'',
'    parse;',
'  end update_diagram;',
'',
'end flow_bpmn_parser_pkg;',
'/',
'',
'create or replace package body flow_timers_pkg',
'as',
'',
'',
'  lock_timeout exception;',
'  pragma exception_init (lock_timeout, -3006);',
'',
'  e_invalid_duration exception;',
'',
'  type t_timer_def is record',
'  ( timer_type            flow_object_attributes.obat_vc_value%type',
'  , timer_definition      flow_object_attributes.obat_vc_value%type',
'  , oracle_date           flow_object_attributes.obat_vc_value%type',
'  , oracle_format_mask    flow_object_attributes.obat_vc_value%type',
'  , oracle_duration_ds    flow_object_attributes.obat_vc_value%type',
'  , oracle_duration_ym    flow_object_attributes.obat_vc_value%type',
'  , start_interval_ds     flow_object_attributes.obat_vc_value%type',
'  , repeat_interval_ds    flow_object_attributes.obat_vc_value%type',
'  , max_runs              flow_object_attributes.obat_vc_value%type',
'  );',
'',
'  function timer_exists',
'  (',
'    pi_timr_id in flow_timers.timr_id%type',
'  ) return boolean',
'  as',
'    l_cnt number;',
'  begin',
'    select count(*)',
'      into l_cnt',
'      from flow_timers',
'     where timr_id = pi_timr_id',
'    ;',
'    return ( l_cnt = 1 );',
'  end timer_exists;',
'',
'  procedure lock_timer',
'  (',
'    pi_prcs_id  in  flow_processes.prcs_id%type',
'  , pi_sbfl_id  in  flow_subflows.sbfl_id%type',
'  )',
'  as',
'    cursor c_lock is ',
'      select timr.timr_id ',
'        from flow_timers timr',
'       where timr.timr_prcs_id = pi_prcs_id',
'         and timr.timr_sbfl_id = pi_sbfl_id',
'      for update of timr.timr_id wait 2;',
'  begin',
'    open c_lock;',
'    close c_lock;',
'  exception',
'    when lock_timeout then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_message_key    => ''timer-lock-timeout''',
'      , p0 => pi_sbfl_id         ',
'      );',
'      -- $F4AMESSAGE ''timer-lock-timeout'' || ''Timer for subflow %0 currently locked by another user.  Try again later.''',
'  end lock_timer;',
'',
'  procedure lock_process_timers',
'  (',
'    pi_prcs_id  in  flow_processes.prcs_id%type',
'  )',
'  as',
'    cursor c_lock is ',
'      select timr.timr_id ',
'        from flow_timers timr',
'       where timr.timr_prcs_id = pi_prcs_id',
'       order by timr.timr_id',
'      for update of timr.timr_id;',
'  begin',
'    open c_lock;',
'    close c_lock;',
'  exception',
'  when lock_timeout then',
'    flow_errors.handle_instance_error',
'    ( pi_prcs_id        => pi_prcs_id',
'    , pi_message_key    => ''timers-lock-timeout''',
'    , p0 => pi_prcs_id        ',
'    );',
'    -- $F4AMESSAGE ''timers-lock-timeout'' || ''Timers for process %0 currently locked by another user.  Try again later.''',
'  end lock_process_timers;',
'',
'  function get_timer_definition',
'  (',
'    pi_prcs_id    in         flow_processes.prcs_id%type',
'  , pi_sbfl_id    in         flow_subflows.sbfl_id%type',
'  --, po_timer_type out nocopy flow_object_attributes.obat_vc_value%type',
'  --, po_timer_def  out nocopy flow_object_attributes.obat_vc_value%type',
'  ) return t_timer_def',
'  is',
'    l_timer_def                   t_timer_def;',
'    l_objt_with_timer             flow_objects.objt_id%type;',
'    l_objt_with_timer_bpmn_id     flow_objects.objt_bpmn_id%type;',
'  begin',
'    -- get objt that timers are attached to (object or attached boundaryEvent)',
'    begin ',
'      select objt.objt_id',
'           , objt.objt_bpmn_id',
'        into l_objt_with_timer',
'           , l_objt_with_timer_bpmn_id',
'        from flow_subflows sbfl',
'        join flow_processes prcs',
'          on prcs.prcs_id = sbfl.sbfl_prcs_id',
'        join flow_objects objt',
'          on objt.objt_bpmn_id = sbfl.sbfl_current',
'         and objt.objt_dgrm_id = prcs.prcs_dgrm_id',
'       where sbfl.sbfl_id = pi_sbfl_id',
'         and sbfl.sbfl_prcs_id = pi_prcs_id',
'         and objt.objt_sub_tag_name = flow_constants_pkg.gc_bpmn_timer_event_definition',
'      ;',
'    exception',
'      when no_data_found then',
'        -- check for an interupting timer boundary event attached',
'        begin',
'          select boundary_objt.objt_id',
'            into l_objt_with_timer',
'            from flow_subflows sbfl',
'            join flow_processes prcs',
'              on prcs.prcs_id = sbfl.sbfl_prcs_id',
'            join flow_objects main_objt',
'              on main_objt.objt_bpmn_id = sbfl.sbfl_current',
'             and main_objt.objt_dgrm_id = prcs.prcs_dgrm_id',
'            join flow_objects boundary_objt',
'              on boundary_objt.objt_attached_to = main_objt.objt_bpmn_id',
'             and boundary_objt.objt_dgrm_id = prcs.prcs_dgrm_id',
'           where sbfl.sbfl_id = pi_sbfl_id',
'             and prcs.prcs_id = pi_prcs_id',
'             and boundary_objt.objt_sub_tag_name = flow_constants_pkg.gc_bpmn_timer_event_definition',
'             and boundary_objt.objt_interrupting = 1',
'          ;',
'        exception',
'          when no_data_found then',
'            flow_errors.handle_instance_error',
'            ( pi_prcs_id        => pi_prcs_id',
'            , pi_sbfl_id        => pi_sbfl_id',
'            , pi_message_key    => ''timer-object-not-found''',
'            , p0 => pi_sbfl_id          ',
'            );',
'            -- $F4AMESSAGE ''timer-object-not-found'' || ''Object with timer not found in get_timer_definition. Subflow %0.''',
'        end;',
'    end;',
'    apex_debug.info',
'    (',
'      p_message => ''get_timer_definition.  Getting timer definition for object %s on subflow %s''',
'    , p0        => l_objt_with_timer_bpmn_id',
'    , p1        => pi_sbfl_id',
'    );',
'',
'    for rec in (',
'                select obat.obat_key',
'                     , obat.obat_vc_value',
'                  from flow_object_attributes obat',
'                 where obat.obat_objt_id = l_objt_with_timer',
'                   and obat.obat_key in ( flow_constants_pkg.gc_timer_type_key',
'                                        , flow_constants_pkg.gc_timer_def_key ',
'                                        , flow_constants_pkg.gc_apex_timer_date',
'                                        , flow_constants_pkg.gc_apex_timer_format_mask',
'                                        , flow_constants_pkg.gc_apex_timer_interval_ym',
'                                        , flow_constants_pkg.gc_apex_timer_interval_ds',
'                                        , flow_constants_pkg.gc_apex_timer_start_interval_ds',
'                                        , flow_constants_pkg.gc_apex_timer_repeat_interval_ds',
'                                        , flow_constants_pkg.gc_apex_timer_max_runs',
'                                        )',
'               )',
'    loop',
'      case rec.obat_key',
'        when flow_constants_pkg.gc_timer_type_key then',
'          l_timer_def.timer_type := rec.obat_vc_value;',
'        when flow_constants_pkg.gc_timer_def_key then',
'          l_timer_def.timer_definition := rec.obat_vc_value;',
'        when flow_constants_pkg.gc_apex_timer_date then',
'          l_timer_def.oracle_date := rec.obat_vc_value;',
'        when flow_constants_pkg.gc_apex_timer_format_mask then',
'          l_timer_def.oracle_format_mask := rec.obat_vc_value;',
'        when flow_constants_pkg.gc_apex_timer_interval_ym then',
'          l_timer_def.oracle_duration_ym := rec.obat_vc_value;',
'        when flow_constants_pkg.gc_apex_timer_interval_ds then',
'          l_timer_def.oracle_duration_ds := rec.obat_vc_value;',
'        when flow_constants_pkg.gc_apex_timer_start_interval_ds  then',
'          l_timer_def.start_interval_ds := rec.obat_vc_value;',
'        when flow_constants_pkg.gc_apex_timer_repeat_interval_ds then',
'          l_timer_def.repeat_interval_ds  := rec.obat_vc_value;',
'        when flow_constants_pkg.gc_apex_timer_max_runs then',
'          l_timer_def.max_runs  := rec.obat_vc_value;',
'        else',
'          null;',
'      end case;',
'    end loop;',
'',
'    if l_timer_def.timer_type is null',
'       or',
'       ( l_timer_def.timer_type in  ( flow_constants_pkg.gc_timer_type_date ',
'                                    , flow_constants_pkg.gc_timer_type_duration',
'                                    , flow_constants_pkg.gc_timer_type_cycle',
'                                    )',
'         and  l_timer_def.timer_definition is null )',
'       or ',
'       ( l_timer_def.timer_type = flow_constants_pkg.gc_timer_type_oracle_date',
'         and  (l_timer_def.oracle_date is null ',
'              or l_timer_def.oracle_format_mask is null )',
'       )',
'       or ',
'       ( l_timer_def.timer_type = flow_constants_pkg.gc_timer_type_oracle_duration',
'         and  l_timer_def.oracle_duration_ds is null ',
'         and  l_timer_def.oracle_duration_ym is null',
'       )',
'       or ',
'       ( l_timer_def.timer_type = flow_constants_pkg.gc_timer_type_oracle_cycle',
'         and  (l_timer_def.start_interval_ds is null ',
'              or l_timer_def.repeat_interval_ds is null ',
'               )  -- note - maxRuns is allowed to be null (means no limit)',
'       )',
'    then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id        => pi_prcs_id',
'      , pi_sbfl_id        => pi_sbfl_id',
'      , pi_message_key    => ''timer-incomplete-definition''',
'      , p0 => l_objt_with_timer_bpmn_id         ',
'	    , p1 => coalesce ( l_timer_def.timer_type,  ''!NULL!'')',
'      , p2 => coalesce ( l_timer_def.timer_definition, l_timer_def.oracle_date',
'                       , l_timer_def.oracle_duration_ds, l_timer_def.start_interval_ds , ''!NULL!'')',
'      , p3 => coalesce ( l_timer_def.oracle_format_mask',
'                       , l_timer_def.oracle_duration_ym, l_timer_def.repeat_interval_ds,''!NULL!'')',
'      , p4 => coalesce ( l_timer_def.max_runs,''!NULL!'')                       ',
'      );',
'      -- $F4AMESSAGE ''timer-incomplete-definition'' || ''Incomplete timer definitions for object %0. Type: %1; Value1: %2 Value2: %3  Value3: %4''',
'    end if;',
'    return l_timer_def;',
'  end get_timer_definition;',
'',
'  procedure step_timers',
'  as',
'    e_resource_timeout      exception;',
'    pragma                  exception_init(e_resource_timeout, -30006);',
'',
'    l_timers                flow_timers%rowtype;',
'    l_run_time              flow_timers.timr_last_run%type := systimestamp;',
'    l_new_status            flow_timers.timr_status%type;',
'    l_timr_id               flow_timers.timr_id%type;',
'    l_timr_run              flow_timers.timr_run%type;',
'  begin',
'    loop -- until no records found',
'      -- could add a functional index on flow_timers to improve performance of this query',
'      -- eg. create index flow_timr_n1 on flow_timers (',
'      --          case when timr_status in ( ''C'', ''A'' ) then coalesce( timr_last_run, timr_created_on ) end);',
'      select * into l_timers',
'        from flow_timers',
'       where rowid in (',
'          select max(rowid) keep (dense_rank first order by coalesce( timr_last_run, timr_created_on )) trowid',
'            from flow_timers',
'           where timr_status = c_created',
'             --and coalesce( timr_last_run, timr_created_on )  < l_run_time ',
'             and timr_start_on <= l_run_time',
'          )',
'      for update wait 5',
'      ;',
'',
'      update flow_timers',
'      set timr_last_run = systimestamp',
'          , timr_status = c_ended',
'      where timr_id = l_timers.timr_id',
'        and timr_run = l_timers.timr_run',
'      ;',
'',
'      begin',
'      -- ideally the flow_engine should lock the subflow and this procedure should handle the resource ',
'      -- timeout, deadlock and not found exceptions. This would happen if the subflow is locked waiting ',
'      -- to delete the timer through a cascade delete.',
'        if l_timers.timr_type in  ( flow_constants_pkg.gc_timer_type_cycle',
'                                  , flow_constants_pkg.gc_timer_type_oracle_cycle ',
'                                  ) ',
'        then ',
'          -- repeating / cycle timer.  If unlimited or less than max repeats, run again...',
'          if l_timers.timr_run < l_timers.timr_repeat_times ',
'          or l_timers.timr_repeat_times is null then ',
'            l_timr_id   := l_timers.timr_id;',
'            l_timr_run  := l_timers.timr_run;',
'          end if;',
'        else',
'          l_timr_id   := null;      ',
'          l_timr_run  := null;',
'        end if;',
'        flow_engine.flow_handle_event',
'        (',
'          p_process_id => l_timers.timr_prcs_id',
'        , p_subflow_id => l_timers.timr_sbfl_id',
'        , p_step_key   => l_timers.timr_step_key',
'        , p_timr_id    => l_timr_id',
'        , p_run        => l_timr_run',
'        );',
'      exception ',
'        -- Some exception happened during processing the timer',
'        -- We trap it here and mark respective timer as broken.',
'        when others then',
'        update flow_timers',
'          set timr_status = c_broken',
'        where timr_id = l_timers.timr_id',
'          and timr_run = l_timers.timr_run',
'        ;',
'        flow_errors.handle_instance_error',
'        ( pi_prcs_id    => l_timers.timr_prcs_id',
'        , pi_sbfl_id    => l_timers.timr_sbfl_id',
'        , pi_message_key => ''timer-broken''',
'        , p0 => l_timers.timr_id',
'        , p1 => l_timers.timr_prcs_id',
'        , p2 => l_timers.timr_sbfl_id',
'        , p3 => l_timers.timr_run',
'        );',
'        -- $F4AMESSAGE ''timer-broken'' || ''Timer %0 Run %4 broken in process %1 , subflow : %2.  See error_info.''',
'      end;',
'      commit;',
'    end loop;',
'    exception ',
'      when no_data_found then return;',
'      when e_resource_timeout then',
'        -- record requiring update is locked by another process, could put some logging in here',
'        rollback;',
'        return;',
'',
'  end step_timers;',
'',
'  procedure get_iso_duration',
'  (',
'    in_string     in     varchar2',
'  , in_start_ts   in     timestamp with time zone default null',
'  , out_start_ts     out timestamp with time zone',
'  , out_interv_ym in out interval year to month',
'  , out_interv_ds in out interval day to second',
'  )',
'  as',
'    type t_duration_components is table of number index by varchar2(1 char);',
'',
'    l_start_pos_time  pls_integer;',
'    l_token_count     pls_integer;',
'    l_before_t        varchar2(200 char);',
'    l_after_t         varchar2(200 char);',
'    l_ym_part         varchar2(200 char);',
'    l_ds_part         varchar2(200 char);',
'',
'    l_cur_component   varchar2(200 char);    ',
'  begin',
'    -- first split the string to year-month and day-second parts',
'    -- afterwards operate on both separately',
'    -- because M before T means months and M after T means minutes',
'',
'    l_start_pos_time := instr( in_string, ''T'' );',
'    if l_start_pos_time = 0 then',
'      l_before_t := in_string;',
'    else',
'      l_before_t       := substr( in_string, 1, l_start_pos_time - 1 );',
'      l_afte'))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'r_t        := substr( in_string, l_start_pos_time);',
'    end if;',
'',
'    -- The day indicator comes before the "T"',
'    -- however day needs to be handle with ds_interval',
'    l_token_count := regexp_count( l_before_t, ''\d+\w'' );',
'    for i in 1..l_token_count loop',
'      l_cur_component := regexp_substr(l_before_t, ''\d+\w'', 1, i);',
'',
'      case substr(l_cur_component, -1)',
'        when ''Y'' then l_ym_part := l_ym_part || l_cur_component;',
'        when ''M'' then l_ym_part := l_ym_part || l_cur_component;',
'        when ''D'' then l_ds_part := l_ds_part || l_cur_component;',
'        else null;',
'      end case;',
'    end loop;',
'',
'    l_ds_part := l_ds_part || l_after_t;',
'',
'    if l_ym_part is not null or l_ds_part is not null then',
'      out_interv_ym := to_yminterval( ''P'' || coalesce(l_ym_part, ''0Y'') );',
'      out_interv_ds := to_dsinterval( ''P'' || coalesce(l_ds_part, ''0D'') );',
'',
'      out_start_ts  := coalesce( in_start_ts, systimestamp ) + out_interv_ym + out_interv_ds;',
'    else',
'      raise e_invalid_duration;',
'    end if;',
'',
'  end get_iso_duration;',
'',
'/******************************************************************************',
'  START_TIMER',
'******************************************************************************/',
'',
'  procedure start_new_timer',
'  (',
'    pi_prcs_id    in flow_processes.prcs_id%type',
'  , pi_sbfl_id    in flow_subflows.sbfl_id%type ',
'  , pi_step_key   in flow_subflows.sbfl_step_key%type default null',
'  )',
'  as',
'    l_parsed_ts           flow_timers.timr_start_on%type;',
'    l_parsed_duration_ym  flow_timers.timr_interval_ym%type;',
'    l_parsed_duration_ds  flow_timers.timr_interval_ds%type;',
'    l_repeat_times        flow_timers.timr_repeat_times%type;',
'    l_repeat_def          varchar2(200);',
'    l_timer_def           t_timer_def;',
'    l_time_string         varchar2(20);',
'    e_invalid_repeat      exception;',
'  begin',
'    apex_debug.enter ',
'    ( ''start_new_timer''',
'    , ''prcs_id'', pi_prcs_id',
'    , ''sbfl_id'', pi_sbfl_id',
'    , ''step_key'', pi_step_key',
'    );',
'    l_timer_def := get_timer_definition',
'                  (',
'                    pi_prcs_id    => pi_prcs_id',
'                  , pi_sbfl_id    => pi_sbfl_id',
'                  );',
'    apex_debug.info',
'    (',
'      p_message => ''starting new timer on subflow %0, type %1, key1: %2, key2 : %3 , key3: %4''',
'    , p0        => pi_sbfl_id',
'    , p1        => l_timer_def.timer_type',
'    , p2        => coalesce( l_timer_def.timer_definition , l_timer_def.oracle_date',
'                           , l_timer_def.oracle_duration_DS,  l_timer_def.start_Interval_DS , ''<null>'')',
'    , p3        => coalesce( l_timer_def.oracle_format_mask, l_timer_def.repeat_interval_ds, ''<null>'')',
'    , p4        => coalesce( l_timer_def.max_runs, ''<null>'')',
'    );',
'    begin',
'      case l_timer_def.timer_type',
'        when flow_constants_pkg.gc_timer_type_date then',
'          -- ISO 8601 date - check for substitution of process variable',
'          if upper(substr(l_timer_def.timer_definition,1,5)) = flow_constants_pkg.gc_substitution_prefix || flow_constants_pkg.gc_substitution_flow_identifier then',
'            case flow_process_vars.get_var_type ( pi_prcs_id  => pi_prcs_id',
'                                                , pi_var_name => substr(l_timer_def.timer_definition,6,length(l_timer_def.timer_definition)-6)',
'                                                )',
'            when flow_constants_pkg.gc_prov_var_type_date then',
'                -- substitution parameter is a date process var = already an Oracle date',
'                l_parsed_ts :=',
'                  flow_process_vars.get_var_date',
'                  ( ',
'                    pi_prcs_id  => pi_prcs_id',
'                  , pi_var_name => substr(l_timer_def.timer_definition,6,length(l_timer_def.timer_definition)-6)',
'                  )',
'                ;',
'            when flow_constants_pkg.gc_prov_var_type_varchar2 then',
'                l_parsed_ts := to_timestamp_tz ( flow_process_vars.get_var_vc2',
'                                                 ( pi_prcs_id => pi_prcs_id',
'                                                 , pi_var_name => substr  ( l_timer_def.timer_definition,6',
'                                                                          , length(l_timer_def.timer_definition)-6',
'                                                                          )',
'                                                 )',
'                                                , flow_constants_pkg.gc_prov_default_date_format',
'                                                );',
'            end case;',
'          elsif substr(l_timer_def.timer_definition,1,1) = ''T'' then',
'            -- check for just an ISO Time, and then get next time that time of day occurs (today/tomorrow)',
'            l_time_string := substr(l_timer_def.timer_definition,2,8);',
'            case ',
'              when  (sysdate - to_date(to_char(sysdate,''YYYY-MM-DD '')||l_time_string,''YYYY-MM-DD HH24:MI:SS'')) < 0 then',
'                -- today',
'                l_parsed_ts := to_timestamp_tz( to_char (sysdate,''YYYY-MM-DD '')||l_time_string, ''YYYY-MM-DD HH24:MI:SS'');',
'              else',
'                -- tomorrow',
'                l_parsed_ts := to_timestamp_tz(to_char ( sysdate+1,''YYYY-MM-DD '')||l_time_string,''YYYY-MM-DD HH24:MI:SS'');',
'            end case;',
'',
'          else',
'            -- assume we have an ISO date-time',
'            l_parsed_ts := to_timestamp_tz( replace ( l_timer_def.timer_definition, ''T'', '' '' ), ''YYYY-MM-DD HH24:MI:SS TZR'' );',
'          end if;',
'        when flow_constants_pkg.gc_timer_type_duration then',
'          -- ISO 8601 Duration - check for substitution of process variable',
'          if upper(substr(l_timer_def.timer_definition,1,5)) = flow_constants_pkg.gc_substitution_prefix || flow_constants_pkg.gc_substitution_flow_identifier then',
'            l_timer_def.timer_definition :=',
'              flow_process_vars.get_var_vc2',
'              ( ',
'                pi_prcs_id  => pi_prcs_id',
'              , pi_var_name => substr(l_timer_def.timer_definition,6,length(l_timer_def.timer_definition)-6)',
'              )',
'            ;',
'          end if;     ',
'          get_iso_duration',
'          (',
'            in_string     => l_timer_def.timer_definition',
'          , in_start_ts   => systimestamp',
'          , out_start_ts  => l_parsed_ts',
'          , out_interv_ym => l_parsed_duration_ym',
'          , out_interv_ds => l_parsed_duration_ds',
'          );',
'        when flow_constants_pkg.gc_timer_type_cycle then',
'          -- ISO 8601 Cycle - check for substitution of process variable',
'          flow_process_vars.do_substitution ( pi_prcs_id => pi_prcs_id',
'                                            , pi_sbfl_id => pi_sbfl_id',
'                                            , pio_string => l_timer_def.timer_definition',
'                                            );',
'          l_repeat_def := regexp_substr (l_timer_def.timer_definition, ''^''||''R([0-9]*|-1)\/''); -- using concatenation to prevent substitution on installation via script',
'          if l_repeat_def is null then',
'            raise e_invalid_repeat;',
'          end if;',
'          l_repeat_times := substr ( l_timer_def.timer_definition, 2',
'                                   ,  instr( l_timer_def.timer_definition, ''/'', 1, 1 ) - 2 ',
'                                   );',
'          if l_repeat_times = -1 or l_repeat_times is null then ',
'            -- ISO8601 repeat -1 means unlimited so set repeat_times to max cycles',
'            l_repeat_times := flow_engine_util.get_config_value ',
'            ( p_config_key    => flow_constants_pkg.gc_config_timer_max_cycles',
'            , p_default_value => flow_constants_pkg.gc_config_default_timer_max_cycles',
'            );',
'          elsif l_repeat_times = 0 then',
'            -- according to ISO 8601 it should run 1 time but not repeat',
'            l_repeat_times := 1;',
'          end if;',
'',
'          l_timer_def.timer_definition := substr  ( l_timer_def.timer_definition',
'                                                  , instr( l_timer_def.timer_definition, ''/'', 1, 1 ) + 1  ',
'                                                  );',
'          get_iso_duration',
'          (',
'            in_string     => l_timer_def.timer_definition',
'          , in_start_ts   => systimestamp',
'          , out_start_ts  => l_parsed_ts',
'          , out_interv_ym => l_parsed_duration_ym',
'          , out_interv_ds => l_parsed_duration_ds',
'          );',
'        when flow_constants_pkg.gc_timer_type_oracle_date then',
'',
'          if upper(substr(l_timer_def.oracle_date,1,5)) = flow_constants_pkg.gc_substitution_prefix || flow_constants_pkg.gc_substitution_flow_identifier then',
'            case flow_process_vars.get_var_type ( pi_prcs_id  => pi_prcs_id',
'                                                , pi_var_name => substr(l_timer_def.oracle_date,6,length(l_timer_def.oracle_date)-6)',
'                                                )',
'            when flow_constants_pkg.gc_prov_var_type_date then',
'                -- substitution parameter is a date process var = already an Oracle date',
'                l_parsed_ts :=',
'                  flow_process_vars.get_var_date',
'                  ( ',
'                    pi_prcs_id  => pi_prcs_id',
'                  , pi_var_name => substr(l_timer_def.oracle_date,6,length(l_timer_def.oracle_date)-6)',
'                  )',
'                ;',
'            when flow_constants_pkg.gc_prov_var_type_varchar2 then',
'                -- substitution parameter is a vc2 - use the specified format mask',
'                l_parsed_ts := to_timestamp_tz ( flow_process_vars.get_var_vc2',
'                                                 ( pi_prcs_id => pi_prcs_id',
'                                                 , pi_var_name => substr  ( l_timer_def.oracle_date,6',
'                                                                          , length(l_timer_def.oracle_date)-6',
'                                                                          )',
'                                                 )',
'                                                , l_timer_def.oracle_format_mask',
'                                                );',
'            end case;',
'          else',
'            -- just use the specified date and format mask',
'            l_parsed_ts := to_timestamp ( l_timer_def.oracle_date, l_timer_def.oracle_format_mask);',
'          end if;',
'        when flow_constants_pkg.gc_timer_type_oracle_duration then ',
'          -- handle possible vc2-typed subsitutions for both parameters',
'          flow_process_vars.do_substitution ( pi_prcs_id => pi_prcs_id',
'                                            , pi_sbfl_id => pi_sbfl_id',
'                                            , pio_string => l_timer_def.oracle_duration_ds',
'                                            );',
'          flow_process_vars.do_substitution ( pi_prcs_id => pi_prcs_id',
'                                            , pi_sbfl_id => pi_sbfl_id',
'                                            , pio_string => l_timer_def.oracle_duration_ym',
'                                            );',
'          l_parsed_duration_ds := to_dsinterval ( nvl ( l_timer_def.oracle_duration_ds , ''000 00:00:00'') );',
'          l_parsed_duration_ym := to_yminterval ( nvl( l_timer_def.oracle_duration_ym, ''0-0'') );',
'          l_parsed_ts := systimestamp + l_parsed_duration_ym + l_parsed_duration_ds;',
'',
'        when flow_constants_pkg.gc_timer_type_oracle_cycle then',
'          -- oracle cycle timer - all 3 parameters can be substituted with vc2-type proc var',
'          flow_process_vars.do_substitution ( pi_prcs_id => pi_prcs_id',
'                                            , pi_sbfl_id => pi_sbfl_id',
'                                            , pio_string => l_timer_def.start_interval_ds',
'                                            );',
'          flow_process_vars.do_substitution ( pi_prcs_id => pi_prcs_id',
'                                            , pi_sbfl_id => pi_sbfl_id',
'                                            , pio_string => l_timer_def.repeat_interval_ds',
'                                            ); ',
'          if l_timer_def.max_runs is not null then            ',
'            flow_process_vars.do_substitution ( pi_prcs_id => pi_prcs_id',
'                                            , pi_sbfl_id => pi_sbfl_id',
'                                            , pio_string => l_timer_def.max_runs',
'                                            );                                                       ',
'            l_repeat_times        := to_number ( l_timer_def.max_runs );',
'          else',
'            l_repeat_times := flow_engine_util.get_config_value ',
'                              ( p_config_key    => flow_constants_pkg.gc_config_timer_max_cycles',
'                              , p_default_value => flow_constants_pkg.gc_config_default_timer_max_cycles',
'                              );',
'          end if;',
'          l_parsed_ts           := systimestamp + to_dsinterval ( l_timer_def.start_interval_ds );',
'          l_parsed_duration_ym  := to_yminterval (''0-0'');  -- UI currently does not allow YM input so set to 0',
'          l_parsed_duration_ds  := to_dsinterval ( l_timer_def.repeat_interval_ds );',
'        else',
'          flow_errors.handle_instance_error',
'          ( pi_prcs_id        => pi_prcs_id',
'          , pi_sbfl_id        => pi_sbfl_id',
'          , pi_message_key    => ''timer-incomplete-definition''',
'          , p0 => pi_sbfl_id         ',
'	        , p1 => l_timer_def.timer_type',
'          , p2 => l_timer_def.timer_definition',
'          );',
'          -- $F4AMESSAGE ''timer-incomplete-definition'' || ''Incomplete timer definitions for object %0. Type: %1; Value: %2''',
'      end case;',
'    exception',
'      when e_invalid_repeat or e_invalid_duration then',
'        flow_errors.handle_instance_error',
'        (',
'          pi_prcs_id     => pi_prcs_id',
'        , pi_sbfl_id     => pi_sbfl_id',
'        , pi_message_key => ''timer_definition_error''',
'        , p0             => pi_prcs_id',
'        , p1             => pi_sbfl_id',
'        , p2             => l_timer_def.timer_type',
'        , p3             => l_timer_def.timer_definition',
'        );',
'      when others then',
'        flow_errors.handle_instance_error',
'        (',
'          pi_prcs_id     => pi_prcs_id',
'        , pi_sbfl_id     => pi_sbfl_id',
'        , pi_message_key => ''timer_definition_error''',
'        , p0             => pi_prcs_id',
'        , p1             => pi_sbfl_id',
'        , p2             => l_timer_def.timer_type',
'        , p3             => l_timer_def.timer_definition',
'        );',
'    end;    ',
'',
'    insert into flow_timers',
'      (',
'        timr_prcs_id',
'      , timr_sbfl_id',
'      , timr_step_key',
'      , timr_run',
'      , timr_type',
'      , timr_created_on',
'      , timr_status',
'      , timr_start_on',
'      , timr_interval_ym',
'      , timr_interval_ds',
'      , timr_repeat_times',
'      )',
'      values',
'      (',
'        pi_prcs_id',
'      , pi_sbfl_id',
'      , pi_step_key',
'      , 1',
'      , l_timer_def.timer_type',
'      , systimestamp',
'      , c_created',
'      , l_parsed_ts',
'      , l_parsed_duration_ym',
'      , l_parsed_duration_ds',
'      , l_repeat_times',
'      )',
'    ;',
'',
'  end start_new_timer;',
'',
'  procedure start_repeat_timer',
'  (',
'    pi_prcs_id    in flow_processes.prcs_id%type',
'  , pi_sbfl_id    in flow_subflows.sbfl_id%type ',
'  , pi_step_key   in flow_subflows.sbfl_step_key%type default null',
'  , pi_run        in flow_timers.timr_run%type default 1 -- 1 original, 2-> repeats',
'  , pi_timr_id    in flow_timers.timr_id%type default null -- only set on repeats',
'  )',
'  as',
'    l_parsed_ts           flow_timers.timr_start_on%type;',
'    l_parsed_duration_ym  flow_timers.timr_interval_ym%type;',
'    l_parsed_duration_ds  flow_timers.timr_interval_ds%type;',
'    l_repeat_times        flow_timers.timr_repeat_times%type;',
'    l_timer_def           t_timer_def;',
'  begin',
'    apex_debug.enter ',
'    ( ''start_repeat_timer''',
'    , ''prcs_id'', pi_prcs_id',
'    , ''sbfl_id'', pi_sbfl_id',
'    , ''step_key'', pi_step_key',
'    , ''timr_id (repeats)'', pi_timr_id',
'    , ''run'', pi_run',
'    );',
'',
'    insert into flow_timers',
'    ( timr_id',
'    , timr_run',
'    , timr_prcs_id',
'    , timr_sbfl_id',
'    , timr_step_key',
'    , timr_type',
'    , timr_created_on',
'    , timr_status',
'    , timr_start_on',
'    , timr_interval_ym',
'    , timr_interval_ds',
'    , timr_repeat_times',
'    ) ',
'    select',
'      pi_timr_id',
'    , pi_run',
'    , pi_prcs_id',
'    , pi_sbfl_id',
'    , pi_step_key',
'    , old_timr.timr_type',
'    , systimestamp',
'    , c_created',
'    , systimestamp + nvl(old_timr.timr_interval_ym,''0-0'') + nvl(old_timr.timr_interval_ds,''0 00:00:00'')',
'    , old_timr.timr_interval_ym',
'    , old_timr.timr_interval_ds',
'    , old_timr.timr_repeat_times',
'    from flow_timers old_timr',
'    where old_timr.timr_id = pi_timr_id',
'      and old_timr.timr_run = pi_run - 1',
'      and old_timr.timr_prcs_id = pi_prcs_id',
'    ;',
'',
'  end start_repeat_timer;',
'',
'  procedure start_timer',
'  (',
'    pi_prcs_id    in flow_processes.prcs_id%type',
'  , pi_sbfl_id    in flow_subflows.sbfl_id%type ',
'  , pi_step_key   in flow_subflows.sbfl_step_key%type default null',
'  , pi_run        in flow_timers.timr_run%type default 1 -- 1 original, 2-> repeats',
'  , pi_timr_id    in flow_timers.timr_id%type default null -- only set on repeats',
'  )',
'  as',
'    l_parsed_ts           flow_timers.timr_start_on%type;',
'    l_parsed_duration_ym  flow_timers.timr_interval_ym%type;',
'    l_parsed_duration_ds  flow_timers.timr_interval_ds%type;',
'    l_repeat_times        flow_timers.timr_repeat_times%type;',
'    l_timer_def           t_timer_def;',
'  begin',
'    apex_debug.enter ',
'    ( ''start_timer''',
'    , ''prcs_id'', pi_prcs_id',
'    , ''sbfl_id'', pi_sbfl_id',
'    , ''step_key'', pi_step_key',
'    , ''timr_id (repeats)'', pi_timr_id',
'    , ''timer run'', pi_run',
'    );',
'    if pi_run = 1 and pi_timr_id is null then',
'      -- starting the first run of a new timer',
'      start_new_timer',
'      ( pi_prcs_id   => pi_prcs_id   ',
'      , pi_sbfl_id   => pi_sbfl_id  ',
'      , pi_step_key  => pi_step_key ',
'      );',
'    elsif pi_run > 1 and pi_timr_id is not null then',
'        -- starting a repeat cycle of a existing timer (on a new sbfl)',
'      start_repeat_timer',
'      ( pi_prcs_id   => pi_prcs_id   ',
'      , pi_sbfl_id   => pi_sbfl_id  ',
'      , pi_step_key  => pi_step_key ',
'      , pi_run       => pi_run',
'      , pi_timr_id   => pi_timr_id',
'      );  ',
'    else',
'        flow_errors.handle_instance_error',
'        ( pi_prcs_id        => pi_prcs_id',
'        , pi_sbfl_id        => pi_sbfl_id',
'        , pi_message_key    => ''timer-internal-error''',
'        , p0 => pi_sbfl_id         ',
'	      , p1 => pi_run',
'        , p2 => pi_timr_id',
'        );',
'        -- $F4AMESSAGE ''timer-internal-error'' || ''Timer internal error  for object %0. Type: %1; Value: %2''',
'    end if;',
'  end start_timer;',
'',
'/******************************************************************************',
'  RESCHEDULE_TIMER',
'*******************************************************************************/',
'',
'procedure reschedule_timer',
'(',
'    p_process_id    in flow_processes.prcs_id%type',
'  , p_subflow_id    in flow_subflows.sbfl_id%type',
'  , p_step_key      in flow_subflows.sbfl_step_key%type default null',
'  , p_is_immediate  in boolean default false',
'  , p_new_timestamp in flow_timers.timr_start_on%type default null',
'  , p_comment       in flow_instance_event_log.lgpr_comment%type default null',
')',
'is',
'  l_timer_rec       flow_timers%rowtype;',
'  e_bad_new_timer   exception;',
'  l_current_object  flow_subflows.sbfl_current%type;',
'begin',
'  apex_debug.enter ',
'  ( ''reschedule_timer''',
'  , ''Process ID'',  p_process_id',
'  , ''Subflow ID'', p_subflow_id',
'  , ''Step Key'', p_step_key',
'  , ''Immediate'', case when p_is_immediate then ''true'' else ''false'' end',
'  , ''New Timestamp'', p_new_timestamp',
'  );',
'  -- lock the timer',
'  select *',
'    into l_timer_rec',
'    from flow_timers timr ',
'   where timr.timr_prcs_id = p_process_id',
'     and timr.timr_sbfl_id = p_subflow_id',
'     for update wait 5',
'  ;',
'  if flow_engine_util.step_key_valid( pi_prcs_id  => p_process_id',
'                                    , pi_sbfl_id  => p_subflow_id',
'                                    , pi_step_key_supplied  => p_step_key',
'                                    , pi_step_key_required  => l_timer_rec.timr_step_key) then ',
'    if p_is_immediate then',
'      l_timer_rec.timr_start_on := systimestamp;',
'    elsif p_new_timestamp >= systimestamp then',
'      l_timer_rec.timr_start_on := p_new_timestamp;',
'    elsif not p_is_immediate  and p_new_timestamp is null then',
'      raise e_bad_new_timer;',
'    end if;',
'',
'    update flow_timers',
'       set timr_start_on = l_timer_rec.timr_start_on',
'     where timr_id = l_timer_rec.timr_id',
'       and timr_run = l_timer_rec.timr_run',
'    ;',
'',
'    select sbfl.sbfl_current',
'      into l_current_object',
'      from flow_subflows sbfl',
'     where sbfl.sbfl_id = p_subflow_id',
'       and sbfl.sbfl_prcs_id = p_process_id',
'    ;',
'',
'    flow_logging.log_instance_event',
'    ( p_process_id  => p_process_id',
'    , p_objt_bpmn_id  => l_current_object',
'    , p_event  => flow_constants_pkg.gc_prcs_event_rescheduled',
'    , p_comment  => p_comment',
'    );',
'',
'  end if;',
'exception',
'  when no_data_found then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id     => p_process_id',
'      , pi_sbfl_id     => p_subflow_id',
'      , pi_message_key => ''engine-util-sbfl-not-found''',
'      , p0 => p_subflow_id',
'      );',
'      -- $F4AMESSAGE ''engine-util-sbfl-not-found'' || ''Subflow ID supplied ( %0 ) not found. Check for process events that changed process flow (timeouts, errors, escalations).''  ',
'  when lock_timeout then',
'      flow_errors.handle_instance_error',
'      ( pi_prcs_id     => p_process_id',
'      , pi_sbfl_id     => p_subflow_id',
'      , pi_message_key => ''timeout_locking_subflow''',
'      , p0 => p_subflow_id',
'      );',
'      -- $F4AMESSAGE ''timeout_locking_subflow'' || ''Unable to lock subflow %0 as currently locked by another user.  Retry your transaction later.''  ',
'  when e_bad_new_timer then',
'        flow_errors.handle_instance_error',
'        ( pi_prcs_id        => p_process_id',
'        , pi_sbfl_id        => p_subflow_id',
'        , pi_message_key    => ''timer-incomplete-definition''',
'        , p0 => p_subflow_id       ',
'	      , p1 => case when p_is_immediate then ''true'' else ''false'' end',
'        , p2 => p_new_timestamp',
'        );',
'        -- $F4AMESSAGE ''timer-incomplete-definition'' || ''Incomplete timer definitions for object %0. Type: %1; Value: %2''',
'',
'end reschedule_timer;',
'',
'',
'',
'',
'/******************************************************************************',
'  EXPIRE_TIMER',
'******************************************************************************/',
'',
'  procedure expire_timer',
'  (',
'    pi_prcs_id in flow_processes.prcs_id%type',
'  , pi_sbfl_id in flow_subflows.sbfl_id%type ',
'  )',
'  is',
'  begin',
'    update flow_timers',
'       set timr_status = c_expired',
'     where timr_prcs_id = pi_prcs_id',
'       and timr_sbfl_id = pi_sbfl_id',
'       and timr_status not in (c_ended, c_expired, c_terminated)',
'    ;',
'  end expire_timer;',
'',
'/******************************************************************************',
'  TERMINATE_TIMER',
'******************************************************************************/',
'',
'  procedure terminate_timer',
'  (',
'    pi_prcs_id      in flow_processes.prcs_id%type',
'  , pi_sbfl_id      in flow_subflows.sbfl_id%type',
'  , po_return_code out number',
'  )',
'  is',
'  begin',
'    update flow_timers',
'       set timr_status = c_terminated',
'     where timr_prcs_id = pi_prcs_id',
'       and timr_sbfl_id = pi_sbfl_id',
'       and timr_status not in (c_ended, c_expired, c_terminated)',
'    ;',
'  end terminate_timer;',
'',
'/******************************************************************************',
'  TERMINATE_PROCESS_TIMERS',
'******************************************************************************/',
'',
'  procedure terminate_process_timers',
'  (',
'    pi_prcs_id      in flow_processes.prcs_id%type',
'  , po_return_code out number',
'  )',
'  is',
'  begin',
'    update flow_timers',
'       set timr_status = c_terminated',
'     where timr_prcs_id = pi_prcs_id',
'       and timr_status not in (c_ended, c_expired, c_terminated)',
'    ;',
'  end terminate_process_timers;',
'',
'/******************************************************************************',
'  TERMINATE_ALL_TIMERS',
'******************************************************************************/',
'',
'  procedure terminate_all_timers',
'  (',
'    po_return_code  out  number',
'  )',
'  is',
'  begin',
'    update flow_timers',
'       set timr_status = c_terminated',
'     where timr_status not in (c_ended, c_expired, c_terminated)',
'    ;',
'  end terminate_all_timers;',
'',
'/******************************************************************************',
'  delete_process_timers',
'    delete all the timers of a process.',
'******************************************************************************/',
'',
'  procedure delete_process_timers',
'  (',
'    pi_prcs_id      in flow_processes.prcs_id%type',
'  , po_return_code out number',
'  )',
'  is ',
'  begin',
'    delete',
'      from flow_timers',
'     where timr_prcs_id = pi_prcs_id',
'    ;',
'  end delete_process_timers;',
'',
'  procedure disable_scheduled_job',
'  as',
'  begin',
'    execute immediate',
'    q''[begin',
'    sys.dbms_scheduler.disable( name => ''apex_flow_step_timers_j'' );',
'    end;]'';',
'  end;',
'',
'  procedure enable_scheduled_job',
'  as',
'  begin',
'    execute immediate',
'    q''[begin',
'    sys.dbms_scheduler.enable( name => ''apex_flow_step_timers_j'' );',
'    end;]'';',
'  end;',
'',
'end flow_timers_pkg;',
'/',
'',
'create or replace package body flow_usertask_pkg',
'as',
'',
'  function get_url',
'  (',
'    pi_prcs_id  in flow_processes.prcs_id%type',
'  , pi_sbfl_id  in flow_subflows.sbfl_id%type',
'  , pi_objt_id  in flow_objects.objt_id%type',
'  , pi_step_key in flow_subflows.sbfl_step_key%type default null',
'  ) return varchar2',
'  as',
'    l_application flow_object_attributes.obat_vc_value%type;',
'    l_page        flow_object_attributes.obat_vc_value%type;',
'    l_request     flow_object_attributes.obat_vc_value%type;',
'    l_clear_cache flow_object_attributes.obat_vc_value%type;',
'    l_items       flow_object_attributes.obat_vc_value%type;',
'    l_values      flow_object_attributes.obat_vc_value%type;',
'  begin',
'    for rec in (',
'      select obat.obat_key',
'           , obat.obat_vc_value',
'        from flow_object_attributes obat',
'       where obat.obat_objt_id = pi_objt_id',
'         and obat.obat_key in ( flow_constants_pkg.gc_apex_usertask_application_id',
'                              , flow_constants_pkg.gc_apex_usertask_page_id',
'                              , flow_constants_pkg.gc_apex_usertask_request',
'                              , flow_constants_pkg.gc_apex_usertask_cache',
'                              , flow_constants_pkg.gc_apex_usertask_item',
'                              , flow_constants_pkg.gc_apex_usertask_value',
'                              )',
'    )',
'    loop',
'      case rec.obat_key',
'        when flow_constants_pkg.gc_apex_usertask_application_id then',
'          l_application := rec.obat_vc_value;',
'        when flow_constants_pkg.gc_apex_usertask_page_id then',
'          l_page := rec.obat_vc_value;',
'        when flow_constants_pkg.gc_apex_usertask_request then',
'          l_request := rec.obat_vc_value;',
'        when flow_constants_pkg.gc_apex_usertask_cache then',
'          l_clear_cache := rec.obat_vc_value;',
'        when flow_constants_pkg.gc_apex_usertask_item then',
'          l_items := rec.obat_vc_value;',
'        when flow_constants_pkg.gc_apex_usertask_value then',
'          l_values := rec.obat_vc_value;',
'          flow_process_vars.do_substitution ( pi_prcs_id  => pi_prcs_id',
'                                            , pi_sbfl_id  => pi_sbfl_id',
'                                            , pi_step_key => pi_step_key',
'                                            , pio_string  => l_values ',
'                                            );',
'        else',
'          null;',
'      end case;',
'    end loop;',
'',
'    return',
'      apex_page.get_url',
'      (',
'        p_application => l_application',
'      , p_page        => l_page',
'      , p_request     => l_request',
'      , p_clear_cache => l_clear_cache',
'      , p_items       => l_items',
'      , p_values      => l_values',
'      )',
'    ;',
'  end get_url;',
'',
'end flow_usertask_pkg;',
'/',
'',
'create or replace package body flow_plsql_runner_pkg',
'as',
'',
'  g_current_prcs_id flow_processes.prcs_id%type;',
'  g_current_sbfl_id flow_subflows.sbfl_id%type;',
'',
'  procedure init_globals',
'  (',
'    pi_prcs_id in flow_processes.prcs_id%type',
'  , pi_sbfl_id in flow_subflows.sbfl_id%type',
'  )',
'  as',
'  begin',
'    g_current_prcs_id := pi_prcs_id;',
'    g_current_sbfl_id := pi_sbfl_id;',
'  end init_globals;',
'',
'  function get_current_prcs_id',
'    return flow_processes.prcs_id%type',
'  as',
'  begin',
'    return flow_globals.process_id;',
'  end get_current_prcs_id;',
'',
'  function get_current_sbfl_id',
'    return flow_subflows.sbfl_id%type',
'  as',
'  begin',
'    return flow_globals.subflow_id;',
'  end get_current_sbfl_id;',
'',
'  procedure execute_plsql',
'  (',
'    p_plsql_code in clob',
'  )',
'  as',
'  begin',
'    apex_debug.enter ',
'    (''execute_plsql''',
'    , ''p_plsql_code'', dbms_lob.substr(p_plsql_code, 2000, 1)',
'    );',
'    -- Always wrap code into begin..end',
'    -- Developers are allowed to omit those if no declaration section needed',
'',
'    execute immediate',
'      ''begin'' || apex_application.lf ||',
'      p_plsql_code || apex_application.lf ||',
'      ''end;''',
'    ;',
'  end execute_plsql;',
'',
'  procedure run_task_script',
'  (',
'    pi_prcs_id  in flow_processes.prcs_id%type',
'  , pi_sbfl_id  in flow_subflows.sbfl_id%type',
'  , pi_objt_id  in flow_objects.objt_id%type',
'  , pi_step_key in flow_subflows.sbfl_step_key%type default null',
'  )',
'  as',
'    l_use_apex_exec boolean := false;',
'    l_plsql_code    flow_object_attributes.obat_clob_value%type;',
'    l_do_autobind   boolean := false;',
'',
'    l_sql_parameters apex_exec.t_parameters;',
'  begin',
'    apex_debug.enter ',
'    ( ''run_task_script''',
'    , ''pi_objt_id'', pi_objt_id',
'    );',
'',
'    flow_globals.set_context ',
'    ( pi_prcs_id  => pi_prcs_id',
'    , pi_sbfl_id  => pi_sbfl_id ',
'    , pi_step_key => pi_step_key',
'    );',
'',
'    for rec in ( select obat.obat_key',
'                      , obat.obat_vc_value',
'                      , obat.obat_clob_value',
'                   from flow_object_attributes obat',
'                  where obat.obat_objt_id = pi_objt_id',
'                    and obat.obat_key in ( flow_constants_pkg.gc_apex_task_plsql_engine',
'                                         , flo'))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'w_constants_pkg.gc_apex_task_plsql_code',
'                                         , flow_constants_pkg.gc_apex_task_plsql_auto_binds',
'                                         )',
'               )',
'    loop',
'      case rec.obat_key',
'        when flow_constants_pkg.gc_apex_task_plsql_engine then',
'          l_use_apex_exec := ( rec.obat_vc_value = flow_constants_pkg.gc_vcbool_true );',
'        when flow_constants_pkg.gc_apex_task_plsql_code then',
'          l_plsql_code := rec.obat_clob_value;',
'        when flow_constants_pkg.gc_apex_task_plsql_auto_binds then',
'          l_do_autobind := ( rec.obat_vc_value = flow_constants_pkg.gc_vcbool_true );',
'        else',
'          null;',
'      end case;',
'    end loop;',
'',
'    if l_use_apex_exec then',
'      apex_exec.execute_plsql',
'      (',
'        p_plsql_code      => l_plsql_code',
'      , p_auto_bind_items => l_do_autobind',
'      , p_sql_parameters  => l_sql_parameters',
'      );',
'    else',
'      execute_plsql',
'      (',
'        p_plsql_code => l_plsql_code',
'      );',
'    end if;',
'',
'  exception',
'    when e_plsql_script_requested_stop then ',
'      apex_debug.error',
'      (',
'        p_message => ''User script run by flow_plsql_runner_pkg.run_task_script requested stop.''',
'      , p0        => sqlerrm',
'      );',
'      raise e_plsql_script_requested_stop;     ',
'    when others then',
'      apex_debug.error',
'      (',
'        p_message => ''Error during flow_plsql_runner_pkg.run_task_script. SQLERRM: %s''',
'      , p0        => sqlerrm',
'      );',
'      raise e_plsql_script_failed;',
'  end run_task_script;',
'',
'end flow_plsql_runner_pkg;',
'/',
'',
'create or replace package body flow_logging',
'as',
'',
'  g_logging_level           flow_configuration.cfig_value%type; ',
'  g_logging_hide_userid     flow_configuration.cfig_value%type;',
'',
'  procedure log_instance_event',
'  ( p_process_id        in flow_subflow_log.sflg_prcs_id%type',
'  , p_objt_bpmn_id      in flow_objects.objt_bpmn_id%type default null',
'  , p_event             in flow_instance_event_log.lgpr_prcs_event%type ',
'  , p_comment           in flow_instance_event_log.lgpr_comment%type default null',
'  , p_error_info        in flow_instance_event_log.lgpr_error_info%type default null',
'  )',
'  is ',
'  begin ',
'    if g_logging_level in ( flow_constants_pkg.gc_config_logging_level_standard ',
'                          , flow_constants_pkg.gc_config_logging_level_secure',
'                          , flow_constants_pkg.gc_config_logging_level_full',
'                          ) ',
'    then',
'      insert into flow_instance_event_log',
'      ( lgpr_prcs_id ',
'      , lgpr_objt_id',
'      , lgpr_dgrm_id ',
'      , lgpr_prcs_name ',
'      , lgpr_business_id',
'      , lgpr_prcs_event',
'      , lgpr_timestamp ',
'      , lgpr_user ',
'      , lgpr_comment',
'      , lgpr_error_info',
'      )',
'      select prcs.prcs_id',
'          , p_objt_bpmn_id',
'          , prcs.prcs_dgrm_id',
'          , prcs.prcs_name',
'          , flow_process_vars.get_business_ref (p_process_id)  --- ',
'          , p_event',
'          , systimestamp ',
'          , case g_logging_hide_userid ',
'            when ''true'' then ',
'              null',
'            else ',
'              coalesce  ( sys_context(''apex$session'',''app_user'') ',
'                        , sys_context(''userenv'',''os_user'')',
'                        , sys_context(''userenv'',''session_user'')',
'                        )  ',
'            end ',
'          , p_comment',
'          , p_error_info',
'        from flow_processes prcs ',
'      where prcs.prcs_id = p_process_id',
'      ;',
'    end if;',
'  exception',
'    when others then',
'      flow_errors.handle_general_error',
'      ( pi_message_key => ''logging-instance-event''',
'      );',
'      -- $F4AMESSAGE ''logging-instance-event'' || ''Flows - Internal error while logging an Instance Event''',
'      raise;',
'  end log_instance_event;',
'',
'  procedure log_step_completion',
'  ( p_process_id        in flow_subflow_log.sflg_prcs_id%type',
'  , p_subflow_id        in flow_subflow_log.sflg_sbfl_id%type',
'  , p_completed_object  in flow_subflow_log.sflg_objt_id%type',
'  , p_notes             in flow_subflow_log.sflg_notes%type default null',
'  )',
'  is ',
'  begin',
'    -- current instance status / progress logging',
'    insert into flow_subflow_log sflg',
'    ( sflg_prcs_id',
'    , sflg_objt_id',
'    , sflg_sbfl_id',
'    , sflg_last_updated',
'    , sflg_notes',
'    )',
'    values ',
'    ( p_process_id',
'    , p_completed_object',
'    , p_subflow_id',
'    , sysdate',
'    , p_notes',
'    );',
'    -- system event logging',
'    if g_logging_level in ( flow_constants_pkg.gc_config_logging_level_standard ',
'                          , flow_constants_pkg.gc_config_logging_level_secure',
'                          , flow_constants_pkg.gc_config_logging_level_full',
'                          ) ',
'    then',
'      insert into flow_step_event_log',
'      ( lgsf_prcs_id ',
'      , lgsf_objt_id ',
'      , lgsf_sbfl_id ',
'      , lgsf_sbfl_process_level',
'      , lgsf_last_completed',
'      , lgsf_status_when_complete',
'      , lgsf_sbfl_dgrm_id',
'      , lgsf_was_current ',
'      , lgsf_started ',
'      , lgsf_completed',
'      , lgsf_reservation',
'      , lgsf_user',
'      , lgsf_comment',
'      )',
'      select sbfl.sbfl_prcs_id',
'           , p_completed_object',
'           , sbfl.sbfl_id',
'           , sbfl.sbfl_process_level',
'           , sbfl.sbfl_last_completed',
'           , sbfl.sbfl_status',
'           , sbfl.sbfl_dgrm_id',
'           , sbfl.sbfl_became_current',
'           , sbfl.sbfl_work_started',
'           , systimestamp',
'           , sbfl.sbfl_reservation',
'          , case g_logging_hide_userid ',
'            when ''true'' then ',
'              null',
'            else ',
'              coalesce  ( sys_context(''apex$session'',''app_user'') ',
'                        , sys_context(''userenv'',''os_user'')',
'                        , sys_context(''userenv'',''session_user'')',
'                        )  ',
'            end ',
'           , p_notes        ',
'        from flow_subflows sbfl ',
'       where sbfl.sbfl_id = p_subflow_id',
'      ;',
'    end if;',
'  exception',
'    when others then',
'      flow_errors.handle_general_error',
'      ( pi_message_key => ''logging-step-event''',
'      );',
'      -- $F4AMESSAGE ''logging-step-event'' || ''Flows - Internal error while logging a Step Event''',
'      raise;',
'  end log_step_completion;',
'',
'  procedure log_variable_event -- logs process variable set events',
'  ( p_process_id        in flow_subflow_log.sflg_prcs_id%type',
'  , p_var_name          in flow_process_variables.prov_var_name%type',
'  , p_objt_bpmn_id      in flow_objects.objt_bpmn_id%type default null',
'  , p_subflow_id        in flow_subflow_log.sflg_sbfl_id%type default null',
'  , p_expr_set          in flow_object_expressions.expr_set%type default null',
'  , p_var_type          in flow_process_variables.prov_var_type%type',
'  , p_var_vc2           in flow_process_variables.prov_var_vc2%type default null',
'  , p_var_num           in flow_process_variables.prov_var_num%type default null',
'  , p_var_date          in flow_process_variables.prov_var_date%type default null',
'  , p_var_clob          in flow_process_variables.prov_var_clob%type default null',
'  )',
'  as ',
'  begin ',
'    if g_logging_level in (  flow_constants_pkg.gc_config_logging_level_full ) then',
'      insert into flow_variable_event_log',
'      ( lgvr_prcs_id  ',
'      , lgvr_var_name	  ',
'      , lgvr_objt_id	  ',
'      , lgvr_sbfl_id	  ',
'      , lgvr_expr_set	  ',
'      , lgvr_timestamp  ',
'      , lgvr_var_type	  ',
'      , lgvr_var_vc2 	  ',
'      , lgvr_var_num  ',
'      , lgvr_var_date   ',
'      , lgvr_var_clob   ',
'      )',
'      values',
'      ( p_process_id',
'      , p_var_name          ',
'      , p_objt_bpmn_id    ',
'      , p_subflow_id ',
'      , p_expr_set ',
'      , systimestamp',
'      , p_var_type ',
'      , p_var_vc2 ',
'      , p_var_num  ',
'      , p_var_date ',
'      , p_var_clob  ',
'      );',
'    end if;',
'  exception',
'    when others then',
'      flow_errors.handle_general_error',
'      ( pi_message_key => ''logging-variable-event''',
'      );',
'      -- $F4AMESSAGE ''logging-variable-event'' || ''Flows - Internal error while logging a Variable Event''',
'      raise;',
'  end log_variable_event;',
'',
'  -- initialize logging parameters',
'',
'  begin ',
'    g_logging_level := flow_engine_util.get_config_value',
'                       ( p_config_key => flow_constants_pkg.gc_config_logging_level',
'                       , p_default_value => flow_constants_pkg.gc_config_default_logging_level',
'                       );',
'    g_logging_hide_userid := lower (flow_engine_util.get_config_value',
'                                      ( p_config_key => flow_constants_pkg.gc_config_logging_hide_userid ',
'                                      , p_default_value => flow_constants_pkg.gc_config_default_logging_hide_userid ',
'                                      )',
'                                   );',
'  ',
'    apex_debug.message ( p_message  => ''Logging level: %0''',
'                       , p0         => g_logging_level',
'                       , p_level    => 4 ',
'                       );',
'end flow_logging;',
'/',
'',
'create or replace package body flow_globals',
'as',
'',
'',
'  g_error_on_step  boolean := false;  ',
'  -- g_error_on_step starts false when every step is processed but is set true if an error',
'  -- occurs in the engine during processing.  It is then used to determine whether to ',
'  -- commit or rollback the engine transaction at the end of step processing',
'  g_is_recursive_step boolean;',
'  -- g_recursive_step is set to false for steps that are being performed by the user, and true',
'  -- for subsequent recursive steps that are performed by the engine (such as gateway steps, scriptTasks, etc.)',
'',
'',
'  procedure set_context',
'  ( pi_prcs_id  in flow_processes.prcs_id%type',
'  , pi_sbfl_id  in flow_subflows.sbfl_id%type default null',
'  , pi_step_key in flow_subflows.sbfl_step_key%type default null',
'  )',
'  is',
'  begin ',
'    process_id := pi_prcs_id;',
'    subflow_id := pi_sbfl_id;',
'    step_key   := pi_step_key;',
'  end set_context;',
'',
'  procedure set_step_error',
'  ( p_has_error  in boolean default false)',
'  is',
'  begin',
'    /*apex_debug.enter',
'    ( ''set_step_error''',
'    , ''p_has_error'', case when p_has_error then ''true'' else ''false'' end',
'    );*/',
'    g_error_on_step := p_has_error;',
'  end set_step_error;',
'',
'  function get_step_error return boolean',
'  is',
'  begin',
'    /*apex_debug.enter',
'    ( ''get_step_error''',
'    , ''g_error_on_step'', case when g_error_on_step then ''true'' else ''false'' end',
'    );*/',
'    return g_error_on_step;',
'  end get_step_error; ',
'',
'  procedure set_is_recursive_step',
'  ( p_is_recursive_step  in boolean default false)',
'  is',
'  begin',
'    g_is_recursive_step := p_is_recursive_step;',
'  end set_is_recursive_step;',
'',
'  function get_is_recursive_step return boolean',
'  is',
'  begin',
'    return g_is_recursive_step;',
'  end get_is_recursive_step; ',
'',
'end flow_globals;',
'/',
'',
'create or replace package body flow_errors',
'as ',
'',
'  g_logging_language        flow_configuration.cfig_value%type; ',
'',
'  procedure autonomous_write_to_instance_log',
'  ( pi_prcs_id        in flow_processes.prcs_id%type',
'  , pi_objt_bpmn_id   in flow_subflows.sbfl_current%type default null',
'  , pi_message        in flow_instance_event_log.lgpr_comment%type',
'  , pi_error_info     in flow_instance_event_log.lgpr_error_info%type',
'  )',
'  is',
'    pragma autonomous_transaction;',
'  begin',
'    -- add to instance_event_log',
'    flow_logging.log_instance_event',
'    ( p_process_id        => pi_prcs_id',
'    , p_objt_bpmn_id      => pi_objt_bpmn_id',
'    , p_event             => flow_constants_pkg.gc_prcs_event_error',
'    , p_comment           => pi_message',
'    , p_error_info        => pi_error_info',
'    );',
'    --  commit the autonomous transaction',
'    commit;',
'  end autonomous_write_to_instance_log;',
'',
'  procedure set_error_status',
'  ( pi_prcs_id        in flow_processes.prcs_id%type',
'  , pi_sbfl_id        in flow_subflows.sbfl_id%type',
'  )',
'  is ',
'  begin  ',
'      -- set sbfl & prcs error status',
'      update flow_subflows sbfl',
'        set sbfl.sbfl_status = flow_constants_pkg.gc_sbfl_status_error',
'          , sbfl.sbfl_last_update = systimestamp',
'      where sbfl.sbfl_id = pi_sbfl_id',
'      ;',
'      update flow_processes prcs',
'        set prcs.prcs_status = flow_constants_pkg.gc_prcs_status_error',
'          , prcs.prcs_last_update = systimestamp',
'      where prcs.prcs_id = pi_prcs_id',
'      ;   ',
'  end set_error_status;',
'',
'  function make_error_message',
'  ( pi_message_key    in flow_messages.fmsg_message_key%type ',
'  , pi_lang           in flow_messages.fmsg_lang%type',
'  , p0                in varchar2 default null',
'  , p1                in varchar2 default null',
'  , p2                in varchar2 default null',
'  , p3                in varchar2 default null',
'  , p4                in varchar2 default null',
'  , p5                in varchar2 default null',
'  , p6                in varchar2 default null',
'  , p7                in varchar2 default null',
'  , p8                in varchar2 default null',
'  , p9                in varchar2 default null',
'  ) return flow_messages.fmsg_message_content%type',
'  is',
'    l_message_content  flow_messages.fmsg_message_content%type;',
'    l_message          flow_instance_event_log.lgpr_comment%type;',
'  begin ',
'    -- get the message template in the correct language, or fall through to default language',
'    begin',
'      select fmsg.fmsg_message_content',
'        into l_message_content',
'        from flow_messages fmsg',
'       where fmsg.fmsg_message_key = pi_message_key',
'         and fmsg.fmsg_lang = pi_lang',
'      ;',
'    exception',
'      when no_data_found then',
'        begin',
'          select fmsg.fmsg_message_content',
'            into l_message_content',
'            from flow_messages fmsg',
'           where fmsg.fmsg_message_key = pi_message_key',
'             and fmsg.fmsg_lang = flow_constants_pkg.gc_config_default_logging_language',
'          ;',
'        exception',
'          when no_data_found then',
'            l_message_content := ''Missing Message Key ''||pi_message_key||'' language ''',
'                                 ||flow_constants_pkg.gc_config_default_logging_language;',
'          when others then',
'            l_message_content := ''Problem getting error message - check flow_messages loaded'';',
'        end;',
'      when others then',
'        l_message_content := ''Problem getting error message - check flow_messages loaded'';',
'    end;',
'    -- now make the error message in local language for log & apex_error',
'    l_message :=  apex_string.format',
'                  ( p_message => l_message_content',
'                  , p0 => p0',
'                  , p1 => p1',
'                  , p2 => p2',
'                  , p3 => p3',
'                  , p4 => p4',
'                  , p5 => p5',
'                  , p6 => p6',
'                  , p7 => p7',
'                  , p8 => p8',
'                  , p9 => p9',
'                  );',
'    return l_message;',
'  end make_error_message;',
'',
'  procedure handle_instance_error',
'  ( pi_prcs_id        in flow_processes.prcs_id%type',
'  , pi_sbfl_id        in flow_subflows.sbfl_id%type default null',
'  , pi_message_key    in varchar2',
'  , p0                in varchar2 default null',
'  , p1                in varchar2 default null',
'  , p2                in varchar2 default null',
'  , p3                in varchar2 default null',
'  , p4                in varchar2 default null',
'  , p5                in varchar2 default null',
'  , p6                in varchar2 default null',
'  , p7                in varchar2 default null',
'  , p8                in varchar2 default null',
'  , p9                in varchar2 default null',
'  )',
'  is',
'    l_message_content  flow_messages.fmsg_message_content%type;',
'    l_message          flow_instance_event_log.lgpr_comment%type;',
'    l_error_info       flow_instance_event_log.lgpr_error_info%type;',
'    l_current          flow_subflows.sbfl_current%type;',
'  begin ',
'    apex_debug.enter',
'    ( ''handle_instance_error''',
'    , ''pi_sbfl_id'', pi_sbfl_id',
'    , ''pi_message_key'', pi_message_key',
'    , ''is_recursive'' , case when flow_globals.get_is_recursive_step then ''true'' else ''false'' end',
'    );',
'    -- get the message template in the correct language, or fall through to default language',
'    -- for log & apex_error',
'    l_message :=  make_error_message',
'                  ( pi_message_key   => pi_message_key',
'                  , pi_lang          => g_logging_language',
'                  , p0               => p0',
'                  , p1               => p1',
'                  , p2               => p2',
'                  , p3               => p3',
'                  , p4               => p4',
'                  , p5               => p5',
'                  , p6               => p6',
'                  , p7               => p7',
'                  , p8               => p8',
'                  , p9               => p9',
'                  );',
'    -- get the error stack and step type',
'    l_error_info   := dbms_utility.format_error_stack;',
'    -- get the current step, if known & available',
'    begin',
'      if pi_sbfl_id is not null then',
'        select sbfl.sbfl_current',
'          into l_current',
'          from flow_subflows sbfl',
'        where sbfl.sbfl_id = pi_sbfl_id',
'        ;',
'      else',
'        l_current := null;',
'      end if;',
'    exception',
'      when others then',
'        l_current := null;',
'    end; ',
'    -- add to instance_event_log',
'    autonomous_write_to_instance_log',
'    ( pi_prcs_id        => pi_prcs_id',
'    , pi_objt_bpmn_id   => l_current',
'    , pi_message        => l_message',
'    , pi_error_info     => l_error_info',
'    );',
'    -- decide where to put error message',
'    if flow_globals.get_is_recursive_step then',
'      -- errors written to log, status already set to error in autonomous session',
'      flow_globals.set_step_error (p_has_error => true);',
'    else',
'      -- step belongs to current user''s current session - use apex_error',
'      apex_error.add_error',
'      ( p_message => l_message',
'      , p_display_location => apex_error.c_on_error_page',
'      );',
'    end if;',
'  end handle_instance_error;',
'',
'  procedure handle_general_error',
'  ( pi_message_key    in varchar2',
'  , p0                in varchar2 default null',
'  , p1                in varchar2 default null',
'  , p2                in varchar2 default null',
'  , p3                in varchar2 default null',
'  , p4                in varchar2 default null',
'  , p5                in varchar2 default null',
'  , p6                in varchar2 default null',
'  , p7                in varchar2 default null',
'  , p8                in varchar2 default null',
'  , p9                in varchar2 default null',
'  )',
'  is',
'    l_message_content  flow_messages.fmsg_message_content%type;',
'    l_message          flow_instance_event_log.lgpr_comment%type;',
'  begin ',
'    apex_debug.enter',
'    ( ''handle_instance_error''',
'    , ''pi_message_key'', pi_message_key',
'    );',
'    -- get the message template in the correct language, or fall through to default language',
'    -- for log & apex_error',
'    l_message :=  make_error_message',
'                  ( pi_message_key   => pi_message_key',
'                  , pi_lang          => g_logging_language',
'                  , p0               => p0',
'                  , p1               => p1',
'                  , p2               => p2',
'                  , p3               => p3',
'                  , p4               => p4',
'                  , p5               => p5',
'                  , p6               => p6',
'                  , p7               => p7',
'                  , p8               => p8',
'                  , p9               => p9',
'                  );',
'    apex_error.add_error',
'      ( p_message => l_message',
'      , p_display_location => apex_error.c_on_error_page',
'      );',
'  end handle_general_error;',
'',
'  -- initialize logging parameters',
'',
'  begin ',
'    g_logging_language := flow_engine_util.get_config_value',
'                       ( p_config_key => flow_constants_pkg.gc_config_logging_language',
'                       , p_default_value => flow_constants_pkg.gc_config_default_logging_language',
'                       );',
'',
'end flow_errors;',
'/',
'',
'create or replace package body flow_diagram',
'as',
'',
'  function create_diagram(',
'    pi_dgrm_name in flow_diagrams.dgrm_name%type,',
'    pi_dgrm_category in flow_diagrams.dgrm_category%type,',
'    pi_dgrm_version in flow_diagrams.dgrm_version%type)',
'  return flow_diagrams.dgrm_id%type',
'  as',
'    l_diagram_exists binary_integer;',
'    l_dgrm_id flow_diagrams.dgrm_id%type;',
'  begin',
'    select count(*)',
'      into l_diagram_exists',
'      from dual',
'     where exists(',
'           select null',
'             from flow_diagrams',
'            where dgrm_name = pi_dgrm_name',
'              and dgrm_version = pi_dgrm_version);',
'',
'    if l_diagram_exists = 0 then',
'      l_dgrm_id :=',
'        flow_bpmn_parser_pkg.upload_diagram(',
'          pi_dgrm_name     => pi_dgrm_name,',
'          pi_dgrm_version  => pi_dgrm_version,',
'          pi_dgrm_category => pi_dgrm_category,',
'          pi_dgrm_content  => flow_constants_pkg.gc_default_xml,',
'          pi_dgrm_status   => flow_constants_pkg.gc_dgrm_status_draft);',
'      flow_bpmn_parser_pkg.parse(',
'        pi_dgrm_id => l_dgrm_id);',
'    else',
'      raise diagram_exists;',
'    end if;',
'    return l_dgrm_id;',
'  end create_diagram;',
'',
'',
'  function add_diagram_version(',
'    pi_dgrm_id in flow_diagrams.dgrm_id%type,',
'    pi_dgrm_version in flow_diagrams.dgrm_version%type)',
'  return flow_diagrams.dgrm_id%type',
'  as',
'    l_dgrm_id flow_diagrams.dgrm_id%type;',
'    r_diagrams flow_diagrams%rowtype;',
'  begin',
'    select * ',
'      into r_diagrams',
'      from flow_diagrams',
'     where dgrm_id = pi_dgrm_id;',
'',
'    l_dgrm_id := flow_bpmn_parser_pkg.upload_diagram(',
'                   pi_dgrm_name => r_diagrams.dgrm_name,',
'                   pi_dgrm_version => pi_dgrm_version,',
'                   pi_dgrm_category => r_diagrams.dgrm_category,',
'                   pi_dgrm_content => r_diagrams.dgrm_content,',
'                   pi_dgrm_status => flow_constants_pkg.gc_dgrm_status_draft);',
'',
'    flow_bpmn_parser_pkg.parse(',
'      pi_dgrm_id => l_dgrm_id);',
'',
'    return l_dgrm_id;',
'  end add_diagram_version;',
'',
'',
'  function import_diagram(',
'    pi_dgrm_name in flow_diagrams.dgrm_name%type,',
'    pi_dgrm_category in flow_diagrams.dgrm_category%type,',
'    pi_dgrm_version in flow_diagrams.dgrm_version%type,',
'    pi_dgrm_content in flow_diagrams.dgrm_content%type,',
'    pi_force_overwrite in varchar2 default flow_constants_pkg.gc_false) ',
'  return flow_diagrams.dgrm_id%type',
'  as',
'    l_dgrm_id flow_diagrams.dgrm_id%type;',
'    l_dgrm_exists binary_integer;',
'    l_dgrm_status flow_diagrams.dgrm_status%type;',
'    l_diagram_unknown boolean;',
'    l_diagram_is_draft boolean;',
'  begin',
'    select count(*)',
'      into l_dgrm_exists',
'      from flow_diagrams',
'     where dgrm_name = pi_dgrm_name',
'       and dgrm_version = pi_dgrm_version;',
'',
'    if (l_dgrm_exists > 0) then',
'        select dgrm_status',
'        into l_dgrm_status',
'        from flow_diagrams',
'        where dgrm_name = pi_dgrm_name',
'        and dgrm_version = pi_dgrm_version;',
'    end if;',
'',
'    l_diagram_unknown := l_dgrm_exists = 0;',
'    l_diagram_is_draft := l_dgrm_exists > 0 ',
'                      and pi_force_overwrite = flow_constants_pkg.gc_true',
'                      and l_dgrm_status = flow_constants_pkg.gc_dgrm_status_draft;',
'',
'    if l_diagram_unknown or l_diagram_is_draft then',
'      l_dgrm_id := flow_bpmn_parser_pkg.upload_diagram(',
'        pi_dgrm_name => pi_dgrm_name,',
'        pi_dgrm_version => pi_dgrm_version,',
'        pi_dgrm_category => pi_dgrm_category,',
'        pi_dgrm_content => pi_dgrm_content,',
'        pi_force_overwrite => pi_force_overwrite = flow_constants_pkg.gc_true);',
'      flow_bpmn_parser_pkg.parse(',
'        pi_dgrm_id => l_dgrm_id);',
'    else',
'      if (l_dgrm_status = flow_constants_pkg.gc_dgrm_status_draft) then',
'        raise diagram_exists;',
'      else',
'        raise diagram_not_draft;',
'      end if;',
'    end if;',
'    return l_dgrm_id;',
'  end import_diagram;',
'  ',
'  ',
'  function diagram_is_modifiable(',
'    pi_dgrm_id in flow_diagrams.dgrm_id%type)',
'  return boolean',
'  as',
'    l_dgrm_status flow_diagrams.dgrm_status%type;',
'    l_is_draft boolean;',
'    l_is_released boolean;',
'    l_is_development boolean;',
'  begin',
'    if pi_dgrm_id is not null then',
'      select dgrm_status',
'        into l_dgrm_status',
'        from flow_diagrams',
'       where dgrm_id = pi_dgrm_id;',
'      ',
'      l_is_draft := l_dgrm_status = flow_constants_pkg.gc_dgrm_status_draft;',
'      l_is_released := l_dgrm_status = flow_constants_pkg.gc_dgrm_status_released;',
'      l_is_development := flow_engine_util.get_config_value(',
'                            p_config_key => ''engine_app_mode'',',
'                            p_default_value => flow_constants_pkg.gc_config_default_engine_app_mode)',
'                        = ''development'';',
'      return l_is_draft or (l_is_released and l_is_development);',
'    else',
'      return false;',
'    end if;',
'  end diagram_is_modifiable;',
'',
'',
'  procedure delete_diagram(',
'    pi_dgrm_id in flow_diagrams.dgrm_id%type,',
'    pi_cascade in varchar2)',
'  as',
'  begin',
'    if pi_cascade = flow_constants_pkg.gc_true then',
'      delete from flow_processes',
'       where prcs_dgrm_id = pi_dgrm_id;',
'    end if;',
'    delete from flow_diagrams ',
'     where dgrm_id = pi_dgrm_id;',
'  end delete_diagram;',
'',
'',
'  procedure edit_diagram(',
'    pi_dgrm_id in flow_diagrams.dgrm_id%type,',
'    pi_dgrm_name in flow_diagrams.dgrm_name%type,',
'    pi_dgrm_category in flow_diagrams.dgrm_category%type,',
'    pi_dgrm_version in flow_diagrams.dgrm_version%type)',
'  as',
'    l_dgrm_category flow_diagrams.dgrm_category%type;',
'  begin',
'    -- get existing category',
'    select dgrm_category',
'      into l_dgrm_category',
'      from flow_diagrams',
'     where dgrm_id = pi_dgrm_id;',
'',
'    if coalesce(l_dgrm_category, chr(10)) != coalesce(pi_dgrm_category, chr(10) ) then',
'      -- category has changed',
'      update flow_diagrams',
'         set dgrm_category = pi_dgrm_category',
'       where dgrm_name = (',
'             select dgrm_name ',
'               from flow_diagrams',
'              where dgrm_id = pi_dgrm_id);',
'    end if;',
'',
'    update flow_diagrams',
'       set dgrm_name = pi_dgrm_name,',
'           dgrm_version = pi_dgrm_version,',
'           dgrm_category = pi_dgrm_category',
'     where dgrm_id = pi_dgrm_id;',
'  end edit_diagram;',
'',
'',
'  procedure release_diagram(',
'    pi_dgrm_id in flow_diagrams.dgrm_id%type)',
'  as',
'  begin',
'    update flow_diagrams',
'       set dgrm_status = flow_constants_pkg.gc_dgrm_status_deprecated',
'     where dgrm_name = (',
'           select dgrm_name ',
'             from flow_diagrams',
'            where dgrm_id = pi_dgrm_id)',
'       and dgrm_status = flow_constants_pkg.gc_dgrm_status_released;',
'',
'    update flow_diagrams',
'       set dgrm_status = flow_constants_pkg.gc_dgrm_status_released',
'     where dgrm_id = pi_dgrm_id;',
'  end release_diagram;',
'',
'',
'  procedure deprecate_diagram(',
'    pi_dgrm_id in flow_diagrams.dgrm_id%type)',
'  as',
'  begin',
'    update flow_diagrams',
'       set dgrm_status = flow_constants_pkg.gc_dgrm_status_deprecated',
'     where dgrm_id = pi_dgrm_id;',
'  end deprecate_diagram;',
'',
'',
'  procedure archive_diagram(',
'    pi_dgrm_id in flow_diagrams.dgrm_id%type)',
'  as',
'  begin',
'    update flow_diagrams',
'       set dgrm_status = flow_constants_pkg.gc_dgrm_status_archived',
'     where dgrm_id = pi_dgrm_id;',
'  end archive_diagram;   ',
'',
'end flow_diagram;',
'/',
'create or replace package body flow_engine_app_api',
'as',
'',
'  procedure handle_ajax',
'  as ',
'    l_error_occured boolean := false;',
'    l_url           varchar2(4000);',
'    l_clob          clob;',
'    l_before_prcs_status flow_instances_vw.prcs_status%type;',
'    l_after_prcs_status flow_instances_vw.prcs_status%type;',
'    l_reload boolean := false;',
'  begin',
'    apex_debug.message( p_message => ''Action: %s'', p0 => apex_application.g_x01 );',
'    if instr(apex_application.g_x01, ''bulk-'') > 0 then',
'      apex_debug.message( p_message => ''This is a bulk action'');',
'      if ( upper(apex_application.g_x01) = ''BULK-COMPLETE-STEP'' or upper(apex_application.g_x01) = ''BULK-RESTART-STEP'' ) then',
'        select prcs_status',
'        into l_before_prcs_status',
'        from flow_instances_vw',
'        where prcs_id = apex_application.g_f01(1);',
'      end if;',
'      for i in apex_application.g_f01.first..apex_application.g_f01.last',
'      loop',
'        apex_debug.message( p_message => ''Action: %s, PRCS: %s'', p0 => apex_application.g_x01, p1 => apex_application.g_f01(i) );',
'        case upper(apex_application.g_x01)',
'          when ''BULK-RESET-FLOW-INSTANCE'' then',
'            flow_api_pkg.flow_reset( p_process_id => apex_application.g_f01(i), p_comment => apex_application.g_x02 );',
'          when ''BULK-START-FLOW-INSTANCE'' then',
'            flow_api_pkg.flow_start( p_process_id => apex_application.g_f01(i) );',
'          when ''BULK-DELETE-FLOW-INSTANCE'' then',
'            flow_api_pkg.flow_delete( p_process_id => apex_application.g_f01(i), p_comment => apex_application.g_x02 );',
'          when ''BULK-TERMINATE-FLOW-INSTANCE'' then ',
'            flow_api_pkg.flow_terminate ( p_process_id => apex_application.g_f01(i), p_comment => apex_application.g_x02 );',
'          when ''BULK-RESERVE-STEP'' then',
'            flow_api_pkg.flow_reserve_step',
'            (',
'              p_process_id => apex_application.g_f01(i)',
'            , p_subflow_id => apex_application.g_f02(i)',
'            , p_step_key   => apex_application.g_f03(i)',
'            , p_reservation => coalesce(apex_application.g_x02, V(''APP_USER''))',
'            );',
'          when ''BULK-RELEASE-STEP'' then',
'            flow_api_pkg.flow_release_step',
'            (',
'              p_process_id => apex_application.g_f01(i)',
'            , p_subflow_id => apex_application.g_f02(i)',
'            , p_step_key   => apex_application.g_f03(i)',
'            );        ',
'          when ''BULK-COMPLETE-STEP'' then',
'            flow_api_pkg.flow_complete_step',
'            (',
'              p_process_id => apex_application.g_f01(i)',
'            , p_subflow_id => apex_application.g_f02(i)',
'            , p_step_key   => apex_application.g_f03(i)',
'            );',
'          when ''BULK-RESTART-STEP'' then ',
'            flow_api_pkg.flow_restart_step ',
'            (',
'              p_process_id => apex_application.g_f01(i)',
'            , p_subflow_id => apex_application.g_f02(i)',
'            , p_step_key   => apex_application.g_f03(i)',
'            , p_comment       => apex_application.g_x02           ',
'            );',
'          when ''BULK-DELETE-PROCESS-VARIABLE'' then ',
'            flow_process_vars.delete_var(',
'              pi_prcs_id => apex_application.g_f01(i)',
'            , pi_var_name => apex_application.g_f02(i)',
'          );',
'          when ''BULK-RESCHEDULE-TIMER'' then',
'          flow_api_pkg.flow_reschedule_timer(',
'              p_process_id    => apex_application.g_f01(i)',
'            , p_su'))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'bflow_id    => apex_application.g_f02(i)',
'            , p_step_key      => apex_application.g_f03(i)',
'            , p_is_immediate  => case apex_application.g_x02 when ''Y'' then true end',
'            , p_new_timestamp => case apex_application.g_x03 when ''N'' then to_timestamp(apex_application.g_x06, v(''APP_NLS_TIMESTAMP_FORMAT'')) end',
'            , p_comment       => apex_application.g_x04',
'          );',
'          else',
'            apex_error.add_error',
'            (',
'              p_message          => ''Unknow action requested.''',
'            , p_display_location => apex_error.c_on_error_page',
'            );',
'        end case;',
'      end loop;',
'      if ( upper(apex_application.g_x01) = ''BULK-COMPLETE-STEP'' or upper(apex_application.g_x01) = ''BULK-RESTART-STEP'' ) then',
'        select prcs_status',
'        into l_after_prcs_status',
'        from flow_instances_vw',
'        where prcs_id = apex_application.g_f01(1);',
'',
'        if l_before_prcs_status != l_after_prcs_status then',
'          l_reload := true;',
'        end if;',
'      end if;',
'    else',
'      apex_debug.message( p_message => ''Action: %0, PRCS: %1, SBFL: %2, STEP KEY: %3'', p0 => apex_application.g_x01, ',
'      p1 => apex_application.g_x02, p2 => apex_application.g_x03 , p3 => apex_application.g_x04);',
'',
'      if ( upper( apex_application.g_x01 ) = ''COMPLETE-STEP'' or upper( apex_application.g_x01 ) = ''RESTART-STEP'' ) then',
'        select prcs_status',
'        into l_before_prcs_status',
'        from flow_instances_vw',
'        where prcs_id = apex_application.g_x02;',
'      end if;',
'',
'',
'      case upper(apex_application.g_x01)',
'        when ''RESET-FLOW-INSTANCE'' then',
'          flow_api_pkg.flow_reset( p_process_id => apex_application.g_x02, p_comment => apex_application.g_x03 );',
'        when ''START-FLOW-INSTANCE'' then',
'          flow_api_pkg.flow_start( p_process_id => apex_application.g_x02 );',
'        when ''DELETE-FLOW-INSTANCE'' then',
'          flow_api_pkg.flow_delete( p_process_id => apex_application.g_x02, p_comment => apex_application.g_x03 );',
'          l_url := apex_page.get_url(',
'                p_page => 10',
'              , p_clear_cache => 10',
'          );',
'        when ''RESERVE-STEP'' then',
'          flow_api_pkg.flow_reserve_step',
'          (',
'            p_process_id => apex_application.g_x02',
'          , p_subflow_id => apex_application.g_x03',
'          , p_step_key   => apex_application.g_x04',
'          , p_reservation => coalesce(apex_application.g_x05, V(''APP_USER''))',
'          );',
'        when ''TERMINATE-FLOW-INSTANCE'' then ',
'          flow_api_pkg.flow_terminate ( p_process_id => apex_application.g_x02, p_comment => apex_application.g_x03 );',
'        when ''RELEASE-STEP'' then',
'          flow_api_pkg.flow_release_step',
'          (',
'            p_process_id => apex_application.g_x02',
'          , p_subflow_id => apex_application.g_x03',
'          , p_step_key   => apex_application.g_x04',
'          );    ',
'        when ''COMPLETE-STEP'' then',
'          flow_api_pkg.flow_complete_step',
'          (',
'            p_process_id    => apex_application.g_x02',
'          , p_subflow_id    => apex_application.g_x03',
'          , p_step_key      => apex_application.g_x04',
'          );',
'        when ''RESTART-STEP'' then ',
'          flow_api_pkg.flow_restart_step ',
'          (',
'            p_process_id    => apex_application.g_x02',
'          , p_subflow_id    => apex_application.g_x03',
'          , p_step_key      => apex_application.g_x04',
'          , p_comment       => apex_application.g_x05       ',
'          );',
'        when ''FLOW-INSTANCE-AUDIT'' then',
'          l_url := apex_page.get_url(',
'              p_page => 14',
'            , p_items => ''P14_PRCS_ID,P14_TITLE''',
'            , p_values => apex_application.g_x02||'',''||apex_application.g_x03',
'            , p_clear_cache => ''RP''',
'          );',
'        when ''EDIT-FLOW-DIAGRAM'' then',
'          l_url := apex_page.get_url(',
'              p_page => 7',
'            , p_items => ''P7_DGRM_ID''',
'            , p_values => apex_application.g_x02',
'          );',
'        when ''OPEN-FLOW-INSTANCE-DETAILS'' then',
'          l_url := apex_page.get_url(',
'              p_page => 8',
'            , p_items => ''P8_PRCS_ID''',
'            , p_values => apex_application.g_x02',
'            , p_clear_cache => 8',
'          );',
'        when ''VIEW-FLOW-INSTANCE'' then',
'          l_url := apex_page.get_url(',
'              p_page => 12',
'            , p_items => ''P12_PRCS_ID''',
'            , p_values => apex_application.g_x02',
'            , p_clear_cache => 12',
'          );',
'        when ''PROCESS-VARIABLE'' then',
'          case apex_application.g_x04',
'            when ''VARCHAR2'' then',
'              flow_process_vars.set_var',
'              (',
'                pi_prcs_id   => apex_application.g_x02',
'              , pi_var_name  => apex_application.g_x03',
'              , pi_vc2_value => apex_application.g_x05',
'              );',
'            when ''NUMBER'' then',
'              flow_process_vars.set_var',
'              (',
'                pi_prcs_id   => apex_application.g_x02',
'              , pi_var_name  => apex_application.g_x03',
'              , pi_num_value => to_number(apex_application.g_x05)',
'              );',
'            when ''DATE'' then',
'              flow_process_vars.set_var',
'              (',
'                pi_prcs_id    => apex_application.g_x02',
'              , pi_var_name   => apex_application.g_x03',
'              , pi_date_value => to_date(apex_application.g_x05, v(''APP_DATE_TIME_FORMAT''))',
'              );',
'            when ''CLOB'' then',
'              for i in apex_application.g_f01.first..apex_application.g_f01.last',
'              loop',
'                l_clob := l_clob || apex_application.g_f01(i);',
'              end loop;',
'              flow_process_vars.set_var',
'              (',
'                pi_prcs_id    => apex_application.g_x02',
'              , pi_var_name   => apex_application.g_x03',
'              , pi_clob_value => l_clob',
'              );',
'            else',
'              null;',
'          end case;',
'        when ''DELETE-PROCESS-VARIABLE'' then',
'          flow_process_vars.delete_var(',
'            pi_prcs_id => apex_application.g_x02',
'            , pi_var_name => apex_application.g_x03',
'          );',
'        when ''RESCHEDULE-TIMER'' then',
'          flow_api_pkg.flow_reschedule_timer(',
'              p_process_id    => apex_application.g_x02',
'            , p_subflow_id    => apex_application.g_x03',
'            , p_step_key      => apex_application.g_x04',
'            , p_is_immediate  => case apex_application.g_x05 when ''Y'' then true end',
'            , p_new_timestamp => case apex_application.g_x05 when ''N'' then to_timestamp(apex_application.g_x06, v(''APP_NLS_TIMESTAMP_FORMAT'')) end',
'            , p_comment       => apex_application.g_x07',
'          );',
'        else',
'          apex_error.add_error',
'          (',
'            p_message          => ''Unknow action requested.''',
'          , p_display_location => apex_error.c_on_error_page',
'          );',
'      end case;',
'',
'      if ( upper( apex_application.g_x01 ) = ''COMPLETE-STEP'' or upper( apex_application.g_x01 ) = ''RESTART-STEP'' ) then',
'        select prcs_status',
'        into l_after_prcs_status',
'        from flow_instances_vw',
'        where prcs_id = apex_application.g_x02;',
'',
'        if l_before_prcs_status != l_after_prcs_status then',
'          l_reload := true;',
'        end if;',
'      end if;',
'',
'    end if;',
'',
'    apex_json.open_object;',
'    apex_json.write( p_name => ''success'', p_value => not apex_error.have_errors_occurred );',
'    if l_url is not null then',
'      apex_json.write( p_name => ''url'', p_value => l_url );',
'    end if;',
'    if l_reload then ',
'      apex_json.write( p_name => ''reloadPage'', p_value => true );',
'    end if;',
'    apex_json.close_all;',
'    ',
'  exception',
'      when others then',
'        l_error_occured := true;',
'  end handle_ajax;',
'',
'',
'  function get_objt_list(',
'    p_prcs_id in flow_processes.prcs_id%type',
'  ) return varchar2',
'  as',
'    l_objt_list varchar2(32767);',
'  begin    ',
'    select distinct listagg(OBJT_BPMN_ID, '':'') within group (order by OBJT_BPMN_ID)',
'      into l_objt_list',
'      from flow_objects',
'     where objt_dgrm_id = (',
'           select prcs_dgrm_id ',
'             from flow_processes',
'            where prcs_id = p_prcs_id)',
'       and objt_tag_name not in (''bpmn:process'', ''bpmn:textAnnotation'', ''bpmn:participant'', ''bpmn:laneSet'', ''bpmn:lane'');',
'    return l_objt_list;',
'  end get_objt_list;',
'',
'',
'  function get_objt_list(',
'    p_dgrm_id in flow_diagrams.dgrm_id%type',
'  ) return varchar2',
'  as',
'    l_objt_list varchar2(32767);',
'  begin    ',
'    select distinct listagg(OBJT_BPMN_ID, '':'') within group (order by OBJT_BPMN_ID)',
'      into l_objt_list',
'      from flow_objects',
'     where objt_dgrm_id = p_dgrm_id',
'       and objt_tag_name not in (''bpmn:process'', ''bpmn:textAnnotation'', ''bpmn:participant'', ''bpmn:laneSet'', ''bpmn:lane'');',
'    return l_objt_list;',
'  end get_objt_list;',
'  ',
'  ',
'  function get_objt_name(',
'    p_objt_bpmn_id in flow_objects.objt_bpmn_id%type',
'  ) return flow_objects.objt_name%type',
'  as',
'    l_objt_name flow_objects.objt_name%type;',
'  begin',
'    select distinct objt_name',
'      into l_objt_name',
'      from flow_objects',
'     where objt_bpmn_id = p_objt_bpmn_id;',
'    return l_objt_name;',
'  end get_objt_name;',
'',
'',
'  procedure set_viewport(',
'    p_display_setting in varchar2)',
'  as',
'  begin',
'    apex_util.set_preference(''VIEWPORT'', p_display_setting);',
'  end set_viewport;',
'    ',
'    ',
'  procedure add_viewport_script(',
'    p_item in varchar2',
'  )',
'  as',
'    l_script varchar2(4000 byte);',
'    l_display_setting varchar2(20 byte);',
'  begin',
'    -- Initialize',
'    l_display_setting := coalesce(apex_util.get_preference(''VIEWPORT''),''row'');',
'    apex_util.set_session_state(p_item, l_display_setting);',
'    ',
'    -- Set IDs for the the row divs',
'    l_script := q''#apex.jQuery("#flow-instances").parent().attr("id","col1");',
'                 apex.jQuery("#flow-monitor").parent().attr("id","col2");#'';',
'    ',
'    apex_javascript.add_onload_code(',
'      p_code => l_script,',
'      p_key  => ''init_viewport'');    ',
'    ',
'    l_script := null;',
'    -- Set view to side-by-side if preference = ''column''',
'    case l_display_setting ',
'      when ''column'' then    ',
'        l_script := q''#apex.jQuery( "#col1" ).addClass( "col-6" ).removeClass( [ "col-12", "col-end" ] );',
'                      apex.jQuery( "#col2" ).addClass( "col-6" ).removeClass( [ "col-12", "col-start" ] );',
'                      apex.jQuery("#col2").appendTo(apex.jQuery("#col1").parent());',
'                      apex.jQuery("#flow-monitor").show();',
'                      apex.region( "flow-monitor" ).refresh();#'';',
'      when ''window'' then',
'        l_script := q''#apex.jQuery("#flow-monitor").hide();',
'                       apex.jQuery( "#col1" ).addClass( [ "col-12", "col-start", "col-end" ] ).removeClass( "col-6" );',
'                       apex.jQuery( "#col2" ).addClass( [ "col-12", "col-start", "col-end" ] ).removeClass( "col-6" );#'';',
'    else',
'      null;',
'    end case;',
'    ',
'    if l_script is not null then',
'      apex_javascript.add_onload_code(',
'        p_code => l_script,',
'        p_key  => ''viewport'');',
'    end if;',
'  end add_viewport_script;',
'',
'',
'  procedure get_url_p13(',
'    pi_dgrm_id flow_diagrams.dgrm_id%type',
'  , pi_objt_id varchar2',
'  , pi_title varchar2',
'  )',
'  as',
'    l_url varchar2(2000);',
'  begin',
'    l_url := apex_page.get_url(',
'      p_application => v(''APP_ID''),',
'      p_page => ''13'',',
'      p_session => v(''APP_SESSION''),',
'      p_clear_cache => ''RP'',',
'      p_items => ''P13_DGRM_ID,P13_OBJT_ID,P13_TITLE'',',
'      p_values => pi_dgrm_id || '','' || pi_objt_id || '','' || pi_title',
'    );',
'    htp.p(l_url);',
'  end get_url_p13;',
'',
'',
'  procedure get_url_p13(',
'    pi_prcs_id flow_processes.prcs_id%type',
'  , pi_objt_id varchar2',
'  , pi_title varchar2',
'  )',
'  as',
'    l_url varchar2(2000);',
'    l_dgrm_id flow_processes.prcs_dgrm_id%type;',
'  begin',
'    select prcs_dgrm_id ',
'      into l_dgrm_id ',
'      from flow_processes ',
'    where prcs_id = pi_prcs_id;',
'      ',
'    l_url := apex_page.get_url(',
'      p_application => v(''APP_ID''),',
'      p_page => ''13'',',
'      p_session => v(''APP_SESSION''),',
'      p_clear_cache => ''RP'',',
'      p_items => ''P13_DGRM_ID,P13_PRCS_ID,P13_OBJT_ID,P13_TITLE'',',
'      p_values => l_dgrm_id || '','' || pi_prcs_id || '','' || pi_objt_id || '','' || pi_title',
'    );',
'    htp.p(l_url);',
'  end get_url_p13;',
'',
'',
'  /* page 2 */',
'  ',
'',
'  function check_flow_exists(',
'    p_dgrm_name    in flow_diagrams.dgrm_name%type,',
'    p_dgrm_version in flow_diagrams.dgrm_version%type)',
'  return boolean',
'  as',
'    l_exists binary_integer;',
'  begin',
'  ',
'    select count(*)',
'      into l_exists',
'      from dual',
'     where exists(',
'           select null',
'             from flow_diagrams',
'            where dgrm_name = p_dgrm_name',
'              and dgrm_version = p_dgrm_version);',
'    return l_exists = 1;',
'  end check_flow_exists;',
'  ',
'',
'  function validate_flow_exists_bulk(',
'    pi_dgrm_id_list in varchar2',
'  , pi_new_version  in flow_diagrams.dgrm_version%type',
'  ) return varchar2 ',
'  as',
'    l_err varchar2(4000 byte);',
'    l_flows apex_t_varchar2;',
'    l_dgrm_name flow_diagrams.dgrm_name%type;',
'  begin',
'    -- Initialize',
'    l_flows := apex_string.split(pi_dgrm_id_list, '':'');',
'    ',
'    for i in 1 .. l_flows.count loop',
'  ',
'      select dgrm_name ',
'        into l_dgrm_name',
'        from flow_diagrams',
'       where dgrm_id = l_flows(i);',
'',
'      if check_flow_exists(l_dgrm_name, pi_new_version) then',
'        l_err := apex_lang.message(',
'                   p_name => ''APP_ERR_MODEL_EXIST'',',
'                   p0 => l_dgrm_name,',
'                   p1 => pi_new_version);',
'      end if;',
'      exit when l_err is not null;',
'    end loop;',
'    return l_err;',
'  end validate_flow_exists_bulk;',
'',
'',
'  function validate_flow_exists(',
'    pi_dgrm_id     in flow_diagrams.dgrm_id%type',
'  , pi_new_version in flow_diagrams.dgrm_version%type ',
'  ) return varchar2 ',
'  as',
'    l_err varchar2(4000 byte);',
'    l_dgrm_name flow_diagrams.dgrm_name%type;',
'  begin',
'  ',
'    select dgrm_name',
'      into l_dgrm_name',
'      from flow_diagrams',
'     where dgrm_id = pi_dgrm_id;',
'    ',
'    if check_flow_exists(l_dgrm_name, pi_new_version) then',
'      l_err := apex_lang.message(',
'                 p_name => ''APP_ERR_MODEL_EXIST'',',
'                 p0 => l_dgrm_name,',
'                 p1 => pi_new_version);',
'    end if;',
'    return l_err;',
'  end validate_flow_exists;',
'  ',
'  ',
'  function validate_flow_copy_bulk(',
'    pi_dgrm_id_list in varchar2',
'  , pi_new_name     in flow_diagrams.dgrm_name%type ',
'  ) return varchar2 ',
'  as',
'    l_err varchar2(4000 byte);',
'    l_flows apex_t_varchar2;',
'    l_dgrm_name flow_diagrams.dgrm_name%type;',
'  begin',
'    -- Initialize',
'    l_flows := apex_string.split(pi_dgrm_id_list, '':'');',
'    ',
'    for i in 1 .. l_flows.count loop',
'  ',
'      select dgrm_name|| '' - '' || pi_new_name',
'        into l_dgrm_name',
'        from flow_diagrams ',
'       where dgrm_id = l_flows(i);',
'',
'      if check_flow_exists(l_dgrm_name, ''0'') then',
'        l_err := apex_lang.message(',
'                   p_name => ''APP_ERR_MODEL_EXIST'',',
'                   p0 => pi_new_name,',
'                   p1 => ''0'');',
'      end if;',
'      exit when l_err is not null;',
'    end loop;',
'    return l_err;',
'  end validate_flow_copy_bulk;',
'  ',
'  ',
'  function validate_flow_copy(',
'    pi_new_name in flow_diagrams.dgrm_name%type ',
'  ) return varchar2 ',
'  as',
'    l_err varchar2(4000);',
'  begin',
'    if check_flow_exists(pi_new_name, ''0'') then',
'      l_err := apex_lang.message(',
'                 p_name => ''APP_ERR_MODEL_EXIST'',',
'                 p0 => pi_new_name,',
'                 p1 => ''0'');',
'    end if;',
'    return l_err;',
'  end validate_flow_copy;',
'  ',
'  ',
'  procedure copy_selection_to_collection',
'  as',
'  begin',
'    apex_collection.create_or_truncate_collection(p_collection_name => ''C_SELECT'' );',
'    for i in 1 .. apex_application.g_f01.count() loop',
'      apex_collection.add_member(',
'         p_collection_name => ''C_SELECT'',',
'         p_n001 => apex_application.g_f01(i));',
'    end loop;',
'  end;',
'',
'  ',
'  procedure add_new_version(',
'    pi_dgrm_id_list in varchar2',
'  , pi_new_version  in flow_diagrams.dgrm_version%type ',
'  )',
'  as',
'    r_diagrams flow_diagrams%rowtype;',
'    l_flows apex_t_varchar2;',
'    l_dgrm_id flow_diagrams.dgrm_id%type;',
'  begin',
'    -- Initialize',
'    l_flows := apex_string.split(pi_dgrm_id_list, '':'');',
'    ',
'    for i in 1 .. l_flows.count loop',
'      select * ',
'        into r_diagrams',
'        from flow_diagrams',
'       where dgrm_id = l_flows(i);',
'',
'      l_dgrm_id := flow_diagram.import_diagram(',
'        pi_dgrm_name => r_diagrams.dgrm_name,',
'        pi_dgrm_version => pi_new_version,',
'        pi_dgrm_category => r_diagrams.dgrm_category,',
'        pi_dgrm_content => r_diagrams.dgrm_content);',
'    end loop;',
'    ',
'  end add_new_version;',
'  ',
'  ',
'  procedure copy_model(',
'    pi_dgrm_id_list in varchar2',
'  , pi_new_name     in flow_diagrams.dgrm_name%type ',
'  )',
'  as',
'    l_flows apex_t_varchar2;',
'    l_dgrm_id flow_diagrams.dgrm_id%type;',
'    r_diagrams flow_diagrams%rowtype;',
'  begin',
'    -- Initialize',
'    l_flows := apex_string.split(pi_dgrm_id_list, '':'');',
'    ',
'    for i in 1 .. l_flows.count loop',
'      select * ',
'        into r_diagrams',
'        from flow_diagrams',
'       where dgrm_id = l_flows(i);',
'',
'      l_dgrm_id := flow_diagram.import_diagram(',
'        pi_dgrm_name => case when l_flows.count() > 1 then r_diagrams.dgrm_name || '' - '' end || pi_new_name,',
'        pi_dgrm_version => ''0'',',
'        pi_dgrm_category => r_diagrams.dgrm_category,',
'        pi_dgrm_content => r_diagrams.dgrm_content);',
'',
'    end loop;',
'  end copy_model;',
'',
'',
'  /* page 4 */',
'',
'',
'  function get_region_title(',
'    pi_dgrm_id in flow_diagrams.dgrm_id%type',
'  )',
'  return varchar2 ',
'  as',
'    l_region_title varchar2(128 byte);',
'  begin',
'  ',
'    select dgrm_name || '' (Version: '' || dgrm_version || '', Status: '' || dgrm_status || '')'' as d',
'      into l_region_title',
'      from flow_diagrams',
'     where dgrm_id = pi_dgrm_id;',
'',
'    return l_region_title;',
'  end get_region_title;',
'',
'',
'  /* page 5 */',
'',
'',
'  function get_file_name',
'  (',
'    p_dgrm_id                  in number',
'  , p_include_version          in varchar2',
'  , p_include_status           in varchar2',
'  , p_include_category         in varchar2',
'  , p_include_last_change_date in varchar2',
'  , p_download_as              in varchar2',
'  ) ',
'  return varchar2',
'  is',
'    l_file_name        varchar2(300 char);',
'    l_dgrm_name        flow_diagrams.dgrm_name%type;',
'    l_dgrm_version     flow_diagrams.dgrm_version%type;',
'    l_dgrm_status      flow_diagrams.dgrm_status%type;',
'    l_dgrm_category    flow_diagrams.dgrm_category%type;',
'    l_dgrm_last_update flow_diagrams.dgrm_last_update%type;',
'  begin',
'    select dgrm_name',
'         , dgrm_version',
'         , dgrm_status',
'         , dgrm_category',
'         , dgrm_last_update',
'      into l_dgrm_name',
'         , l_dgrm_version',
'         , l_dgrm_status',
'         , l_dgrm_category',
'         , l_dgrm_last_update',
'      from flow_diagrams',
'     where dgrm_id = p_dgrm_id',
'    ;',
'    ',
'    l_file_name := to_char(sysdate, ''YYYYMMDD-HH24MI'') || ''_'' || l_dgrm_name;',
'    ',
'    if (p_include_category = ''Y'' and l_dgrm_category is not null) then',
'      l_file_name := l_file_name || ''_'' || l_dgrm_category;',
'    end if;',
'    if (p_include_status = ''Y'') then',
'      l_file_name := l_file_name || ''_'' || l_dgrm_status;',
'    end if;',
'    if (p_include_version = ''Y'') then',
'      l_file_name := l_file_name || ''_'' || l_dgrm_version;',
'    end if;',
'    if (p_include_last_change_date = ''Y'') then',
'      l_file_name := l_file_name || ''_'' || to_char(l_dgrm_last_update, ''YYYYMMDD-HH24MI'');',
'    end if;',
'    if (p_download_as = ''SQL'') then',
'      l_file_name := l_file_name || ''.sql'';',
'    end if;',
'    if (p_download_as = ''BPMN'') then',
'      l_file_name := l_file_name || ''.bpmn'';',
'    end if;',
'    return l_file_name;',
'  end get_file_name;',
'',
'',
'  function get_sql_script(',
'      p_dgrm_id in number',
'  ) ',
'  return clob',
'  is',
'    l_split_content apex_t_varchar2;',
'    l_sql clob;',
'    l_buffer varchar2(32767);  ',
'    r_diagrams flow_diagrams%rowtype;',
'  begin ',
'    dbms_lob.createtemporary(l_sql,true, DBMS_LOB.CALL);',
'    select *',
'    into r_diagrams',
'    from flow_diagrams',
'    where dgrm_id = p_dgrm_id;',
'    l_buffer := ''declare''||utl_tcp.crlf;',
'    l_buffer := l_buffer||''  l_dgrm_content clob;''||utl_tcp.crlf;',
'    l_buffer := l_buffer||''begin''||utl_tcp.crlf;',
'    dbms_lob.writeappend(l_sql, length(l_buffer), l_buffer);',
'    l_split_content := apex_string.split(p_str => replace(r_diagrams.dgrm_content,  apex_application.CRLF,  apex_application.LF));',
'    l_buffer := ''  l_dgrm_content := apex_string.join_clob(''||utl_tcp.crlf;',
'    l_buffer := l_buffer||''    apex_t_varchar2(''||utl_tcp.crlf;',
'    dbms_lob.writeappend(l_sql, length(l_buffer), l_buffer);',
'    for i in l_split_content.first..l_split_content.last',
'    loop',
'      if (i = l_split_content.first) then',
'        l_buffer := ''      q''''[''||l_split_content(i)||'']''''''||utl_tcp.crlf;',
'      else',
'        l_buffer := ''      ,q''''[''||l_split_content(i)||'']''''''||utl_tcp.crlf;',
'      end if;',
'      dbms_lob.writeappend(l_sql, length(l_buffer), l_buffer);',
'    end loop;',
'    l_buffer := ''  ));'';',
'    l_buffer := l_buffer||utl_tcp.crlf;',
'    l_buffer := l_buffer||''  flow_bpmn_parser_pkg.upload_and_parse(''||utl_tcp.crlf;',
'    l_buffer := l_buffer||''    pi_dgrm_name => ''||dbms_assert.enquote_literal(r_diagrams.dgrm_name)||'',''||utl_tcp.crlf;',
'    l_buffer := l_buffer||''    pi_dgrm_version => ''||dbms_assert.enquote_literal(r_diagrams.dgrm_version)||'',''||utl_tcp.crlf;',
'    l_buffer := l_buffer||''    pi_dgrm_category => ''||dbms_assert.enquote_literal(r_diagrams.dgrm_category)||'',''||utl_tcp.crlf;',
'    l_buffer := l_buffer||''    pi_dgrm_content => l_dgrm_content''||utl_tcp.crlf||'');''||utl_tcp.crlf;',
'    l_buffer := l_buffer||''end;''||utl_tcp.crlf||''/''||utl_tcp.crlf;',
'    dbms_lob.writeappend(l_sql, length(l_buffer), l_buffer);',
'    ',
'    return l_sql;',
'  end get_sql_script;',
'',
'  ',
'  function get_bmpn_content(',
'      p_dgrm_id in number',
'  ) return clob',
'  is ',
'    l_dgrm_content flow_diagrams.dgrm_content%type;',
'  begin',
'    select dgrm_content',
'    into l_dgrm_content',
'    from flow_diagrams',
'    where dgrm_id = p_dgrm_id;',
'    return l_dgrm_content;',
'  end get_bmpn_content;',
'',
'',
'  function sanitize_file_name(',
'    p_file_name in varchar2',
'  )',
'  return varchar2',
'  is',
'    l_file_name varchar2(300 char);',
'  begin',
'    l_file_name := p_file_name;',
'    l_file_name := replace(l_file_name, ''/'', ''_'');',
'    l_file_name := replace(l_file_name, ''\'', ''_'');',
'    l_file_name := replace(l_file_name, ''*'', ''_'');',
'    l_file_name := replace(l_file_name, '':'', ''_'');',
'    l_file_name := replace(l_file_name, ''?'', ''_'');',
'    l_file_name := replace(l_file_name, ''|'', ''_'');',
'    l_file_name := replace(l_file_name, ''<'', ''_'');',
'    l_file_name := replace(l_file_name, ''>'', ''_'');',
'    return l_file_name;',
'  end sanitize_file_name;',
'',
'',
'  function clob_to_blob(',
'    p_clob in clob',
'  )',
'  return blob',
'  is',
'    l_blob         BLOB;',
'    l_dest_offset  PLS_INTEGER := 1;',
'    l_src_offset   PLS_INTEGER := 1;',
'    l_lang_context PLS_INTEGER := DBMS_LOB.default_lang_ctx;',
'    l_warning      PLS_INTEGER := DBMS_LOB.warn_inconvertible_char;',
'  begin',
'    dbms_lob.createtemporary(',
'      lob_loc => l_blob,',
'      cache   => TRUE',
'    );',
'    dbms_lob.converttoblob(',
'      dest_lob      => l_blob,',
'      src_clob      => p_clob,',
'      amount        => DBMS_LOB.lobmaxsize,',
'      dest_offset   => l_dest_offset,',
'      src_offset    => l_src_offset, ',
'      blob_csid     => DBMS_LOB.default_csid,',
'      lang_context  => l_lang_context,',
'      warning       => l_warning',
'    );',
'  ',
'    return l_blob;',
'  end clob_to_blob;',
'',
'',
'  procedure download_file(',
'      p_dgrm_id     in number,',
'      p_file_name   in varchar2,',
'      p_download_as in varchar2,',
'      p_multi_file  in boolean default false',
'  )',
'  is ',
'    l_clob        clob;',
'    l_blob        blob;',
'    l_zip_file    blob;',
'    l_buffer      varchar2(32767);  ',
'    l_length      integer;',
'    l_desc_offset pls_integer := 1;',
'    l_src_offset  pls_integer := 1;',
'    l_lang        pls_integer := 0;',
'    l_warning     pls_integer := 0;',
'    l_mime_type   varchar2(100) := ''application/octet'';',
'    type r_flow   is record (',
'      dgrm_id       flow_diagrams.dgrm_id%type, ',
'      dgrm_name     flow_diagrams.dgrm_name%type,',
'      dgrm_version  flow_diagrams.dgrm_version%type,',
'      dgrm_status   flow_diagrams.dgrm_status%type,',
'      dgrm_category flow_diagrams.dgrm_category%type,',
'      filename      varchar2(300)',
'    );',
'    type t_flows  is table of r_flow index by binary_integer;',
'    l_flows       t_flows;',
'    l_flow        r_flow;',
'    l_json_array  json_array_t;',
'    l_json_object json_object_t;',
'    l_json_clob   clob;',
'    l_sql_clob    clob;',
'    l_file_name   varchar2(300);',
'  begin',
'    l_file_name := p_file_name;',
'    if ( p_download_as = ''BPMN'' ) then',
'      l_json_array := json_array_t(''[]'');',
'    end if;',
'    if ( p_multi_file ) then',
'      select ',
'        dgrm_id, ',
'        dgrm_name,',
'        dgrm_version,',
'        dgrm_status,',
'        dgrm_category,',
'        dgrm_name||''_''||dgrm_version as filename',
'      bulk collect into l_flows',
'      from flow_diagrams ',
'      where dgrm_id in (',
'        select n001',
'        from apex_collections',
'        where collection_name = ''C_SELECT''',
'      );',
'    else',
'      l_flow.dgrm_id := p_dgrm_id;',
'      l_flows(1)     := l_flow;',
'    end if;',
'    for i in 1..l_flows.count()',
'    loop',
'      if (p_download_as = ''BPMN'') then',
'          l_clob := get_bmpn_content(p_dgrm_id => l_flows(i).dgrm_id);',
'          apex_debug.message(dbms_lob.getlength(l_clob));',
'      end if;',
'      if (p_download_as = ''SQL'') then',
'        l_clob := get_sql_script(p_dgrm_id => l_flows(i).dgrm_id);',
'      end if;',
'      l_blob := clob_to_blob(l_clob);',
'      if ( p_multi_file ) then',
'        apex_zip.add_file (',
'          p_zipped_blob => l_zip_file,',
'          p_file_name   => sanitize_file_name(l_flows(i).filename) || ''.'' || lower(p_download_as),',
'          p_content     => l_blob',
'        );',
'        if ( p_download_as = ''BPMN'' ) then',
'          l_json_object := json_object_t(''{}'');',
'          l_json_object.put(''dgrm_name'' ,  l_flows(i).dgrm_name);',
'          l_json_object.put(''dgrm_version'' ,  l_flows(i).dgrm_version);',
'          l_json_object.put(''dgrm_status'' ,  l_flows(i).dgrm_status);',
'          l_json_object.put(''dgrm_category'' ,  l_flows(i).dgrm_category);',
'          l_json_object.put(''file'' ,  sanitize_file_name(l_flows(i).filename) || ''.bpmn'');',
'          l_json_array.append(l_json_object);',
'        elsif ( p_download_as = ''SQL'' ) then',
'          l_sql_clob := l_sql_clob||''@"''||sanitize_file_name(l_flows(i).filename) || ''.'' || lower(p_download_as)||''";''||utl_tcp.crlf;',
'        end if;',
'      end if;',
'    end loop;',
'    if ( p_multi_file ) then',
'      if ( p_download_as = ''BPMN'' ) then',
'        l_json_clob := treat(l_json_array as json_element_t).to_clob(); ',
'        l_blob := clob_to_blob(l_json_clob);',
'        apex_zip.add_file (',
'          p_zipped_blob => l_zip_file,',
'          p_file_name   => ''import.json'',',
'          p_content     => l_blob',
'        );',
'      elsif ( p_download_as = ''SQL'' ) then',
'        l_sql_clob := ''set define off;'' || utl_tcp.crlf || l_sql_clob || utl_tcp.crlf;',
'        l_blob := clob_to_blob(l_sql_clob);',
'        apex_zip.add_file (',
'          p_zipped_blob => l_zip_file,',
'          p_file_name   => ''import.sql'',',
'          p_content     => l_blob',
'        );',
'      end if;',
'      apex_zip.finish (',
'        p_zipped_blob => l_zip_file ',
'      );',
'      l_blob := l_zip_file;',
'      l_mime_type := ''application/zip'';',
'      l_file_name := ''F4A_''||to_char(systimestamp, ''YYYYMMDD_HH24MISS'')||''.zip'';',
'    end if;',
'    l_length := dbms_lob.getlength(l_blob);',
'    owa_util.mime_header(l_mime_type, false) ;',
'    htp.p(''Content-length: '' || l_length);',
'    htp.p(''Content-Disposition: attachment; filename="''||sanitize_file_name(l_file_name)||''"'');',
'    owa_util.http_header_close;',
'    wpg_docload.download_file(l_blob);',
'    apex_application.stop_apex_engine;',
'  end download_file;',
'',
'',
'  /* page 6 */',
'',
'',
'  function is_file_uploaded(',
'        pi_file_name in varchar2',
'    )',
'    return boolean',
'    is',
'        l_dgrm_content flow_diagrams.dgrm_content%type;',
'        l_err boolean := true;',
'    begin',
'        begin',
'            select to_clob(blob_content)',
'            into l_dgrm_content',
'            from apex_application_temp_files',
'            where name = pi_file_name;',
'        exception when no_data_found then',
'            l_err := false;',
'        end;',
' ',
'        return l_err;',
'    end is_file_uploaded;',
'    ',
'    ',
'    function is_valid_xml(',
'        pi_import_from  in varchar2,',
'        pi_dgrm_content in flow_diagrams.dgrm_content%type,',
'        pi_file_name    in varchar2',
'    )',
'    return boolean',
'    is',
'        l_dgrm_content flow_diagrams.dgrm_content%type;',
'        l_xmltype xmltype;',
'        l_err boolean := true;',
'    begin',
'        if (pi_import_from = ''text'') then',
'            l_dgrm_content := pi_dgrm_content;',
'        else',
'            select to_clob(blob_content)',
'            into l_dgrm_content',
'            from apex_application_temp_files',
'            where name = pi_file_name;',
'        end if;',
'        begin',
'            l_xmltype := xmltype.createXML(l_dgrm_content);',
'        exception when others then',
'            l_err := false;',
'        end;',
'        return l_err;',
'    end is_valid_xml;',
'    ',
'    ',
'    function is_valid_multi_file_archive(',
'        pi_file_name in varchar2',
'    )',
'    return varchar2',
'    is',
'        l_mime_type    apex_application_temp_files.mime_type%type;',
'        l_blob_content apex_application_temp_files.blob_content%type;',
'        l_error        varchar2(4000);',
'        l_files        apex_zip.t_files;',
'        l_found_json   boolean := false;',
'    begin',
'        select mime_type, blob_content',
'        into l_mime_type, l_blob_content',
'        from apex_application_temp_files',
'        where name = pi_file_name;',
'        if ( l_mime_type != ''application/zip'') then',
'            l_error := ''You should provide a valid Flows for APEX zip export file.'';',
'        else',
'            l_files := apex_zip.get_files(',
'                p_zipped_blob => l_blob_content',
'            );',
'            for i in 1..l_files.count loop',
'                apex_debug.message(l_files(i));',
'                if ( l_files(i) = ''import.json'' ) then',
'                    l_found_json := true;',
'                end if;',
'                exit when l_found_json;',
'            end loop;',
'            if ( l_found_json = false ) then',
'                l_error := ''Missing import.json file in the zip export file.'';',
'            end if;',
'        end if;',
'        return l_er'))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'ror;',
'    end is_valid_multi_file_archive;',
'    ',
'    ',
'    function upload_and_parse(',
'        pi_import_from     in varchar2,',
'        pi_dgrm_name       in flow_diagrams.dgrm_name%type,',
'        pi_dgrm_category   in flow_diagrams.dgrm_category%type,',
'        pi_dgrm_version    in flow_diagrams.dgrm_version%type,',
'        pi_dgrm_content    in flow_diagrams.dgrm_content%type,',
'        pi_file_name       in varchar2,',
'        pi_force_overwrite in varchar2',
'    ) return flow_diagrams.dgrm_id%type',
'    is',
'        l_dgrm_id flow_diagrams.dgrm_id%type;',
'        l_dgrm_content flow_diagrams.dgrm_content%type;',
'        l_dgrm_exists number;',
'    begin',
'        if (pi_import_from = ''text'') then',
'            l_dgrm_content := pi_dgrm_content;',
'        else',
'            select to_clob(blob_content)',
'            into l_dgrm_content',
'            from apex_application_temp_files',
'            where name = pi_file_name;',
'        end if;',
'            ',
'        l_dgrm_id := flow_diagram.import_diagram(',
'            pi_dgrm_name => pi_dgrm_name,',
'            pi_dgrm_version => pi_dgrm_version,',
'            pi_dgrm_category => pi_dgrm_category,',
'            pi_dgrm_content => l_dgrm_content,',
'            pi_force_overwrite => pi_force_overwrite);',
'        return l_dgrm_id;',
'    exception',
'      when flow_diagram.diagram_exists then',
'        apex_error.add_error(',
'            p_message => ''Model already exists.''',
'            , p_display_location => apex_error.c_on_error_page);',
'      when flow_diagram.diagram_not_draft then',
'        apex_error.add_error(',
'            p_message => ''Overwrite only possible for draft models.''',
'            , p_display_location => apex_error.c_on_error_page);',
'    end upload_and_parse;',
'    ',
'    ',
'    procedure multiple_flow_import(',
'        pi_file_name       in varchar2,',
'        pi_force_overwrite in varchar2',
'    )',
'    as',
'        l_dgrm_id       flow_diagrams.dgrm_id%type;',
'        l_dgrm_name     flow_diagrams.dgrm_name%type;',
'        l_dgrm_category flow_diagrams.dgrm_category%type;',
'        l_dgrm_version  flow_diagrams.dgrm_version%type;',
'        l_dgrm_content  flow_diagrams.dgrm_content%type;',
'        l_file          varchar2(300);',
'        l_json_array    json_array_t;',
'        l_json_object   json_object_t;',
'        l_blob_content  blob;',
'        l_json_file     blob;',
'        l_bpmn_file     blob;',
'        l_clob          clob;',
'    begin',
'        select blob_content',
'        into l_blob_content',
'        from apex_application_temp_files',
'        where name = pi_file_name;',
'        l_json_file := apex_zip.get_file_content(',
'            p_zipped_blob => l_blob_content,',
'            p_file_name   => ''import.json''',
'        );',
'        l_json_array := json_array_t.parse(l_json_file);',
'        for i in 0..l_json_array.get_size() - 1 loop',
'            l_json_object := treat(l_json_array.get(i) as json_object_t);',
'            l_dgrm_name     := l_json_object.get_String(''dgrm_name'');',
'            l_dgrm_version  := l_json_object.get_String(''dgrm_version'');',
'            l_dgrm_category := l_json_object.get_String(''dgrm_category'');',
'            l_dgrm_name     := l_json_object.get_String(''dgrm_name'');',
'            l_file          := l_json_object.get_String(''file'');   ',
'            l_bpmn_file := apex_zip.get_file_content(',
'                p_zipped_blob => l_blob_content,',
'                p_file_name   => l_file',
'            );',
'            select to_clob(l_bpmn_file)',
'            into l_clob',
'            from dual;',
'            ',
'            l_dgrm_id := upload_and_parse(',
'                  pi_import_from => ''text''',
'                , pi_dgrm_name => l_dgrm_name',
'                , pi_dgrm_category => l_dgrm_category',
'                , pi_dgrm_version => l_dgrm_version',
'                , pi_dgrm_content => l_clob',
'                , pi_file_name => null',
'                , pi_force_overwrite => pi_force_overwrite',
'            );',
'        end loop;',
'    end multiple_flow_import;',
'',
'',
'  /* page 7 */',
'  ',
'',
'  function validate_new_version(',
'    pi_dgrm_name    in flow_diagrams.dgrm_name%type',
'  , pi_dgrm_version in flow_diagrams.dgrm_version%type',
'  ) return varchar2',
'  as',
'    l_err varchar2(4000);',
'  begin',
'    ',
'    if (pi_dgrm_version is null) then',
'        l_err := apex_lang.message(p_name => ''APEX.PAGE_ITEM_IS_REQUIRED''); --''#LABEL# must have a value'';',
'    elsif check_flow_exists(pi_dgrm_name, pi_dgrm_version) then',
'        l_err := apex_lang.message(p_name => ''APP_ERR_MODEL_VERSION_EXIST'');',
'    end if;',
'    return l_err;',
'  end validate_new_version;',
'  ',
'',
'  procedure process_page_p7(',
'    pio_dgrm_id      in out nocopy flow_diagrams.dgrm_id%type,',
'    pi_dgrm_name     in flow_diagrams.dgrm_name%type,',
'    pi_dgrm_version  in flow_diagrams.dgrm_version%type,',
'    pi_dgrm_category in flow_diagrams.dgrm_category%type,',
'    pi_new_version   in flow_diagrams.dgrm_version%type,',
'    pi_cascade       in varchar2,',
'    pi_request       in varchar2)',
'  as',
'  begin',
'    case pi_request',
'      when ''CREATE'' then',
'        pio_dgrm_id := flow_diagram.create_diagram(',
'                         pi_dgrm_name => pi_dgrm_name,',
'                         pi_dgrm_category => pi_dgrm_category,',
'                         pi_dgrm_version => pi_dgrm_version);',
'      when ''SAVE'' then',
'        flow_diagram.edit_diagram(',
'          pi_dgrm_id => pio_dgrm_id,',
'          pi_dgrm_name => pi_dgrm_name,',
'          pi_dgrm_category => pi_dgrm_category,',
'          pi_dgrm_version => pi_dgrm_version);',
'      when ''DELETE'' then',
'        flow_diagram.delete_diagram(',
'          pi_dgrm_id => pio_dgrm_id,',
'          pi_cascade => pi_cascade);',
'      when ''ADD_VERSION'' then',
'        pio_dgrm_id := flow_diagram.add_diagram_version(',
'          pi_dgrm_id => pio_dgrm_id,',
'          pi_dgrm_version => pi_new_version);',
'      when ''RELEASE'' then',
'        flow_diagram.release_diagram(',
'          pi_dgrm_id => pio_dgrm_id);',
'      when ''DEPRECATE'' then',
'        flow_diagram.deprecate_diagram(',
'          pi_dgrm_id => pio_dgrm_id);',
'      when ''ARCHIVE'' then',
'        flow_diagram.archive_diagram(',
'          pi_dgrm_id => pio_dgrm_id);',
'      else',
'        raise_application_error(-20002, ''Unknown operation requested.'');',
'    end case;',
'  end process_page_p7;',
'  ',
'  ',
'  function get_page_title(',
'    pi_dgrm_id      in flow_diagrams.dgrm_id%type',
'  , pi_dgrm_name    in flow_diagrams.dgrm_name%type',
'  , pi_dgrm_version in flow_diagrams.dgrm_version%type',
'  ) return varchar2',
'  as',
'    l_page_title varchar2(128 byte);',
'  begin',
'    case ',
'    when pi_dgrm_id is null then ',
'      l_page_title := apex_lang.message(',
'                        p_name => ''APP_TITLE_NEW_MODEL''',
'                      );',
'    else ',
'      l_page_title := apex_lang.message(',
'                        p_name => ''APP_TITLE_MODEL'',',
'                        p0 => pi_dgrm_name,',
'                        p1 => pi_dgrm_version',
'                      );',
'    end case;',
'    return l_page_title;',
'  end get_page_title;',
'',
'',
'  /* page 8 */',
'',
'',
'  function check_is_date(',
'    pi_value       in varchar2,',
'    pi_format_mask in varchar2)',
'  return varchar2 ',
'  as',
'    l_dummy_date date;',
'  begin ',
'    l_dummy_date := to_date(pi_value, pi_format_mask);',
'    return flow_constants_pkg.gc_true;',
'  exception',
'    when others then  ',
'      return flow_constants_pkg.gc_false;',
'  end check_is_date;',
'',
'',
'  function check_is_number(',
'    pi_value in varchar2)',
'  return varchar2 ',
'  as',
'    l_dummy_number number;',
'  begin ',
'    l_dummy_number := to_number(pi_value);',
'    return flow_constants_pkg.gc_true;',
'  exception',
'    when others then  ',
'      return flow_constants_pkg.gc_false;',
'  end check_is_number;',
'  ',
'  ',
'  procedure pass_variable',
'  as',
'    l_prov_prcs_id  flow_process_variables.prov_prcs_id%type;',
'    l_prov_var_name flow_process_variables.prov_var_name%type;',
'    l_prov_var_type flow_process_variables.prov_var_type%type;',
'    l_prov_var_vc2  flow_process_variables.prov_var_vc2%type;',
'    l_prov_var_num  flow_process_variables.prov_var_num%type;',
'    l_prov_var_date flow_process_variables.prov_var_date%type;',
'    l_prov_var_clob flow_process_variables.prov_var_clob%type;',
'  begin',
'    -- Initialize',
'    l_prov_prcs_id := apex_application.g_x01;',
'    l_prov_var_name := apex_application.g_x02;',
'    l_prov_var_type := apex_application.g_x03;',
'    ',
'    case l_prov_var_type',
'      when ''VARCHAR2'' then',
'        l_prov_var_vc2 := flow_process_vars.get_var_vc2(',
'                            pi_prcs_id => l_prov_prcs_id,',
'                            pi_var_name =>l_prov_var_name);',
'      when ''NUMBER'' then',
'        l_prov_var_num := flow_process_vars.get_var_num(',
'                            pi_prcs_id => l_prov_prcs_id,',
'                            pi_var_name =>l_prov_var_name);',
'      when ''DATE'' then',
'        l_prov_var_date := flow_process_vars.get_var_date(',
'                             pi_prcs_id => l_prov_prcs_id,',
'                             pi_var_name =>l_prov_var_name);',
'      when ''CLOB'' then',
'          l_prov_var_clob := flow_process_vars.get_var_clob(',
'                               pi_prcs_id => l_prov_prcs_id,',
'                               pi_var_name =>l_prov_var_name);',
'    end case;',
'    ',
'    apex_json.open_object;',
'    apex_json.write( p_name => ''success'', p_value => not apex_error.have_errors_occurred );',
'    apex_json.write( p_name => ''vc2_value'', p_value => l_prov_var_vc2);',
'    apex_json.write( p_name => ''num_value'', p_value => to_char(l_prov_var_num));',
'    apex_json.write( p_name => ''date_value'', p_value => to_char(l_prov_var_date, v(''APP_DATE_TIME_FORMAT'')));',
'    apex_json.write( p_name => ''clob_value'', p_value => l_prov_var_clob);',
'    apex_json.close_all;',
'    ',
'  end pass_variable;',
'    ',
'  ',
'  function get_connection_select_option(',
'    pi_gateway in flow_objects.objt_bpmn_id%type',
'  , pi_prcs_id in flow_processes.prcs_id%type',
'  ) return varchar2',
'  as',
'    l_select_option flow_instance_gateways_lov.select_option%type;',
'  begin',
'    select select_option',
'      into l_select_option',
'      from flow_instance_gateways_lov',
'     where objt_bpmn_id = pi_gateway',
'       and prcs_id = pi_prcs_id;',
'    return l_select_option;',
'  end get_connection_select_option;',
'',
'',
'  /* page 9 */',
'  ',
'',
'  procedure set_settings(',
'    pi_logging_language          in flow_configuration.cfig_value%type',
'  , pi_logging_level             in flow_configuration.cfig_value%type',
'  , pi_logging_hide_userid       in flow_configuration.cfig_value%type',
'  , pi_engine_app_mode           in flow_configuration.cfig_value%type',
'  , pi_duplicate_step_prevention in flow_configuration.cfig_value%type',
'  )',
'  as',
'  begin',
'      flow_engine_util.set_config_value( p_config_key => ''logging_language'', p_value => pi_logging_language);',
'      flow_engine_util.set_config_value( p_config_key => ''logging_level'', p_value => pi_logging_level);',
'      flow_engine_util.set_config_value( p_config_key => ''logging_hide_userid'', p_value => pi_logging_hide_userid);',
'      flow_engine_util.set_config_value( p_config_key => ''engine_app_mode'', p_value => pi_engine_app_mode);',
'      flow_engine_util.set_config_value( p_config_key => ''duplicate_step_prevention'', p_value => pi_duplicate_step_prevention);',
'  end set_settings;',
'',
'',
'  /* page 11 */',
'',
'',
'  function create_instance(',
'    pi_dgrm_id      in flow_diagrams.dgrm_id%type',
'  , pi_prcs_name    in flow_processes.prcs_name%type',
'  , pi_business_ref in flow_process_variables.prov_var_vc2%type',
'  ) return flow_processes.prcs_id%type',
'  as',
'    l_prcs_id flow_processes.prcs_id%type;',
'  begin',
'    l_prcs_id := flow_api_pkg.flow_create( ',
'                   pi_dgrm_id   => pi_dgrm_id,',
'                   pi_prcs_name => pi_prcs_name);',
'    ',
'    if pi_business_ref is not null then',
'      flow_process_vars.set_var( ',
'        pi_prcs_id   => l_prcs_id,',
'        pi_var_name  => ''BUSINESS_REF'',',
'        pi_vc2_value => pi_business_ref);',
'    end if;',
'    return l_prcs_id; ',
'  end create_instance;',
'',
'',
'  /* page 12 */',
'  ',
'  ',
'  function get_prcs_name(',
'    pi_prcs_id in flow_processes.prcs_id%type',
'  ) return flow_processes.prcs_name%type',
'  as',
'    l_prcs_name flow_processes.prcs_name%type;',
'  begin',
'    select prcs_name ',
'      into l_prcs_name',
'      from flow_instances_vw ',
'     where prcs_id = pi_prcs_id;',
'    return l_prcs_name;',
'  end get_prcs_name;',
'  ',
'',
'  /* page 13 */',
'',
'',
'  function has_error(',
'    pi_prcs_id in flow_processes.prcs_id%type,',
'    pi_objt_id in flow_subflows.sbfl_current%type)',
'  return boolean ',
'  as',
'    l_has_error binary_integer;',
'  begin',
'    select count(*)',
'      into l_has_error',
'      from flow_subflows_vw',
'     where sbfl_prcs_id = pi_prcs_id ',
'       and sbfl_current = pi_objt_id',
'       and sbfl_status = ''error''',
'       and exists (',
'           select null',
'             from FLOW_P0013_INSTANCE_LOG_VW',
'            where lgpr_prcs_id = pi_prcs_id ',
'              and lgpr_objt_id = pi_objt_id);',
'              ',
'    return l_has_error = 1;',
'  end has_error;',
'',
'',
'end flow_engine_app_api;',
'/',
'',
'create or replace package body flow_theme_api ',
'as',
'  subtype small_char is varchar2(128 byte);',
'  ',
'  C_UNIVERSAL_THEME    constant number := 42;',
'  C_THEME_PLUGIN_CLASS constant small_char := ''THEME_PLUGIN_CLASS'';',
'  C_FLOWS              constant small_char := ''FLOWS'';',
'  C_FLOWS_DARK         constant small_char := ''FLOWS-DARK'';',
'  C_VITA               constant small_char := ''Vita'';',
'  C_VITA_DARK          constant small_char := ''Vita - Dark''; ',
'  C_LIGHT              constant small_char := ''light'';',
'  C_DARK               constant small_char := ''dark'';',
'  ',
'  /* Helper */',
'  function file_exists(',
'    p_file_name in varchar2',
'  ) return boolean',
'  as',
'    l_file_exists binary_integer;',
'  begin',
'    select count(*)',
'      into l_file_exists',
'      from dual',
'     where exists(',
'           select null',
'             from apex_application_static_files',
'            where file_name = p_file_name',
'              and application_id = apex_application.g_flow_id);',
'    return l_file_exists = 1;',
'  end file_exists;',
'  ',
'  function get_user_theme_preference(',
'    pi_theme_mode in varchar2',
'  ) return varchar2',
'  as',
'    l_theme_style_id apex_application_theme_styles.theme_style_id%type;',
'    l_theme_name     apex_application_theme_styles.name%type;',
'  begin',
'    l_theme_style_id := apex_theme.get_user_style(apex_application.g_flow_id, apex_application.g_user, C_UNIVERSAL_THEME);',
'    ',
'    select s.name',
'      into l_theme_name',
'      from apex_application_theme_styles s',
'      join apex_application_themes t',
'        on s.application_id = t.application_id',
'       and s.theme_number = t.theme_number',
'     where s.application_id = apex_application.g_flow_id',
'       and t.ui_type_name = ''DESKTOP''',
'       and s.theme_style_id = l_theme_style_id;',
'    return l_theme_name;',
'  exception',
'    when no_data_found then ',
'      return pi_theme_mode;',
'  end get_user_theme_preference;',
'  ',
'  ',
'  /* Interface */',
'  procedure switch_theme_mode(',
'    pi_request in varchar2',
'  ) ',
'  as',
'    l_theme_style_id     number;',
'    l_theme_name         small_char;',
'    l_theme_plugin_class small_char;',
'  begin',
'',
'    apex_util.set_preference (',
'        p_preference => ''THEME_MODE'',',
'        p_value      => ''static'',',
'        p_user       => apex_application.g_user',
'    );',
'    ',
'    case pi_request',
'      when ''LIGHT_MODE'' then ',
'        l_theme_name := C_VITA; ',
'        l_theme_plugin_class := C_FLOWS;',
'      when ''DARK_MODE'' then ',
'        l_theme_name := C_VITA_DARK; ',
'        l_theme_plugin_class := C_FLOWS_DARK;',
'      else null;',
'    end case;',
'    ',
'    select s.theme_style_id',
'      into l_theme_style_id',
'      from apex_application_theme_styles s',
'      join apex_application_themes t',
'        on s.application_id = t.application_id',
'       and s.theme_number = t.theme_number',
'     where s.application_id = apex_application.g_flow_id',
'       and t.ui_type_name = ''DESKTOP''',
'       and s.name = l_theme_name;',
'',
'    apex_theme.set_user_style (',
'      p_application_id => apex_application.g_flow_id',
'    , p_user           => apex_application.g_user',
'    , p_theme_number   => C_UNIVERSAL_THEME',
'    , p_id             => l_theme_style_id',
'    );',
'  ',
'    apex_theme.set_session_style(',
'      p_theme_number => C_UNIVERSAL_THEME',
'    , p_name         => l_theme_name',
'    );',
'    ',
'    apex_util.set_session_state(',
'      p_name  => C_THEME_PLUGIN_CLASS',
'    , p_value => l_theme_plugin_class',
'    );',
'  end switch_theme_mode;',
'',
'  procedure reset_theme_mode(',
'    pi_request in varchar2',
'  )',
'  as',
'    l_theme_style_id     number;',
'    l_theme_name         small_char;',
'    l_theme_plugin_class small_char;',
'  begin',
'',
'    apex_util.set_preference (',
'      p_preference => ''THEME_MODE''',
'    , p_value      => ''automatic''',
'    , p_user       => apex_application.g_user',
'    );',
'    ',
'    case pi_request ',
'      when ''RESET_LIGHT'' then ',
'        l_theme_name := C_VITA; ',
'        l_theme_plugin_class := C_FLOWS;',
'      when ''RESET_DARK'' then ',
'        l_theme_name := C_VITA_DARK; ',
'        l_theme_plugin_class := C_FLOWS_DARK;',
'      else null;',
'    end case;',
'',
'    select s.theme_style_id',
'      into l_theme_style_id',
'      from apex_application_theme_styles s, apex_application_themes t',
'     where s.application_id = t.application_id',
'       and s.theme_number = t.theme_number',
'       and s.application_id = apex_application.g_flow_id',
'       and t.ui_type_name = ''DESKTOP''',
'       and s.name = l_theme_name;',
'',
'     apex_theme.set_user_style (',
'        p_application_id => apex_application.g_flow_id',
'      , p_user           => apex_application.g_user',
'      , p_theme_number   => C_UNIVERSAL_THEME',
'      , p_id             => l_theme_style_id ',
'    );',
'    ',
'    apex_theme.set_session_style(',
'      p_theme_number => C_UNIVERSAL_THEME',
'    , p_name         => l_theme_name',
'    );',
'    ',
'    apex_util.set_session_state(',
'      p_name  => C_THEME_PLUGIN_CLASS',
'    , p_value => l_theme_plugin_class',
'    );',
'  end reset_theme_mode;',
'',
'  procedure set_init_theme_mode ',
'  as',
'    l_theme_style_id        number;',
'    l_theme_name            apex_application_theme_styles.name%type;',
'    l_theme_plugin_class    small_char;',
'    l_url                   varchar2(4000);',
'    l_theme_mode_preference small_char;',
'  begin',
'',
'    l_theme_mode_preference := apex_util.get_preference (',
'        p_preference => ''THEME_MODE'',',
'        p_user       => apex_application.g_user',
'    );',
'    ',
'    if l_theme_mode_preference = ''automatic'' then',
'        l_theme_name := v(''P9999_THEME_MODE'');',
'    end if;',
'    ',
'    if l_theme_name is null then',
'        begin',
'            select s.name',
'              into l_theme_name',
'              from apex_application_theme_styles s, apex_application_themes t',
'             where s.application_id = t.application_id',
'               and s.theme_number = t.theme_number',
'               and s.application_id = apex_application.g_flow_id',
'               and t.ui_type_name = ''DESKTOP''',
'               and s.theme_style_id = apex_theme.get_user_style(',
'                                        apex_application.g_flow_id',
'                                      , apex_application.g_user',
'                                      , C_UNIVERSAL_THEME',
'                                      );',
'        exception',
'            when no_data_found',
'            then l_theme_name := C_VITA;',
'        end;',
'    end if;',
'    ',
'    select s.theme_style_id',
'      into l_theme_style_id',
'      from apex_application_theme_styles s, apex_application_themes t',
'     where s.application_id = t.application_id',
'       and s.theme_number = t.theme_number',
'       and s.application_id = apex_application.g_flow_id',
'       and t.ui_type_name = ''DESKTOP''',
'       and s.name = l_theme_name;',
'',
'    apex_theme.set_user_style (',
'        p_application_id => apex_application.g_flow_id',
'      , p_user           => apex_application.g_user',
'      , p_theme_number   => C_UNIVERSAL_THEME',
'      , p_id            => l_theme_style_id ',
'    );',
'    ',
'    apex_theme.set_session_style(',
'      p_theme_number => C_UNIVERSAL_THEME',
'    , p_name => l_theme_name',
'    );',
'    ',
'    case l_theme_name ',
'      when C_VITA then l_theme_plugin_class := C_FLOWS;',
'      when C_VITA_DARK then l_theme_plugin_class := C_FLOWS_DARK;',
'      else null;',
'    end case;',
'    ',
'    apex_util.set_session_state(',
'        p_name => ''THEME_PLUGIN_CLASS'',',
'        p_value => l_theme_plugin_class',
'    );',
'  end set_init_theme_mode;',
'  ',
'  procedure css_tricks(',
'    pi_theme_plugin_class in varchar2',
'  )',
'  as',
'    l_user_style_id number;',
'    l_theme_mode        small_char;',
'    l_theme_css         small_char;',
'    l_directory         small_char;',
'    l_filename          small_char;',
'    l_filename_css      small_char;',
'    l_filename_minified small_char;',
'  begin',
'    -- Initialize',
'    l_theme_mode := case pi_theme_plugin_class when C_FLOWS then C_VITA else C_VITA_DARK end;',
'    ',
'    -- Overwrite l_theme_mode with user preference if it exists',
'    l_theme_mode := get_user_theme_preference(l_theme_mode);',
'    ',
'    l_theme_css := case l_theme_mode when C_VITA then C_LIGHT else C_DARK end;',
'',
'    -- load theme specific file',
'    l_directory := ''css/'';',
'    l_filename := ''flows4apex.'' || l_theme_css;',
'    l_filename_css := l_directory || l_filename || ''.css'';',
'    l_filename_minified := l_filename || ''#MIN#'';',
'',
'    if file_exists(l_filename_css) then   ',
'      apex_css.add_file(',
'        p_name      => l_filename_minified',
'      , p_directory => ''#APP_IMAGES#'' || l_directory',
'      );',
'    end if;',
'    ',
'    -- load version specific file',
'    select ''css/'' || substr(version_no, 1, 4) || ''/''',
'      into l_directory',
'      from apex_release;',
'    l_filename_css := l_directory || l_filename || ''.css'';',
'',
'    if file_exists(l_filename_css) then',
'      apex_css.add_file(',
'        p_name      => l_filename_minified',
'      , p_directory => ''#APP_IMAGES#'' || l_directory',
'      );',
'    end if;',
'    ',
'    -- load prism file',
'    apex_css.add_file(',
'      p_name      => ''prism'' || case l_theme_mode when C_VITA_DARK then ''.dark'' end ||''#MIN#''',
'    , p_directory => ''#APP_IMAGES#lib/prismjs/css/''',
'    ); ',
'  end css_tricks;',
'',
'end flow_theme_api;',
'/',
'create or replace package body flow_plugin_manage_instance as',
'',
'   procedure log_attributes(',
'      p_process  in  apex_plugin.t_process',
'    , p_plugin   in  apex_plugin.t_plugin',
'   )',
'   is',
'   begin',
'',
'      apex_debug.info(',
'           p_message => '' > Process plug-in attributes''',
'      );',
'      apex_debug.info(',
'           p_message => ''...Action: %s''',
'         , p0        => p_process.attribute_01',
'      );',
'      ',
'      apex_debug.info(',
'           p_message => ''...Flow %s define by: %s''',
'         , p0        => case ',
'                           when p_process.attribute_01 in ( ''create'', ''create_and_start'' ) then  ',
'                              ''Diagram''',
'                           else ',
'                              ''Instance ID''',
'                        end',
'         , p1        => p_process.attribute_03',
'      );',
'',
'      if p_process.attribute_03 = ''item'' then ',
'         apex_debug.info(',
'            p_message => ''......Item used: %s - Session state value: %s''',
'            , p0        => p_process.attribute_04',
'            , p1        => apex_util.get_session_state(p_item => p_process.attribute_02)',
'         );',
'      elsif p_process.attribute_03 = ''sql''  then',
'         apex_debug.info(',
'            p_message => ''......Query''',
'         );',
'         apex_debug.log_long_message(',
'              p_message => p_process.attribute_06',
'            , p_level   => apex_debug.c_log_level_info',
'         );',
'      elsif p_process.attribute_03 = ''static''  then',
'         apex_debug.info(',
'              p_message => ''......Static value: %s''',
'            , p0        => p_process.attribute_05',
'         );',
'      elsif p_process.attribute_03 = ''component'' then',
'        apex_debug.info(',
'            p_message => ''......Component Setting: %s''',
'            , p0        => p_plugin.attribute_01',
'         );',
'      end if;',
'',
'      if p_process.attribute_09 is not null then',
'         apex_debug.info(',
'            p_message => ''...Return Instance ID into: %s''',
'            , p0        => p_process.attribute_09',
'         );',
'      end if;',
'',
'      if p_process.attribute_01 in ( ''create'', ''create_and_start'' ) then',
'',
'         if p_process.attribute_08 is not null then',
'            apex_debug.info(',
'               p_message => ''...Process Variable BUSINESS_REF set with item: %s - Session State Value: %s''',
'               , p0        => p_process.attribute_08',
'               , p1        => apex_util.get_session_state( p_process.attribute_08 )',
'            );',
'         end if;',
'      end if;',
'',
'      if p_process.attribute_01 in ( ''create'', ''create_and_start'', ''start'' ) then',
'         apex_debug.info(',
'            p_message => ''...Set Process Variables: %s''',
'            , p0        => p_process.attribute_10',
'         );',
'         if p_process.attribute_10 = ''json'' then',
'            apex_debug.info(',
'               p_message => ''......JSON''',
'            );',
'            apex_debug.log_long_message(',
'               p_message => p_process.attribute_11',
'               , p_level   => apex_debug.c_log_level_info',
'            );',
'         elsif p_process.attribute_10 = ''sql'' then',
'            apex_debug.info(',
'               p_message => ''......Query''',
'            );',
'            apex_debug.log_long_message(',
'               p_message => p_process.attribute_12',
'               , p_level   => apex_debug.c_log_level_info',
'            );',
'         end if;',
'      end if;',
'',
'      apex_debug.info(',
'           p_message => '' < Process plug-in attributes''',
'      );',
'   end log_attributes;',
'',
'   function execution (',
'      p_process  in  apex_plugin.t_process',
'    , p_plugin   in  apex_plugin.t_plugin',
'   ) return apex_plugin.t_process_exec_result ',
'   as',
'      l_result          apex_plugin.t_process_exec_result;',
'',
'      --exceptions',
'      e_missing_version          exception;',
'      e_incorrect_variable_type  exception;',
'',
'      --attributes',
'      l_attribute1      p_process.attribute_01%type := p_process.attribute_01; -- Action (create/start/create_and_start/reset/delete)',
'      l_attribute2      p_process.attribute_02%type := p_process.attribute_02; -- Flow Instance Name',
'      l_attribute3      p_process.attribute_03%type := p_process.attribute_03; -- Select Flow using (static/item/sql/component)',
'      l_attribute4      p_process.attribute_04%type := p_process.attribute_04; -- APEX item(s) for Instance or Diagram',
'      l_attribute5      p_process.attribute_05%type := p_process.attribute_05; -- Static Text for Instance or Diagram',
'      l_attribute6      p_process.attribute_06%type := p_process.attribute_06; -- SQL Query for Instance or Diagram',
'      l_attribute7      p_process.attribute_07%type := p_process.attribute_07; -- Flow (Diagram) selection based on',
'      l_attribute8      p_process.attribute_08%type := p_process.attribute_08; -- Set Business Reference',
'      l_attribute9      p_process.attribute_09%type := p_process.attribute_09; -- Return Instance ID',
'      l_attribute10     p_process.attribute_10%type := p_process.attribute_10; -- Set Process Variables (json/sql)',
'      l_attribute11     p_process.attribute_11%type := p_process.attribute_11; -- JSON (variables)',
'      l_attribute12     p_process.attribute_12%type := p_process.attribute_12; -- SQL (variables)',
'',
'      l_g_attribute1    p_plugin.attribute_01%type  := p_plugin.attribute_01;  -- Global Flow',
'',
'      l_context                  apex_exec.t_context;',
'      l_dgrm_id                  flow_diagrams.dgrm_id%type;',
'      l_dgrm_name                flow_diagrams.dgrm_name%type;',
'      l_dgrm_version             flow_diagrams.dgrm_version%type;',
'      l_prcs_name                flow_processes.prcs_name%type;',
'      l_prcs_id                  flow_processes.prcs_id%type;',
'      l_json                     clob;',
'      l_process_variables        json_array_t;',
'      l_process_variables_count  number;',
'      l_process_variable         json_object_t;',
'      l_var_name                 varchar2(4000);',
'      l_var_type                 varchar2(4000);',
'      l_split_values             apex_t_varchar2;',
'',
'   begin',
'',
'      --debug',
'      log_attributes(',
'           p_plugin   => p_plugin',
'         , p_process  => p_process',
'      );',
'',
'      apex_debug.info(',
'         p_message => '' > Start %s instance.''',
'         , p0      => case l_attribute1',
'                         when ''start'' then ''starting''',
'                         when ''delete'' then ''deleting''',
'                         when ''reset'' then ''reseting''',
'                         when ''terminate'' then ''terminating''',
'                         when ''create'' then ''creating''',
'                         when ''create_and_start'' then ''creating and starting''',
'                      end  ',
'      );',
'',
'      if l_attribute3 = ''item'' then',
'         if l_attribute1 in ( ''start'', ''delete'', ''reset'', ''terminate'' ) then',
'            l_prcs_id  := apex_util.get_session_state( p_item => l_attribute4 );',
'         else',
'            --Flow is define by name only',
'            if l_attribute7 = ''name'' then',
'               l_dgrm_name := apex_util.get_session_state( p_item => l_attribute4 );',
'            --Flow is define by name and version',
'            elsif l_attribute7 = ''name_and_version'' then',
'               --Value is coma separated',
'               l_split_values  := apex_string.split( l_attribute4, '','' );',
'               --Check if item value contains two values otherwise raise error',
'               if (l_split_values.count != 2) then',
'                  raise e_missing_version;',
'               end if;',
'               l_dgrm_name     := apex_util.get_session_state(p_item => l_split_values(1));',
'               l_dgrm_version  := apex_util.get_session_state(p_item => l_split_values(2));',
'            -- Flow is define by id',
'            elsif l_attribute7 = ''id'' then',
'               --Add test number to raise error',
'               l_dgrm_id := apex_util.get_session_state( p_item => l_attribute4 );',
'            end if;',
'         end if;',
'   ',
'      elsif l_attribute3 = ''sql'' then',
'         l_context         := apex_exec.open_query_context(',
'            p_location   => apex_exec.c_location_local_db',
'         , p_sql_query  => l_attribute6',
'         );',
'',
'         while apex_exec.next_row(l_context) loop',
'            if l_attribute1 in ( ''start'', ''delete'', ''reset'', ''terminate'' ) then',
'               l_prcs_id  := apex_exec.get_number(l_context, 1);',
'            else',
'               if l_attribute7 in ( ''name'', ''name_and_version'' ) then',
'                  l_dgrm_name := apex_exec.get_varchar2( l_context, 1 );',
'                  -- Flow is define by name & version, second column contains flow version',
'                  if l_attribute7 = ''name_and_versio'))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'n'' then',
'                     l_dgrm_version := apex_exec.get_varchar2( l_context, 2 );',
'                  end if;',
'               else',
'                  -- Flow is define by id, first column contains flow id',
'                  l_dgrm_id := apex_exec.get_number( l_context, 1 );',
'               end if;',
'            end if;',
'         end loop;',
'         apex_exec.close(l_context);',
'',
'      elsif l_attribute3 = ''static'' then',
'         if l_attribute1 in ( ''start'', ''delete'', ''reset'', ''terminate'' ) then',
'            l_prcs_id := l_attribute5;',
'         else',
'            --Flow is define by name only',
'            if l_attribute7 = ''name'' then',
'               l_dgrm_name := l_attribute5;',
'            --Flow is define by name & version, coma separated',
'            elsif l_attribute7 = ''name_and_version'' then',
'               l_split_values  := apex_string.split( l_attribute5, '','');',
'               --Check if item value contains two values otherwise raise error',
'               if l_split_values.count != 2 then',
'                  raise e_missing_version;',
'               end if;',
'               l_dgrm_name     := l_split_values(1);',
'               l_dgrm_version  := l_split_values(2);',
'            -- Flow is define by id',
'            elsif l_attribute7 = ''id'' then',
'               l_dgrm_id := l_attribute5;',
'            end if;',
'         end if;',
'      elsif l_attribute3 = ''component'' then',
'         if l_attribute1 in ( ''start'', ''delete'', ''reset'', ''terminate'' ) then',
'            l_prcs_id := l_g_attribute1;',
'         else',
'            --Flow is define by name only',
'            if l_attribute7 = ''name'' then',
'               l_dgrm_name := l_g_attribute1;',
'            --Flow is define by name & version',
'            elsif l_attribute7 = ''name_and_version'' then',
'               l_split_values  := apex_string.split( l_g_attribute1, '','' );',
'               --Check if item value contains two values otherwise raise error',
'               if l_split_values.count != 2 then',
'                  raise e_missing_version;',
'               end if;',
'               l_dgrm_name     := l_split_values(1);',
'               l_dgrm_version  := l_split_values(2);',
'            -- Flow is define by id',
'            elsif l_attribute7 = ''id'' then',
'               l_dgrm_id := l_g_attribute1;',
'            end if;',
'         end if;',
'      end if;',
'      ',
'      if l_attribute1 = ''delete'' then',
'         -- Call API to delete the instance',
'         apex_debug.info(',
'            p_message => ''...Delete Flow Instance Id %s''',
'            , p0        => l_prcs_id',
'         );',
'         flow_api_pkg.flow_delete(',
'            p_process_id  => l_prcs_id',
'         );',
'      elsif l_attribute1 = ''start'' then',
'         -- Call API to start the instance',
'         apex_debug.info(',
'            p_message => ''...Start Flow Instance Id %s''',
'            , p0        => l_prcs_id',
'         );',
'         flow_api_pkg.flow_start(',
'            p_process_id  => l_prcs_id',
'         );',
'      elsif l_attribute1 = ''reset'' then',
'         -- Call API to reset the instance',
'         apex_debug.info(',
'            p_message => ''...Reset Flow Instance Id %s''',
'            , p0        => l_prcs_id',
'         );',
'         flow_api_pkg.flow_reset(',
'            p_process_id  => l_prcs_id',
'         );',
'      elsif l_attribute1 = ''terminate'' then',
'         -- Call API to terminate the instance',
'         apex_debug.info(',
'            p_message => ''...Terminate Flow Instance Id %s''',
'            , p0        => l_prcs_id',
'         );',
'         flow_api_pkg.flow_terminate(',
'            p_process_id  => l_prcs_id',
'         );',
'      elsif l_attribute1 in ( ''create'', ''create_and_start'' ) then',
'         apex_debug.info(',
'            p_message => ''...Retrieve FLow Instance Name''',
'         );',
'         l_prcs_name := l_attribute2;',
'',
'         --Create flow instance',
'         if l_attribute7 in ( ''name'', ''name_and_version'' ) then',
'            l_dgrm_name := trim( l_dgrm_name );',
'            l_dgrm_version := trim( l_dgrm_version );',
'               ',
'            apex_debug.info(',
'                 p_message => ''...Create Flow instance "%s" with diagram: %s %s''',
'               , p0        => l_prcs_name',
'               , p1        => l_dgrm_name',
'               , p2        => case when l_dgrm_version is not null then apex_string.format( p_message => ''(version %s)'', p0 => l_dgrm_version) end',
'            );',
'',
'            l_prcs_id :=',
'               flow_api_pkg.flow_create(',
'                 pi_dgrm_name     => l_dgrm_name',
'               , pi_dgrm_version  => l_dgrm_version',
'               , pi_prcs_name     => l_prcs_name',
'            );',
'         else',
'            apex_debug.info(',
'               p_message => ''...Create Flow instance "%s" with diagram id: %s''',
'               , p0      => l_prcs_name',
'               , p1      => l_dgrm_id',
'            );',
'',
'            l_prcs_id := flow_api_pkg.flow_create(',
'               pi_dgrm_id    => l_dgrm_id',
'            , pi_prcs_name  => l_prcs_name',
'            );',
'         end if;',
'',
'         apex_debug.info(',
'            p_message => '' < Flow instance %s created.''',
'            , p0      => l_prcs_id',
'         );',
'      end if;',
'',
'      apex_debug.info(',
'           p_message => '' > Additional actions.''',
'         , p0        => l_prcs_id',
'      );',
'',
'      -- Return instance id in the APEX item provided',
'      if ( l_attribute9 is not null ) then',
'         apex_debug.info(',
'            p_message => ''...Return Flow Instance Id into item "%s"''',
'         , p0        => l_attribute9',
'         );',
'         apex_util.set_session_state( l_attribute9, l_prcs_id );',
'      end if;',
'',
'      if l_attribute1 in ( ''create'', ''create_and_start'', ''start'' ) then',
'',
'         --Get JSON for process variables',
'         if ( l_attribute10 = ''json'' ) then',
'            l_json := l_attribute11;',
'         elsif ( l_attribute10 = ''sql'' ) then',
'            l_context := apex_exec.open_query_context(',
'               p_location   => apex_exec.c_location_local_db',
'            , p_sql_query  => l_attribute12',
'            );',
'',
'            while apex_exec.next_row(l_context) loop',
'               l_json := apex_exec.get_clob(l_context, 1);',
'            end loop;',
'            apex_exec.close(l_context);',
'         end if;',
'',
'         --Set process variables',
'         if ( l_attribute10 in (',
'                  ''json'', ''sql''',
'               ) ) then',
'            apex_debug.info(',
'               p_message => ''...Start setting Flow Instance Variable(s)''',
'            );',
'            l_process_variables        := json_array_t(l_json);',
'            l_process_variables_count  := l_process_variables.get_size();',
'            for object in 0..l_process_variables_count - 1 loop',
'               l_process_variable  := json_object_t(l_process_variables.get(object));',
'               l_var_name          := l_process_variable.get_string(''name'');',
'               l_var_type          := l_process_variable.get_string(''type'');',
'               case l_var_type',
'                  when ''varchar2'' then',
'                     apex_debug.info(',
'                        p_message => ''.....Name: %s - Type: %s - Value %s''',
'                        , p0 => l_var_name',
'                        , p1 => l_var_type',
'                        , p2 => l_process_variable.get_string(''value'')',
'                     );',
'                     flow_process_vars.set_var(',
'                        pi_prcs_id    => l_prcs_id',
'                     , pi_var_name   => l_var_name',
'                     , pi_vc2_value  => l_process_variable.get_string(''value'')',
'                     );',
'                  when ''number'' then',
'                     apex_debug.info(',
'                        p_message => ''......Name: %s - Type: %s - Value %s''',
'                        , p0 => l_var_name',
'                        , p1 => l_var_type',
'                        , p2 => l_process_variable.get_number(''value'')',
'                     );',
'                     flow_process_vars.set_var(',
'                        pi_prcs_id    => l_prcs_id',
'                     , pi_var_name   => l_var_name',
'                     , pi_num_value  => l_process_variable.get_number(''value'')',
'                     );',
'                  when ''date'' then',
'                     apex_debug.info(',
'                        p_message => ''......Name: %s - Type: %s - Value %s''',
'                        , p0 => l_var_name',
'                        , p1 => l_var_type',
'                        , p2 => l_process_variable.get_date(''value'')',
'                     );',
'                     flow_process_vars.set_var(',
'                        pi_prcs_id     => l_prcs_id',
'                     , pi_var_name    => l_var_name',
'                     , pi_date_value  => l_process_variable.get_date(''value'')',
'                     );',
'                  when ''clob'' then',
'                     apex_debug.info(',
'                        p_message => ''......Name: %s - Type: %s - Value %s''',
'                        , p0 => l_var_name',
'                        , p1 => l_var_type',
'                        , p2 => l_process_variable.get_clob(''value'')',
'                     );',
'                     flow_process_vars.set_var(',
'                        pi_prcs_id     => l_prcs_id',
'                     , pi_var_name    => l_var_name',
'                     , pi_clob_value  => l_process_variable.get_clob(''value'')',
'                     );',
'                  else',
'                     raise e_incorrect_variable_type;',
'               end case;',
'            end loop;',
'            apex_debug.info(',
'               p_message => ''...End setting Flow Instance Variable(s)''',
'            );',
'         end if;',
'',
'         if l_attribute1 in ( ''create'', ''create_and_start'' ) and l_attribute8 is not null then',
'            apex_debug.info(',
'               p_message => ''...Setting BUSINESS_REF Variable: "%s"''',
'            , p0        => apex_util.get_session_state(l_attribute8)',
'            );',
'            flow_process_vars.set_var(',
'               pi_prcs_id    => l_prcs_id',
'            , pi_var_name   => ''BUSINESS_REF''',
'            , pi_vc2_value  => apex_util.get_session_state(l_attribute8)',
'            );',
'         end if;',
'',
'         --Start flow instance',
'         if l_attribute1 = ''create_and_start'' then',
'            apex_debug.info(',
'               p_message => ''...Starting Flow Instance %s''',
'            , p0        => l_prcs_id',
'            );',
'            flow_api_pkg.flow_start(p_process_id => l_prcs_id);',
'         end if;',
'',
'      end if;',
'',
'      apex_debug.info(',
'            p_message => '' < Additional actions.''',
'            , p0      => l_prcs_id',
'         );',
'',
'      return l_result;',
'   exception ',
'      when e_missing_version then',
'         if apex_application.g_debug then',
'            apex_debug.error(',
'               p_message => ''-- Flows4apex - Plug-in configuration issue, diagram selection is done with name and version but version is not provided.''',
'            );',
'         end if;',
'         apex_error.add_error( ',
'              p_message => flow_api_pkg.message( p_message_key => ''plugin-model-no-version'', p_lang => apex_util.get_session_lang() )',
'            , p_display_location => apex_error.c_on_error_page',
'         );',
'      when e_incorrect_variable_type then',
'         if apex_application.g_debug then',
'            apex_debug.error(',
'               p_message => ''-- Flows4apex - Plug-in configuration issue, process variables JSON contains incorrect variable type.''',
'            );',
'         end if;',
'         apex_error.add_error( ',
'              p_message => flow_api_pkg.message( p_message_key => ''plugin-parsing-json-variables'', p_lang => apex_util.get_session_lang() )',
'            , p_display_location => apex_error.c_on_error_page',
'         );',
'   end execution;',
'   ',
'end flow_plugin_manage_instance;',
'/',
'',
'create or replace package body flow_plugin_manage_instance_step as',
'   ',
'   procedure log_attributes(',
'      p_process  in  apex_plugin.t_process',
'    , p_plugin   in  apex_plugin.t_plugin',
'   )',
'   is',
'   begin',
'      apex_debug.info(',
'           p_message => '' > Process plug-in attributes''',
'      );',
'      apex_debug.info(',
'           p_message => ''...Flow Instance, Subflow & Step Key define by: %s''',
'         , p0        => p_process.attribute_01',
'      );',
'',
'      if p_process.attribute_01 = ''item'' then ',
'         apex_debug.info(',
'            p_message => ''......Flow Instance Item used: %s - Session state value: %s''',
'            , p0        => p_process.attribute_02',
'            , p1        => apex_util.get_session_state(p_item => p_process.attribute_02)',
'         );',
'         apex_debug.info(',
'            p_message => ''......Subflow Item used: %s - Session state value: %s''',
'            , p0        => p_process.attribute_03',
'            , p1        => apex_util.get_session_state(p_item => p_process.attribute_03)',
'         );',
'         apex_debug.info(',
'            p_message => ''......Step Key Item used: %s - Session state value: %s''',
'            , p0        => p_process.attribute_12',
'            , p1        => apex_util.get_session_state(p_item => p_process.attribute_12)',
'         );',
'      elsif p_process.attribute_01 = ''sql''  then',
'         apex_debug.info(',
'            p_message => ''......Query''',
'         );',
'         apex_debug.log_long_message(',
'              p_message => p_process.attribute_04',
'            , p_level   => apex_debug.c_log_level_info',
'         );',
'      end if;',
'',
'      apex_debug.info(',
'           p_message => ''...Flow Instance action: %s''',
'         , p0        => p_process.attribute_05',
'      );',
'',
'      if ( p_process.attribute_05 = ''complete'' ) then',
'         apex_debug.info(',
'            p_message => ''...Set Gateway route?: %s''',
'            , p0        => p_process.attribute_06',
'         );',
'',
'         if ( p_process.attribute_06 = ''Y'' ) then',
'            if ( p_process.attribute_07 is not null ) then',
'               apex_debug.info(',
'                  p_message => ''......Gateway "%s"''',
'                  , p0        => p_process.attribute_07',
'               );',
'            else',
'               apex_debug.info(',
'                  p_message => ''......No Gateway define, next gateway will be used.''',
'               );',
'            end if;',
'         end if;',
'         apex_debug.info(',
'            p_message => ''......Route %s''',
'            , p0        => p_process.attribute_08',
'         );',
'',
'         apex_debug.info(',
'            p_message => ''...Auto branching?: %s''',
'            , p0        => p_process.attribute_09',
'         );',
'      elsif ( p_process.attribute_05 = ''reserve'' ) then',
'         apex_debug.info(',
'                 p_message => ''......Reserved for: %s''',
'               , p0        => p_process.attribute_10',
'            );',
'      end if;',
'',
'      if p_process.attribute_11 is not null then',
'         apex_debug.info(',
'            p_message => ''...Return Flow Instance ID and Subflow ID into: %s''',
'            , p0        => p_process.attribute_11',
'         );',
'      end if;',
'',
'      apex_debug.info(',
'           p_message => '' < Process plug-in attributes''',
'      );',
'   end log_attributes;',
'',
'   function execution (',
'      p_process  in  apex_plugin.t_process',
'    , p_plugin   in  apex_plugin.t_plugin',
'   ) return apex_plugin.t_process_exec_result ',
'   as',
'      l_result          apex_plugin.t_process_exec_result;',
'',
'      --exceptions',
'      e_no_gateway         exception;',
'      e_gateway_not_exists exception;',
'      e_no_flow            exception;',
'',
'      --attributes',
'      l_attribute1      p_process.attribute_01%type := p_process.attribute_01; -- Flow instance selection (APEX item/SQL)',
'      l_attribute2      p_process.attribute_02%type := p_process.attribute_02; -- Process ID (APEX item)',
'      l_attribute3      p_process.attribute_03%type := p_process.attribute_03; -- Subflow ID (APEX item)',
'      l_attribute4      p_process.attribute_04%type := p_process.attribute_04; -- SQL query (2 columns process id and subflow id)',
'      l_attribute5      p_process.attribute_05%type := p_process.attribute_05; -- Action (complete/reserve/release)',
'      l_attribute6      p_process.attribute_06%type := p_process.attribute_06; -- Set Gateway route? (Y/N)',
'      l_attribute7      p_process.attribute_07%type := p_process.attribute_07; -- Gateway ID',
'      l_attribute8      p_process.attribute_08%type := p_process.attribute_08; -- Route ID',
'      l_attribute9      p_process.attribute_09%type := p_process.attribute_09; -- Auto branching (Y/N)',
'      l_attribute10     p_process.attribute_10%type := p_process.attribute_10; -- Reservation ',
'      l_attribute11     p_process.attribute_11%type := p_process.attribute_11; -- Return Flow Instance and Subflow ID',
'      l_attribute12     p_process.attribute_12%type := p_process.attribute_12; -- Step Key  ',
'',
'      l_process_id      flow_processes.prcs_id%type;',
'      l_subflow_id      flow_subflows.sbfl_id%type;',
'      l_step_key        flow_subflows.sbfl_step_key%type;',
'      l_dgrm_id         flow_processes.prcs_dgrm_id%type;',
'      l_gateway_name    flow_objects.objt_bpmn_id%type;',
'      l_gateway_exists  number;',
'      l_context         apex_exec.t_context;',
'      l_url             varchar2(4000);',
'      l_split_items     apex_t_varchar2;',
'      l_col_count       pls_integer;',
'',
'       type flow_step_info is record (',
'           dgrm_id            flow_diagrams.dgrm_id%type',
'         , source_objt_tag    flow_objects.objt_tag_name%type',
'         , source_lane_id     flow_objects.objt_objt_lane_id%type',
'         , target_objt_id     flow_objects.objt_id%type',
'         , target_objt_ref    flow_objects.objt_bpmn_id%type',
'         , target_objt_tag    flow_objects.objt_tag_name%type',
'         , target_objt_subtag flow_objects.objt_sub_tag_name%type',
'         , target_lane_id     flow_objects.objt_objt_lane_id%type',
'      );',
'      l_step_info       flow_step_info;',
'',
'      l_reservation flow_subflows.sbfl_reservation%type;',
'   begin',
'',
'      --debug',
'      log_attributes(',
'           p_plugin  => p_plugin',
'         , p_process => p_process',
'      );',
'',
'      apex_debug.info(',
'         p_message => ''...Retrieve FLow Instance Id and Subflow Id''',
'      );',
'      -- Get process Id, subflow Id and Step key',
'      if ( l_attribute1 = ''item'' ) then',
'         l_process_id  := apex_util.get_session_state(p_item => l_attribute2);',
'         l_subflow_id  := apex_util.get_session_state(p_item => l_attribute3);',
'         l_step_key    := apex_util.get_session_state(p_item => l_attribute12);',
'      elsif ( l_attribute1 = ''sql'' ) then',
'         l_context         := apex_exec.open_query_context(',
'            p_location   => apex_exec.c_location_local_db',
'          , p_sql_query  => l_attribute4',
'         );',
'         l_col_count := apex_exec.get_column_count(l_context);',
'',
'         while apex_exec.next_row(l_context) loop',
'            l_process_id  := apex_exec.get_number(l_context, 1);',
'            l_subflow_id  := apex_exec.get_number(l_context, 2);',
'            if ( l_col_count = 3 ) then',
'               l_step_key    := apex_exec.get_varchar2(l_context, 3);',
'            end if;',
'         end loop;',
'         apex_exec.close(l_context);',
'      end if;',
'',
'      --Raise error if unable to find process id or subflow id',
'      if l_process_id is null or l_subflow_id is null then',
'         raise e_no_flow;',
'      end if;',
'',
'      --Raise error for step key if strict mode',
'',
'      if ( l_attribute5 = ''complete'' ) then',
'         -- Get step informations',
'         select prcs.prcs_dgrm_id',
'            , objt_source.objt_tag_name',
'            , objt_source.objt_objt_lane_id',
'            , conn.conn_tgt_objt_id',
'            , objt_target.objt_bpmn_id',
'            , objt_target.objt_tag_name',
'            , objt_target.objt_sub_tag_name',
'            , objt_target.objt_objt_lane_id',
'         into l_step_info',
'         from flow_connections conn',
'         join flow_objects objt_source',
'            on conn.conn_src_objt_id = objt_source.objt_id',
'            and conn.conn_dgrm_id = objt_source.objt_dgrm_id',
'         join flow_objects objt_target',
'            on conn.conn_tgt_objt_id = objt_target.objt_id',
'            and conn.conn_dgrm_id = objt_target.objt_dgrm_id',
'         join flow_processes prcs',
'            on prcs.prcs_dgrm_id = conn.conn_dgrm_id',
'         join flow_subflows sbfl',
'            on sbfl.sbfl_current = objt_source.objt_bpmn_id',
'            and sbfl.sbfl_prcs_id = prcs.prcs_id',
'         where conn.conn_tag_name = flow_constants_pkg.gc_bpmn_sequence_flow',
'            and prcs.prcs_id = l_process_id',
'            and sbfl.sbfl_id = l_subflow_id;',
'',
'         --Set the gateway route',
'         if ( l_attribute6 = ''Y'' ) then',
'            l_gateway_name := l_attribute7;',
'',
'            -- If attribute 6 is filled, check if gateway define exists',
'            if ( l_gateway_name is not null ) then',
'',
'               select count(*)',
'               into l_gateway_exists',
'               from flow_processes prcs',
'               join flow_objects obj on obj.objt_dgrm_id = prcs.prcs_dgrm_id',
'               where prcs.prcs_id = l_process_id',
'               and obj.objt_tag_name in (flow_constants_pkg.gc_bpmn_gateway_exclusive, flow_constants_pkg.gc_bpmn_gateway_inclusive)',
'               and obj.objt_bpmn_id = l_gateway_name;',
'',
'               if ( l_gateway_exists = 0) then',
'                  raise e_gateway_not_exists;',
'               end if;',
'            end if;',
'            ',
'            --Gateway attribute is not filled so we look at the next target object if it''s exclusive or inclusive gateway',
'            if (',
'               l_attribute7 is null and l_step_info.target_objt_tag in (',
'                        flow_constants_pkg.gc_bpmn_gateway_exclusive, flow_constants_pkg.gc_bpmn_gateway_inclusive',
'                     )',
'            ) then',
'               l_gateway_name := l_step_info.target_objt_ref;',
'            end if;',
'',
'            if ( l_gateway_name is not null ) then',
'',
'               apex_debug.info(',
'                  p_message => ''...Setting Flow Instance Variable "%s" value "%s"''',
'                  , p0      => l_gateway_name || '':route''',
'                  , p1      => l_attribute8',
'               );',
'',
'               flow_process_vars.set_var(',
'                  pi_prcs_id    => l_process_id',
'               , pi_var_name   => l_gateway_name || '':route''',
'               , pi_vc2_value  => l_attribute8',
'               );',
'            else',
'               raise e_no_gateway;',
'            end if;',
'         end if;',
'',
'         apex_debug.info(',
'              p_message => ''...Complete Step - Flow Instance Id %s - Subflow Id %s - Step Key %s''',
'            , p0        => l_process_id',
'            , p1        => l_subflow_id',
'            , p2        => l_step_key',
'         );',
'         -- Call API to complete the step',
'         flow_api_pkg.flow_complete_step(',
'            p_process_id  => l_process_id',
'         , p_subflow_id  => l_subflow_id',
'         , p_step_key    => l_step_key',
'         );',
'',
'         -- Auto-branching',
'         -- Only if next object is a user task and it''s on the same lane than the current step',
'         if (',
'            l_attribute9 = ''Y'' and l_step_info.target_objt_tag = flow_constants_pkg.gc_bpmn_usertask and ( ( l_step_info.source_lane_id =',
'            l_step_info.target_lane_id ) or (',
'               l_step_info.source_lane_id is null and l_step_info.target_lane_id is null',
'            ) )',
'         ) then',
'            -- Get APEX page url',
'            l_url :=',
'               flow_usertask_pkg.get_url(',
'                  pi_prcs_id  => l_process_id',
'               , pi_sbfl_id  => l_subflow_id',
'               , pi_objt_id  => l_step_info.target_objt_id',
'               );',
'            apex_debug.info(',
'                 p_message => ''...Redirecting to %s''',
'               , p0        => l_url',
'            );',
'            -- Redirect',
'            apex_util.redirect_url(p_url => l_url);',
'         end if;',
'',
'      elsif ( l_attribute5 = ''reserve'' ) then',
'         l_reservation := l_attribute10;',
'',
'         apex_debug.info(',
'              p_message => ''...Reserve Step - Flow Instance Id %s - Subflow Id %s - Step Key %s''',
'            , p0        => l_process_id',
'            , p1        => l_subflow_id',
'            , p2        => l_step_key',
'         );',
'',
'         flow_api_pkg.flow_reserve_step(',
'            p_process_id    => l_process_id',
'            , p_subflow_id  => l_subflow_id',
'            , p_step_key    => l_step_key',
'            , p_reservation => l_reservation',
'         );',
'',
'      elsif ( l_attribute5 = ''release'' ) then',
'         apex_debug.info(',
'              p_message => ''...Release Step - Flow Instance Id %s - Subflow Id %s - Step Key %s''',
'            , p0        => l_process_id',
'            , p1        => l_subflow_id',
'            , p2        => l_step_key',
'         );',
'',
'         flow_api_pkg.flow_release_step(',
'              p_process_id => l_process_id',
'            , p_subflow_id => l_subflow_id',
'            , p_step_key   => l_step_key',
'         );',
'      elsif ( l_attribute5 = ''start'' ) then',
'         apex_debug.info(',
'              p_message => ''...Start Step - Flow Instance Id %s - Subflow Id %s - Step Key %s''',
'            , p0        => l_process_id',
'            , p1        => l_subflow_id',
'            , p2        => l_step_key',
'         );',
'',
'         flow_api_pkg.flow_start_step(',
'              p_process_id => l_process_id',
'            , p_subflow_id => l_subflow_id',
'            , p_step_key   => l_step_key',
'         );',
'      end if;',
'',
'      -- Return Flow Instance Id and Subflow Id in the APEX items provided',
'      if ( l_attribute11 is not null ) then',
'         l_split_items := apex_string.split( l_attribute11, '','' );',
'         apex_debug.info(',
'            p_message => ''...Return Flow Instance Id into item "%s"''',
'         , p0        => l_split_items(1)',
'         );',
'         apex_util.set_session_state( l_split_items(1), l_process_id );',
'',
'         if l_split_items.count() = 2 then',
'            apex_debug.info(',
'               p_message => ''...Return Subflow Id into item "%s"''',
'            , p0        => l_split_items(2)',
'            );',
'            apex_util.set_session_state( l_split_items(2), l_subflow_id );',
'         end if;',
'      end if;',
'',
'      return l_result;',
'   exception ',
'      when e_no_gateway then',
'         apex_error.add_error( ',
'              p_message => flow_api_pkg.message( p_message_key => ''plugin-route-not-define'', p_lang => apex_util.get_session_lang() )',
'            , p_display_location => apex_error.c_on_error_page',
'         );',
'      when e_gateway_not_exists then',
'         apex_error.add_error( ',
'              p_message => flow_api_pkg.message( p_message_key => ''plugin-gateway-not-exist'', p_lang => apex_util.get_session_lang() )',
'            , p_display_location => apex_error.c_on_error_page',
'         );',
'      when e_no_flow then',
'         apex_error.add_error( ',
'              p_message => flow_api_pkg.message( p_message_key => ''plugin-no-instance-subflow-id'', p_lang => apex_util.get_session_lang() )',
'            , p_display_location => apex_error.c_on_error_page',
'         );',
'      when others then',
'         apex_exec.close(l_context);',
'         raise;',
'   end execution;',
'   ',
'end flow_plugin_manage_instance_step;',
'/',
'',
'create or replace package body flow_plugin_manage_instance_variables as',
'',
'   procedure log_attributes(',
'      p_process  in  apex_plugin.t_process',
'    , p_plugin   in  apex_plugin.t_plugin',
'   )',
'   is',
'   begin',
'      apex_debug.info(',
'           p_message => '' > Process plug-in attributes''',
'      );',
'      apex_debug.info(',
'           p_message => ''...Flow Instance define by: %s''',
'         , p0        => p_process.attribute_01',
'      );',
'',
'      if p_process.attribute_01 = ''item'' then ',
'         apex_debug.info(',
'            p_message => ''......Flow Instance Item used: %s - Session state value: %s''',
'            , p0        => p_process.attribute_02',
'            , p1        => apex_util.get_session_state(p_item => p_process.attribute_02)',
'         );',
'      elsif p_process.attribute_01 = ''sql''  then',
'         apex_debug.info(',
'            p_message => ''......Query''',
'         );',
'         apex_debug.log_long_message(',
'              p_message => p_process.attribute_03',
'            , p_level   => apex_debug.c_log_level_info',
'         );',
'      end if;',
'',
'      apex_debug.info(',
'           p_message => ''...Flow Instance Variables action: %s''',
'         , p0        => p_process.attribute_04',
'      );',
'',
'      apex_debug.info(',
'           p_message => ''...Manage Flow Instance Variables using: %s''',
'         , p0        => p_process.attribute_05',
'      );',
'',
'      if p_process.attribute_05 = ''item'' then ',
'         apex_debug.info(',
'            p_message => ''......Flow Instance Variable(s): %s''',
'            , p0        => p_process.attribute_06',
'         );',
'         apex_debug.info(',
'            p_message => ''......APEX item(s): %s''',
'            , p0        => p_process.attribute_07',
'         );',
'      elsif p_process.attribute_01 = ''sql''  then',
'         apex_debug.info(',
'            p_message => ''......Query''',
'         );',
'         apex_debug.log_long_message(',
'              p_message => p_process.attribute_08',
'            , p_level   => apex_debug.c_log_level_info',
'         );',
'      elsif p_process.attribute_01 = ''json''  then',
'         apex_debug.info(',
'            p_message => ''......JSON''',
'         );',
'         apex_debug.log_long_message(',
'              p_message => p_process.attribute_09',
'            , p_level   => apex_debug.c_log_level_info',
'         );',
'      end if;',
'',
'      if p_process.attribute_10 is not null then',
'         apex_debug.info(',
'            p_message => ''...Return Instance ID into: %s''',
'            , p0        => p_process.attribute_10',
'         );',
'      end if;',
'',
'      apex_debug.info(',
'           p_message => '' < Process plug-in attributes''',
'      );',
'   end log_attributes;',
'   ',
'   function execution (',
'      p_process  in  apex_plugin.t_process',
'    , p_plugin   in  apex_plugin.t_plugin',
'   ) return apex_plugin.t_process_exec_result ',
'   as',
'      l_result  apex_plugin.t_process_exec_result;',
'      l_context apex_exec.t_context;',
'',
'      --attributes',
'      l_attribute1  p_process.attribute_01%type := p_process.attribute_01; -- Flow instance selection (APEX item/SQL)',
'      l_attribute2  p_process.attribute_02%type := p_process.attribute_02; -- Process ID (APEX item)',
'      l_attribute3  p_process.attribute_03%type := p_process.attribute_03; -- SQL query (1 column process id)',
'      l_attribute4  p_process.attribute_04%type := p_process.attribute_04; -- Action (get/set)',
'      l_attribute5  p_process.attribute_05%type := p_process.attribute_05; -- Manage Process Variables using',
'      l_attribute6  p_process.attribute_06%type := p_process.attrib'))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'ute_06; -- Process Variable(s) Name(s)',
'      l_attribute7  p_process.attribute_07%type := p_process.attribute_07; -- APEX item(s)',
'      l_attribute8  p_process.attribute_08%type := p_process.attribute_08; -- JSON',
'      l_attribute9  p_process.attribute_09%type := p_process.attribute_09; -- SQL query (1 column JSON array)',
'      l_attribute10 p_process.attribute_10%type := p_process.attribute_10; -- Return instance Id into',
'',
'      --exceptions',
'      e_var_config              exception;',
'      e_incorrect_variable_type exception;',
'      e_types_different         exception;',
'      e_invalid_number          exception;',
'      e_invalid_date            exception;',
'',
'      --types',
'      type t_prcs_var is table of varchar2(50) index by varchar2(50);',
'      type t_item     is record (item_type varchar2(50), format_mask varchar(50));',
'      type t_items    is table of t_item index by varchar2(50);',
'',
'      --collections',
'      l_prcs_var   t_prcs_var;',
'      l_items      t_items;',
'      l_cur_app_id number;',
'',
'      --json',
'      l_json              clob;',
'      l_process_variables json_array_t;',
'      l_process_variable  json_object_t;',
'      l_json_element      json_element_t;',
'',
'      --variables',
'      l_prcs_id         flow_processes.prcs_id%type;',
'      l_prcs_var_type   flow_process_variables.prov_var_type%type;',
'      l_prcs_var_name   flow_process_variables.prov_var_name%type;',
'      l_split_prcs_var  apex_t_varchar2;',
'      l_split_items     apex_t_varchar2;',
'      l_item_name       varchar2(4000);',
'      l_format_mask     apex_application_page_items.format_mask%type;',
'      l_types_different number;',
'      l_ts              timestamp;',
'   begin',
'',
'      --debug',
'      log_attributes(',
'         p_plugin   => p_plugin',
'       , p_process  => p_process',
'      );',
'',
'',
'      apex_debug.info(',
'         p_message => ''...Retrieve FLow Instance Id''',
'      );',
'      -- Get process Id and subflow Id',
'      if ( l_attribute1 = ''item'' ) then',
'         l_prcs_id  := apex_util.get_session_state(p_item => l_attribute2);',
'      elsif ( l_attribute1 = ''sql'' ) then',
'         l_context         := apex_exec.open_query_context(',
'            p_location   => apex_exec.c_location_local_db',
'          , p_sql_query  => l_attribute3',
'         );',
'',
'         while apex_exec.next_row(l_context) loop',
'            l_prcs_id  := apex_exec.get_number(l_context, 1);',
'         end loop;',
'         apex_exec.close(l_context);',
'      end if;',
'',
'      apex_debug.info(',
'           p_message => ''...Flow Instance Id is %s''',
'         , p0        => l_prcs_id',
'      );',
'',
'      apex_debug.info(',
'           p_message => ''...Start %s Flow Instance Variable(s)''',
'         , p0        => case l_attribute4',
'                           when ''set'' then ''setting''',
'                           when ''get'' then ''getting''',
'                        end',
'      );',
'      --Set process variables',
'      if ( l_attribute5 in (',
'                ''json'', ''sql''',
'             ) ) then',
'         ',
'         --Get JSON for process variables',
'         if ( l_attribute5 = ''json'' ) then',
'            l_json := l_attribute8;',
'         elsif ( l_attribute5 = ''sql'' ) then',
'            l_context := apex_exec.open_query_context(',
'               p_location   => apex_exec.c_location_local_db',
'            , p_sql_query  => l_attribute9',
'            );',
'',
'            while apex_exec.next_row(l_context) loop',
'               l_json := apex_exec.get_clob(l_context, 1);',
'            end loop;',
'            apex_exec.close(l_context);',
'         end if;',
'',
'         ',
'         if ( l_attribute4 = ''set'' ) then',
'            --Check variables types',
'            select count(*)',
'            into l_types_different',
'            from',
'               json_table ( l_json ,',
'               ''$[*]''',
'                  columns (',
'                     name varchar2 ( 4000 ) path ''$.name''',
'                  , type varchar2 ( 4000 ) path ''$.type''',
'                  )',
'               ) set_var',
'               join flow_process_variables prcs_var ',
'               on prcs_var.prov_var_name = set_var.name ',
'               and prcs_var.prov_prcs_id = l_prcs_id',
'               where prcs_var.prov_var_type != upper( set_var.type );',
'            ',
'            -- Raise exception if incoherent value found',
'            if ( l_types_different > 0 ) then',
'               raise e_types_different;',
'            end if;',
'         end if;',
'',
'         l_process_variables        := json_array_t(l_json);',
'         for object in 0..l_process_variables.get_size() - 1 loop',
'            l_process_variable := json_object_t(l_process_variables.get(object));',
'            l_prcs_var_name    := l_process_variable.get_string(''name'');',
'            l_prcs_var_type    := l_process_variable.get_string(''type'');',
'            l_item_name        := l_process_variable.get_string(''item'');',
'            case l_prcs_var_type',
'               when ''varchar2'' then',
'                  apex_debug.info(',
'                     p_message => ''......Name: %s - Type: %s - Value %s''',
'                     , p0 => l_prcs_var_name',
'                     , p1 => l_prcs_var_type',
'                     , p2 => case l_attribute4',
'                                when ''set'' ',
'                                   then l_process_variable.get_string(''value'')',
'                                 when ''get'' ',
'                                    then flow_process_vars.get_var_vc2(',
'                                              pi_prcs_id  => l_prcs_id',
'                                            , pi_var_name => l_prcs_var_name',
'                                         )',
'                             end ',
'                  );',
'                  case l_attribute4',
'                     when ''set'' then',
'                        flow_process_vars.set_var(',
'                           pi_prcs_id   => l_prcs_id',
'                        , pi_var_name   => l_prcs_var_name',
'                        , pi_vc2_value  => l_process_variable.get_string(''value'')',
'                        );',
'                     when ''get'' then',
'                        apex_util.set_session_state( ',
'                             p_name  => l_item_name',
'                           , p_value => flow_process_vars.get_var_vc2(',
'                                             pi_prcs_id  => l_prcs_id',
'                                           , pi_var_name => l_prcs_var_name',
'                                        ) ',
'                        );',
'                  end case;',
'               when ''number'' then',
'                  apex_debug.info(',
'                     p_message => ''......Name: %s - Type: %s - Value %s''',
'                     , p0 => l_prcs_var_name',
'                     , p1 => l_prcs_var_type',
'                     , p2 => case l_attribute4',
'                                when ''set'' ',
'                                   then l_process_variable.get_number(''value'')',
'                                 when ''get'' ',
'                                    then flow_process_vars.get_var_num(',
'                                              pi_prcs_id  => l_prcs_id',
'                                            , pi_var_name => l_prcs_var_name',
'                                         )',
'                             end ',
'                  );',
'                  case l_attribute4',
'                     when ''set'' then',
'                        l_json_element := l_process_variable.get(''value'');',
'                        if ( l_json_element.is_Number() = false ) then',
'                           raise e_invalid_number;',
'                        end if;',
'                        flow_process_vars.set_var(',
'                             pi_prcs_id   => l_prcs_id',
'                           , pi_var_name  => l_prcs_var_name',
'                           , pi_num_value => l_process_variable.get_number(''value'')',
'                        );',
'                     when ''get'' then',
'                        apex_util.set_session_state( ',
'                             p_name  => l_item_name',
'                           , p_value => flow_process_vars.get_var_num(',
'                                             pi_prcs_id  => l_prcs_id',
'                                           , pi_var_name => l_prcs_var_name',
'                                        ) ',
'                        );',
'                  end case;',
'               when ''date'' then',
'                  apex_debug.info(',
'                     p_message => ''......Name: %s - Type: %s - Value %s''',
'                     , p0 => l_prcs_var_name',
'                     , p1 => l_prcs_var_type',
'                     , p2 => case l_attribute4',
'                                when ''set'' ',
'                                   then l_process_variable.get_date(''value'')',
'                                 when ''get'' ',
'                                    then flow_process_vars.get_var_date(',
'                                              pi_prcs_id  => l_prcs_id',
'                                            , pi_var_name => l_prcs_var_name',
'                                         )',
'                             end ',
'                  );',
'                  case l_attribute4',
'                     when ''set'' then',
'                        l_json_element := l_process_variable.get(''value'');',
'                        begin',
'                           if instr( l_process_variable.get_String(''value''), ''T'' ) > 0 then',
'                              l_ts := to_timestamp_tz( replace ( l_process_variable.get_String(''value''), ''T'', '' '' ), ''YYYY-MM-DD HH24:MI:SS TZR'' ); ',
'                           else',
'                              l_ts := to_timestamp_tz( l_process_variable.get_String(''value''), ''YYYY-MM-DD TZR'' ); ',
'                           end if;',
'                        exception when others then',
'                           raise e_invalid_date;',
'                        end;',
'                        flow_process_vars.set_var(',
'                          pi_prcs_id    => l_prcs_id',
'                        , pi_var_name   => l_prcs_var_name',
'                        , pi_date_value => l_process_variable.get_timestamp(''value'')',
'                        );',
'                     when ''get'' then',
'                        apex_exec.execute_plsql(   ''begin',
'                           :'' || l_item_name || '' :=  flow_process_vars.get_var_date(',
'                                                pi_prcs_id  => ''||l_prcs_id||''',
'                                             , pi_var_name => ''''''||l_prcs_var_name||''''''',
'                                          ); ',
'                           end;'');',
'                  end case;',
'               when ''clob'' then',
'                  apex_debug.info(',
'                     p_message => ''......Name: %s - Type: %s - Value %s''',
'                     , p0 => l_prcs_var_name',
'                     , p1 => l_prcs_var_type',
'                     , p2 => case l_attribute4',
'                                when ''set'' ',
'                                   then l_process_variable.get_clob(''value'')',
'                                 when ''get'' ',
'                                    then flow_process_vars.get_var_clob(',
'                                              pi_prcs_id  => l_prcs_id',
'                                            , pi_var_name => l_prcs_var_name',
'                                         )',
'                             end ',
'                  );',
'                  case l_attribute4',
'                     when ''set'' then',
'                        flow_process_vars.set_var(',
'                        pi_prcs_id    => l_prcs_id',
'                        , pi_var_name   => l_prcs_var_name',
'                        , pi_clob_value => l_process_variable.get_clob(''value'')',
'                        );',
'                     when ''get'' then',
'                        apex_exec.execute_plsql(''begin',
'                           :'' || l_item_name || '' := flow_process_vars.get_var_clob(',
'                                                pi_prcs_id  => ''|| l_prcs_id ||''',
'                                             , pi_var_name => ''''''|| l_prcs_var_name ||''''''',
'                                          );',
'                           end;''',
'                        );',
'                  end case;                   ',
'               else',
'                  raise e_incorrect_variable_type;',
'            end case;',
'         end loop;',
'      elsif ( l_attribute5 = ''item'' ) then',
'         -- Get process variable(s) name(s)',
'         l_split_prcs_var := apex_string.split(l_attribute6, '','');',
'',
'         -- Get APEX item(s) name(s)',
'         l_split_items := apex_string.split(l_attribute7, '','');',
'',
'         --Raise exception if number of process variables is not the same of APEX items',
'         if ( l_split_prcs_var.count() != l_split_items.count() ) then',
'            raise e_var_config;',
'         end if;',
'',
'         -- Get process variables types',
'         for rec in (',
'            select prov_var_name, prov_var_type',
'            from flow_process_variables prov',
'         where prov.prov_prcs_id = l_prcs_id',
'            and prov.prov_var_name in (',
'               select trim(column_value)',
'               from table(l_split_prcs_var)',
'            )',
'         )',
'         loop',
'            l_prcs_var(rec.prov_var_name) := rec.prov_var_type;',
'         end loop;',
'',
'         l_cur_app_id := nv(''APP_ID'');',
'         -- Get items types',
'         for rec in (',
'            select column_value as item_name',
'               , case',
'                     when aapi.display_as_code = ''NATIVE_NUMBER_FIELD''    then',
'                        ''NUMBER''',
'                     when aapi.display_as_code = ''NATIVE_DATE_PICKER''     then',
'                        ''DATE''',
'                     else',
'                        ''VARCHAR2''',
'                  end as item_type',
'               , aapi.format_mask format_mask',
'            from table(apex_string.split(l_attribute7, '','')) items',
'            left outer join apex_application_page_items aapi',
'               on aapi.item_name = items.column_value',
'              and aapi.application_id = l_cur_app_id',
'            left outer join apex_application_items aai',
'               on aai.item_name = items.column_value',
'              and aai.application_id = l_cur_app_id',
'         )',
'         loop',
'            l_items(rec.item_name).item_type   := rec.item_type;',
'            l_items(rec.item_name).format_mask := coalesce( rec.format_mask, v(''APP_NLS_DATE_FORMAT'') );',
'         end loop;',
'',
'         -- Loop through variables',
'         for i in l_split_prcs_var.first..l_split_prcs_var.last',
'         loop',
'            -- Get process variable name and item name ',
'            l_prcs_var_name := trim( l_split_prcs_var( i ) );',
'            l_item_name     := trim( l_split_items( i ) );',
'',
'            -- Look for variable type',
'            begin',
'               l_prcs_var_type := l_prcs_var( l_prcs_var_name );',
'            exception ',
'               -- Look for item type',
'               when no_data_found then',
'                  l_prcs_var_type := l_items ( l_item_name ).item_type;',
'            end;',
'            ',
'            case l_prcs_var_type ',
'               when ''VARCHAR2'' then',
'                  apex_debug.info(',
'                     p_message => ''......Name: %s - Type: %s - Value %s''',
'                     , p0 => l_prcs_var_name',
'                     , p1 => l_prcs_var_type',
'                     , p2 => case l_attribute4',
'                                when ''set'' ',
'                                   then apex_util.get_session_state( p_item => l_item_name )',
'                                 when ''get'' ',
'                                    then flow_process_vars.get_var_vc2(',
'                                              pi_prcs_id  => l_prcs_id',
'                                            , pi_var_name => l_prcs_var_name',
'                                         )',
'                             end ',
'                  );',
'                  case l_attribute4',
'                     when ''set'' then',
'                        flow_process_vars.set_var(',
'                           pi_prcs_id    => l_prcs_id',
'                           , pi_var_name   => l_prcs_var_name',
'                           , pi_vc2_value  => apex_util.get_session_state( p_item => l_item_name )',
'                        );',
'                     when ''get'' then',
'                        apex_util.set_session_state( ',
'                             p_name  => l_item_name',
'                           , p_value => flow_process_vars.get_var_vc2(',
'                                             pi_prcs_id  => l_prcs_id',
'                                           , pi_var_name => l_prcs_var_name',
'                                        ) ',
'                        );',
'                  end case;',
'',
'               when ''NUMBER'' then',
'                  apex_debug.info(',
'                     p_message => ''......Name: %s - Type: %s - Value %s''',
'                     , p0 => l_prcs_var_name',
'                     , p1 => l_prcs_var_type',
'                     , p2 => case l_attribute4',
'                                when ''set'' ',
'                                   then to_number( apex_util.get_session_state( p_item => l_item_name ) )',
'                                 when ''get'' ',
'                                    then flow_process_vars.get_var_num(',
'                                              pi_prcs_id  => l_prcs_id',
'                                            , pi_var_name => l_prcs_var_name',
'                                         )',
'                             end ',
'                  );',
'                  case l_attribute4',
'                     when ''set'' then',
'                        flow_process_vars.set_var(',
'                           pi_prcs_id    => l_prcs_id',
'                           , pi_var_name   => l_prcs_var_name',
'                           , pi_num_value  => to_number( apex_util.get_session_state( p_item => l_item_name ) )',
'                        );',
'                     when ''get'' then',
'                        apex_util.set_session_state( ',
'                             p_name  => l_item_name',
'                           , p_value => flow_process_vars.get_var_num(',
'                                             pi_prcs_id  => l_prcs_id',
'                                           , pi_var_name => l_prcs_var_name',
'                                        ) ',
'                        );',
'                  end case;',
'               when ''DATE'' then',
'                  apex_debug.info(',
'                     p_message => ''......Name: %s - Type: %s - Value %s''',
'                     , p0 => l_prcs_var_name',
'                     , p1 => l_prcs_var_type',
'                     , p2 => case l_attribute4',
'                                when ''set'' ',
'                                   then apex_util.get_session_state( p_item => l_item_name )',
'                                 when ''get'' ',
'                                    then to_char(',
'                                            flow_process_vars.get_var_date(',
'                                               pi_prcs_id  => l_prcs_id',
'                                             , pi_var_name => l_prcs_var_name',
'                                            ), l_items(l_item_name).format_mask ',
'                                          )',
'                             end ',
'                  );',
'                  case l_attribute4',
'                     when ''set'' then',
'                        flow_process_vars.set_var(',
'                           pi_prcs_id     => l_prcs_id',
'                           , pi_var_name    => l_prcs_var_name',
'                           , pi_date_value  => to_date( apex_util.get_session_state( p_item => l_item_name ) , l_items(l_item_name).format_mask )',
'                        );',
'                     when ''get'' then',
'                        apex_util.set_session_state( ',
'                             p_name  => l_item_name',
'                           , p_value => to_char(',
'                                          flow_process_vars.get_var_date(',
'                                             pi_prcs_id  => l_prcs_id',
'                                           , pi_var_name => l_prcs_var_name',
'                                        ), l_items(l_item_name).format_mask )',
'                        );',
'                  end case;',
'            when ''CLOB'' then',
'               apex_debug.info(',
'                  p_message => ''......Name: %s - Type: %s - Value %s''',
'                  , p0 => l_prcs_var_name',
'                  , p1 => l_prcs_var_type',
'                  , p2 => case l_attribute4',
'                             when ''set'' ',
'                                then apex_util.get_session_state( p_item => l_item_name )',
'                              when ''get'' ',
'                                 then flow_process_vars.get_var_clob(',
'                                           pi_prcs_id  => l_prcs_id',
'                                         , pi_var_name => l_prcs_var_name',
'                                      )',
'                          end ',
'               );',
'               case l_attribute4',
'                  when ''set'' then',
'                     flow_process_vars.set_var(',
'                        pi_prcs_id     => l_prcs_id',
'                        , pi_var_name    => l_prcs_var_name',
'                        , pi_clob_value  => apex_util.get_session_state( p_item => l_item_name )',
'                     );',
'                  when ''get'' then',
'                     apex_exec.execute_plsql(''begin',
'                        :'' || l_item_name || q''[ := '']'' || flow_process_vars.get_var_clob(',
'                                             pi_prcs_id  => l_prcs_id',
'                                          , pi_var_name => l_prcs_var_name',
'                                       ) || q''['';',
'                        end;]''',
'                     );',
'               end case;',
'            end case;',
'         end loop;',
'      end if;',
'      apex_debug.info(',
'           p_message => ''...End %s Flow Instance Variable(s)''',
'         , p0        => case l_attribute4',
'                           when ''set'' then ''setting''',
'                           when ''get'' then ''getting''',
'                        end ',
'      );',
'',
'      -- Return instance id in the APEX item provided',
'      if ( l_attribute10 is not null ) then',
'         apex_debug.info(',
'            p_message => ''...Return Flow Instance Id into item "%s"''',
'         , p0        => l_attribute10',
'         );',
'         apex_util.set_session_state( l_attribute10, l_prcs_id );',
'      end if;',
'',
'      return l_result;',
'   exception ',
'      when e_var_config then',
'         apex_error.add_error( ',
'              p_message => flow_api_pkg.message( p_message_key => ''plugin-wrong-variable-number'', p_lang => apex_util.get_session_lang() )',
'            , p_display_location => apex_error.c_on_error_page',
'         );',
'      when e_incorrect_variable_type then',
'         if apex_application.g_debug then',
'            apex_debug.error(',
'               p_message => ''-- Flows4apex - Plug-in configuration issue, process variables JSON contains incorrect variable type.''',
'            );',
'         end if;',
'         apex_error.add_error( ',
'              p_message => flow_api_pkg.message( p_message_key => ''plugin-parsing-json-variables'', p_lang => apex_util.get_session_lang() )',
'            , p_display_location => apex_error.c_on_error_page',
'         );',
'      when e_types_different then',
'         apex_error.add_error( ',
'              p_message => flow_api_pkg.message( p_message_key => ''plugin-wrong-variable-type'', p_lang => apex_util.get_session_lang() )',
'            , p_display_location => apex_error.c_on_error_page',
'         );',
'      when e_invalid_number then',
'         apex_error.add_error( ',
'              p_message => flow_api_pkg.message( p_message_key => ''plugin-variable-not-a-number'', p_lang => apex_util.get_session_lang() )',
'            , p_display_location => apex_error.c_on_error_page',
'         );',
'      when e_invalid_date then',
'         apex_error.add_error( ',
'              p_message => flow_api_pkg.message( p_message_key => ''plugin-variable-not-a-date'', p_lang => apex_util.get_session_lang() )',
'            , p_display_location => apex_error.c_on_error_page',
'         );',
'   end execution;',
'',
'end flow_plugin_manage_instance_variables;',
'/',
'',
'create or replace package body flow_modeler',
'as',
'  function render',
'  (',
'    p_region              in  apex_plugin.t_region',
'  , p_plugin              in  apex_plugin.t_plugin',
'  , p_is_printer_friendly in  boolean',
'  )',
'    return apex_plugin.t_region_render_result',
'  as',
'    l_return apex_plugin.t_region_render_result;',
'  begin',
'    apex_plugin_util.debug_region',
'    (',
'      p_plugin => p_plugin',
'    , p_region => p_region',
'    );',
'    sys.htp.p( ''<div id="'' || p_region.static_id || ''_modeler" class="flows4apex-modeler '' || v(''THEME_PLUGIN_CLASS'') || ''">'' );',
'    sys.htp.p( ''<div id="'' || p_region.static_id || ''_canvas" class="canvas"></div>'' );',
'    sys.htp.p( ''<div id="'' || p_region.static_id || ''_properties" class="properties-panel-parent"></div>'' );',
'    sys.htp.p( ''<div id="'' || p_region.static_id || ''_dialogContainer" class="dialog-container"></div>'' );',
'    sys.htp.p( ''</div>'' );',
'    apex_javascript.add_onload_code',
'    (',
'      p_code =>',
'        ''apex.jQuery("#'' || p_region.static_id || ''").modeler({'' ||',
'        apex_javascript.add_attribute',
'        (',
'          p_name      => ''ajaxIdentifier''',
'        , p_value     => apex_plugin.get_ajax_identifier',
'        , p_add_comma => true',
'        ) ||',
'        apex_javascript.add_attribute',
'        (',
'          p_name      => ''itemsToSubmit''',
'        , p_value     => apex_plugin_util.page_item_names_to_jquery( p_page_item_names => p_region.ajax_items_to_submit )',
'        , p_add_comma => true',
'        ) ||',
'        ''})''',
'    );',
'    return l_return;',
'    ',
'  end render;',
'  procedure load',
'  (',
'    p_region in apex_plugin.t_region',
'  , p_plugin in apex_plugin.t_plugin',
'  )',
'  as',
'    type t_col_position_tab is table of pls_integer index by varchar2(128);',
'    ',
'    l_col_positions t_col_position_tab;',
'    l_context       apex_exec.t_context;',
'    l_id      number;',
'    l_content clob;',
'    l_found   boolean := false;',
'  begin',
'    apex_plugin_util.debug_region',
'    (',
'      p_plugin => p_plugin',
'    , p_region => p_region',
'    );',
'    l_context :=',
'      apex_exec.open_query_context',
'      (',
'        p_first_row => 1',
'      , p_max_rows  => 1',
'      );',
'    l_col_positions(''id'') :=',
'      apex_exec.get_column_position',
'      (',
'        p_context     => l_context',
'      , p_column_name => ''DGRM_ID''',
'      , p_is_required => true',
'      , p_data_type   => apex_exec.c_data_type_number',
'      );',
'    ',
'    l_col_positions(''content'') :=',
'      apex_exec.get_column_position',
'      (',
'        p_context     => l_context',
'      , p_column_name => ''DGRM_CONTENT''',
'      , p_is_required => true',
'      , p_data_type   => apex_exec.c_data_type_clob',
'      );',
'    apex_json.open_object;',
'    apex_json.write',
'    (',
'      p_name  => ''success''',
'    , p_value => true',
'    );',
'    if apex_exec.next_row( p_context => l_context ) then',
'      l_found   := true;',
'      l_id      := apex_exec.get_number( p_context => l_context, p_column_idx => l_col_positions(''id'') );',
'      l_content := apex_exec.get_clob( p_context => l_context, p_column_idx => l_col_positions(''content'') );',
'    else',
'      l_found   := false;',
'    end if;',
'    apex_exec.close( p_context => l_context );',
'    apex_json.write',
'    (',
'      p_name  => ''found''',
'    , p_value => l_found',
'    );',
'    apex_json.open_object',
'    (',
'      p_name => ''data''',
'    );',
'    if l_found then',
'      apex_json.write',
'      (',
'        p_name  => ''id''',
'      , p_value => l_id',
'      );',
'      apex_json.write',
'      (',
'        p_name  => ''content''',
'      , p_value => l_content',
'      );',
'    else',
'      apex_json.write',
'      (',
'        p_name  => ''message''',
'      , p_value => flow_api_pkg.message( p_message_key => ''plugin-modeler-id-not-found'', p_lang => apex_util.get_session_lang() )',
'      );',
'    end if;',
'    apex_json.close_all;',
'  exception',
'    when others then',
'      apex_exec.close( p_context => l_context );',
'      apex_json.open_object;',
'      apex_json.write',
'      (',
'        p_name  => ''success''',
'      , p_value => false',
'      );',
'      apex_json.write',
'      (',
'        p_name  => ''message''',
'      , p_value => flow_api_pkg.message( p_message_key => ''plugin-unexpected-error'', p_lang => apex_util.get_session_lang() )',
'      );',
'      apex_json.close_all;',
'  end load;',
'  procedure save',
'  (',
'    p_region in apex_plugin.t_region',
'  , p_plugin in apex_plugin.t_plugin',
'  )',
'  as',
'    l_str_tab apex_t_varchar2 := apex_t_varchar2();',
'    l_clob    clob;',
'    l_values  apex_json.t_values;',
'    l_id      number;',
'    l_content clob;',
'  begin',
'    for i in 1..apex_application.g_json.count loop',
'      l_str_tab.extend();',
'      l_str_tab(i) := apex_application.g_json(i);',
'    end loop;',
'    l_clob := apex_string.join_clob( p_table => l_str_tab, p_sep => null );',
'    apex_json.parse',
'    (',
'      p_values => l_values',
'    , p_source => l_clob',
'    );',
'    l_id      := apex_json.get_number( p_values => l_values, p_path => ''regions[1].data.id'' );',
'    l_content := apex_json.get_clob( p_values => l_values, p_path => ''regions[1].data.content'');',
'    flow_bpmn_parser_pkg.update_diagram',
'    (',
'      pi_dgrm_id      => l_id',
'    , pi_dgrm_content => l_content',
'    );',
'    apex_json.open_object;',
'    apex_json.write( p_name => ''success'', p_value => true );',
'    apex_json.write',
'      (',
'        p_name  => ''message''',
'      , p_value => flow_api_pkg.message( p_message_key => ''plugin-diagram-saved'', p_lang => apex_util.get_session_lang() )',
'      );',
'    apex_json.close_all;',
'  exception',
'    when others then',
'      apex_json.open_object;',
'      apex_json.write( p_name => ''success'', p_value => false );',
'      apex_json.write',
'      (',
'        p_name  => ''message''',
'      , p_value => flow_api_pkg.message( p_message_key => ''plugin-diagram-not-parsable'', p_lang => apex_util.get_session_lang() )',
'      );',
'      apex_json.close_all;',
'  end save;',
'  procedure get_applications',
'  as',
'    l_result clob;',
'    cursor c_applications is select * from apex_applications order by application_name;',
'    l_application apex_applications%rowtype;',
'  begin',
'    l_result := ''[{"name":"","value":""},'';',
'    open c_applications;',
'    loop',
'        fetch c_applications into l_application;',
'        exit when c_applications%NOTFOUND;',
'        l_result := l_result || ''{"name":"'' || l_application.application_name || ''","value":"'' || l_application.application_id || ''"},'';',
'    end loop;',
'    l_result := rtrim(l_result, '','') || '']'';',
'    htp.p(l_result);',
'  end get_appl'))
);
null;
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2020.03.31'
,p_release=>'20.1.0.00.13'
,p_default_workspace_id=>2400405578329584
,p_default_application_id=>100
,p_default_id_offset=>0
,p_default_owner=>'FLOWS4APEX'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(35319815279887870)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'ications;',
'  procedure get_pages',
'  as',
'    l_result clob;',
'    cursor c_pages is select * from apex_application_pages where application_id = apex_application.g_x02 order by page_name;',
'    l_page apex_application_pages%rowtype;',
'  begin',
'    l_result := ''[{"name":"","value":""},'';',
'    open c_pages;',
'    loop',
'        fetch c_pages into l_page;',
'        exit when c_pages%NOTFOUND;',
'        l_result := l_result || ''{"name":"'' || l_page.page_name || ''","value":"'' || l_page.page_id || ''"},'';',
'    end loop;',
'    l_result := rtrim(l_result, '','') || '']'';',
'    htp.p(l_result);',
'  end get_pages;',
'  procedure get_items',
'  as',
'    l_result clob;',
'    cursor c_items is select * from apex_application_page_items where application_id = apex_application.g_x02 and page_id = apex_application.g_x03 order by item_name;',
'    l_item apex_application_page_items%rowtype;',
'  begin',
'    l_result := ''[{"name":"","value":""},'';',
'    open c_items;',
'    loop',
'        fetch c_items into l_item;',
'        exit when c_items%NOTFOUND;',
'        l_result := l_result || ''{"name":"'' || l_item.item_name || ''","value":"'' || l_item.item_name || ''"},'';',
'    end loop;',
'    l_result := rtrim(l_result, '','') || '']'';',
'    htp.p(l_result);',
'  end get_items;',
'  procedure get_applications_mail',
'  as',
'    l_result clob;',
'    cursor c_applications is select * from apex_applications where application_id in (select application_id from apex_appl_email_templates) order by application_name;',
'    l_application apex_applications%rowtype;',
'  begin',
'    l_result := ''[{"name":"","value":""},'';',
'    open c_applications;',
'    loop',
'        fetch c_applications into l_application;',
'        exit when c_applications%NOTFOUND;',
'        l_result := l_result || ''{"name":"'' || l_application.application_name || ''","value":"'' || l_application.application_id || ''"},'';',
'    end loop;',
'    l_result := rtrim(l_result, '','') || '']'';',
'    htp.p(l_result);',
'  end get_applications_mail;',
'  procedure get_templates',
'  as',
'    l_result clob;',
'    cursor c_templates is select * from apex_appl_email_templates where application_id = apex_application.g_x02 order by name;',
'    l_template apex_appl_email_templates%rowtype;',
'  begin',
'    l_result := ''[{"name":"","value":""},'';',
'    open c_templates;',
'    loop',
'        fetch c_templates into l_template;',
'        exit when c_templates%NOTFOUND;',
'        l_result := l_result || ''{"name":"'' || l_template.name || ''","value":"'' || l_template.static_id || ''"},'';',
'    end loop;',
'    l_result := rtrim(l_result, '','') || '']'';',
'    htp.p(l_result);',
'  end get_templates;',
'  procedure get_json_placeholders',
'  as',
'    l_placeholders apex_t_varchar2;',
'  begin',
'    with email_content as (',
'      select subject||text_template||html_body||html_footer||html_header as d',
'      from apex_appl_email_templates',
'      where application_id = apex_application.g_x02 ',
'      and static_id = apex_application.g_x03',
'   ),',
'   placeholders as (',
'      select distinct to_char(regexp_substr(ec.d, ''\#(.*?)\#'', 1, level, NULL, 1)) AS placeholder',
'      from email_content ec',
'      connect by level <= length(regexp_replace(ec.d, ''\#(.*?)\#'')) + 1',
'   ) ',
'   select p.placeholder',
'   bulk collect into l_placeholders',
'   from placeholders p',
'   where p.placeholder is not null',
'   order by p.placeholder;',
'',
'   apex_json.open_object;',
'   for i in 1..l_placeholders.count()',
'   loop',
'      apex_json.write(p_name => l_placeholders(i), p_value => '''', p_write_null => true);',
'   end loop;',
'   apex_json.close_object;',
'  end get_json_placeholders;',
'  procedure parse_code',
'  as',
'    v_cur int;',
'    v_command varchar2(100);',
'    v_input varchar2(4000);',
'    l_result clob := ''{"message":""}'';',
'  begin',
'    if (apex_application.g_x02 is not null) then',
'        case apex_application.g_x03',
'        when ''sql'' then',
'            v_command := upper(substr(apex_application.g_x02, 1,instr(apex_application.g_x02,'' '') - 1));',
'            if v_command in ( ''ALTER'', ''COMPUTE'', ''CREATE'', ''DROP'', ''GRANT'', ''REVOKE'') then',
'                l_result := ''{"message":"Forbidden DDL statement","success":"false"}'';',
'            elsif v_command in ( ''SELECT'', ''INSERT'', ''UPDATE'', ''DELETE'' ) then',
'                v_input := rtrim(apex_application.g_x02, '';'');',
'                begin',
'                    v_cur := dbms_sql.open_cursor();',
'                    dbms_sql.parse(v_cur, v_input, dbms_sql.native);',
'                    dbms_sql.close_cursor(v_cur);',
'                    l_result := ''{"message":"Validation successful","success":"true"}'';',
'                exception',
'                    when others then l_result := ''{"message":"'' || apex_escape.json(sqlerrm) || ''","success":"false"}'';',
'                end;',
'            else',
'                l_result := ''{"message":"Unparsable SQL","success":"false"}'';',
'            end if;',
'        when ''plsql'' then',
'            case apex_application.g_x04',
'               when ''plsqlProcess'' then',
'                  v_input := ''begin'' || apex_application.lf || apex_application.g_x02 || apex_application.lf || ''end;'';',
'               when ''plsqlExpression'' then',
'                  v_input := ''declare dummy varchar2(4000) :=''',
'                              || apex_application.lf || apex_application.g_x02 || apex_application.lf || ''begin null; end;'';',
'               when ''plsqlFunctionBody'' then',
'                  v_input := ''declare function dummy return varchar2 is begin''',
'                              || apex_application.lf || apex_application.g_x02 || apex_application.lf || ''end; begin null; end;'';',
'            end case;',
'            begin',
'                    v_cur := dbms_sql.open_cursor();',
'                    dbms_sql.parse(v_cur, v_input, dbms_sql.native);',
'                    dbms_sql.close_cursor(v_cur);',
'                    l_result := ''{"message":"Validation successful","success":"true"}'';',
'                exception',
'                    when others then l_result := ''{"message":"'' || apex_escape.json(sqlerrm) || ''","success":"false"}'';',
'                end;',
'        end case;',
'    end if;',
'    htp.p(l_result);',
'  end parse_code;',
'  function ajax',
'  (',
'    p_region              in  apex_plugin.t_region',
'  , p_plugin              in  apex_plugin.t_plugin',
'  )',
'    return apex_plugin.t_region_ajax_result',
'  as',
'    l_return apex_plugin.t_region_ajax_result;',
'  begin',
'    case upper(apex_application.g_x01)',
'      when ''LOAD'' then load( p_region => p_region, p_plugin => p_plugin );',
'      when ''SAVE'' then save( p_region => p_region, p_plugin => p_plugin );',
'      when ''GET_APPLICATIONS'' then get_applications;',
'      when ''GET_PAGES'' then get_pages;',
'      when ''GET_ITEMS'' then get_items;',
'      when ''GET_APPLICATIONS_MAIL'' then get_applications_mail;',
'      when ''GET_TEMPLATES'' then get_templates;',
'      when ''PARSE_CODE'' then parse_code;',
'      when ''GET_JSON_PLACEHOLDERS'' then get_json_placeholders;',
'      else null;',
'    end case;',
'    return l_return;',
'  end ajax;',
'end flow_modeler;',
'/',
'',
'create or replace package body flow_viewer',
'as',
'',
'    function render',
'  (',
'    p_region              in  apex_plugin.t_region',
'  , p_plugin              in  apex_plugin.t_plugin',
'  , p_is_printer_friendly in  boolean',
'  )',
'    return apex_plugin.t_region_render_result',
'  as',
'    l_return apex_plugin.t_region_render_result;',
'  begin',
'',
'    apex_plugin_util.debug_region',
'    (',
'      p_plugin => p_plugin',
'    , p_region => p_region',
'    );',
'',
'    sys.htp.p( ''<div id="'' || p_region.static_id || ''_canvas" class="flows4apex-viewer '' || v(''THEME_PLUGIN_CLASS'') || ''" style="display: none;"></div>'' );',
'    sys.htp.p( ''<span id="'' || p_region.static_id || ''_ndf" class="nodatafound" style="display: none;">'' || coalesce(p_region.no_data_found_message, ''No data found.'') || ''</span>'' );',
'',
'    apex_javascript.add_onload_code',
'    (',
'      p_code => ''apex.jQuery("#'' || p_region.static_id || ''").viewer({'' ||',
'                  apex_javascript.add_attribute',
'                  (',
'                    p_name      => ''ajaxIdentifier''',
'                  , p_value     => apex_plugin.get_ajax_identifier',
'                  , p_add_comma => true',
'                  ) ||',
'                  apex_javascript.add_attribute',
'                  (',
'                    p_name      => ''itemsToSubmit''',
'                  , p_value     => apex_plugin_util.page_item_names_to_jquery( p_page_item_names => p_region.ajax_items_to_submit )',
'                  , p_add_comma => true',
'                  ) ||',
'                  apex_javascript.add_attribute',
'                  (',
'                    p_name      => ''noDataFoundMessage''',
'                  , p_value     => p_region.no_data_found_message',
'                  , p_add_comma => true',
'                  ) ||',
'                  apex_javascript.add_attribute',
'                  (',
'                    p_name      => ''refreshOnLoad''',
'                  , p_value     => ( p_region.attribute_08 = ''Y'' )',
'                  , p_add_comma => true',
'                  ) ||',
'                  apex_javascript.add_attribute',
'                  (',
'                    p_name      => ''enableExpandModule''',
'                  , p_value     => ( p_region.attribute_10 = ''Y'' )',
'                  , p_add_comma => true',
'                  ) ||',
'                  apex_javascript.add_attribute',
'                  (',
'                    p_name      => ''useNavigatedViewer''',
'                  , p_value     => ( p_region.attribute_11 = ''Y'' )',
'                  , p_add_comma => true',
'                  ) ||',
'                  ''"config":'' || p_region.init_javascript_code || ''({})'' ||',
'                ''})''',
'    );',
'',
'    return l_return;',
'  end render;',
'',
'  function ajax',
'  (',
'    p_region              in  apex_plugin.t_region',
'  , p_plugin              in  apex_plugin.t_plugin',
'  )',
'    return apex_plugin.t_region_ajax_result',
'  as',
'',
'    l_context           apex_exec.t_context;',
'    l_diagram_col_idx   pls_integer;',
'    l_current_col_idx   pls_integer;',
'    l_completed_col_idx pls_integer;',
'    l_error_col_idx     pls_integer;',
'    l_row_found         boolean;',
'    l_column_value_list apex_plugin_util.t_column_value_list2;',
'    l_data_type_list    apex_application_global.vc_arr2;',
'',
'    l_current_nodes   apex_t_varchar2;',
'    l_completed_nodes apex_t_varchar2;',
'    l_error_nodes     apex_t_varchar2;',
'',
'    l_return apex_plugin.t_region_ajax_result;',
'  begin',
'    apex_plugin_util.debug_region',
'    (',
'      p_plugin => p_plugin',
'    , p_region => p_region',
'    );',
'',
'    l_context :=',
'      apex_exec.open_query_context',
'      (',
'        p_first_row => 1',
'      , p_max_rows  => 1',
'      );',
'',
'    l_diagram_col_idx :=',
'      apex_exec.get_column_position',
'      (',
'        p_context     => l_context',
'      , p_column_name => p_region.attribute_01',
'      , p_is_required => true',
'      , p_data_type   => apex_exec.c_data_type_clob',
'      );',
'',
'    l_current_col_idx :=',
'      apex_exec.get_column_position',
'      (',
'        p_context     => l_context',
'      , p_column_name => p_region.attribute_02',
'      , p_is_required => false',
'      , p_data_type   => apex_exec.c_data_type_varchar2',
'      );',
'',
'    l_completed_col_idx :=',
'      apex_exec.get_column_position',
'      (',
'        p_context     => l_context',
'      , p_column_name => p_region.attribute_04',
'      , p_is_required => false',
'      , p_data_type   => apex_exec.c_data_type_varchar2',
'      );',
'',
'    l_error_col_idx :=',
'      apex_exec.get_column_position',
'      (',
'        p_context     => l_context',
'      , p_column_name => p_region.attribute_06',
'      , p_is_required => false',
'      , p_data_type   => apex_exec.c_data_type_varchar2',
'      );',
'',
'    apex_json.open_object;',
'',
'',
'    if apex_exec.next_row( p_context => l_context ) then',
'',
'      apex_json.write',
'      (',
'        p_name  => ''found''',
'      , p_value => true',
'      );',
'',
'      apex_json.open_object',
'      (',
'        p_name => ''data''',
'      );',
'',
'      apex_json.write',
'      (',
'        p_name  => ''diagram''',
'      , p_value => apex_exec.get_clob( p_context => l_context, p_column_idx => l_diagram_col_idx )',
'      );',
'',
'      apex_json.open_array',
'      (',
'        p_name => ''current''',
'      );',
'',
'      if l_current_col_idx is not null then',
'        l_current_nodes :=',
'          apex_string.split',
'          (',
'            p_str => apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_current_col_idx )',
'          , p_sep => '':''',
'          );',
'        ',
'        for i in 1..l_current_nodes.count loop',
'          apex_json.write( p_value => l_current_nodes(i) );',
'        end loop;',
'      end if;',
'',
'      apex_json.close_array;',
'',
'      apex_json.open_array',
'      (',
'        p_name => ''completed''',
'      );',
'      ',
'      if l_completed_col_idx is not null then',
'        l_completed_nodes :=',
'          apex_string.split',
'          (',
'            p_str => apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_completed_col_idx )',
'          , p_sep => '':''',
'          );',
'        ',
'        for i in 1..l_completed_nodes.count loop',
'          apex_json.write( p_value => l_completed_nodes(i) );',
'        end loop;',
'      end if;',
'',
'      apex_json.close_array;',
'',
'      apex_json.open_array',
'      (',
'        p_name => ''error''',
'      );',
'',
'      if l_error_col_idx is not null then',
'        l_error_nodes :=',
'          apex_string.split',
'          (',
'            p_str => apex_exec.get_varchar2( p_context => l_context, p_column_idx => l_error_col_idx )',
'          , p_sep => '':''',
'          );',
'        ',
'        for i in 1..l_error_nodes.count loop',
'          apex_json.write( p_value => l_error_nodes(i) );',
'        end loop;',
'      end if;',
'',
'    else',
'      apex_json.write',
'      (',
'        p_name  => ''found''',
'      , p_value => false',
'      );',
'',
'    end if;',
'',
'    apex_json.close_all;',
'    return l_return;',
'  end ajax;',
'',
'end flow_viewer;',
'/',
''))
);
null;
wwv_flow_api.component_end;
end;
/
